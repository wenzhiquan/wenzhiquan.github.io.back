<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fedora 20 安装gitolite</title>
    <url>/2014/10/14/2014-10-14-fedora-20-gitolite/</url>
    <content><![CDATA[<blockquote>
<p>“git本地化之后，可能会用到权限管理，gitolite就是一个强大的权限管理工具”</p>
</blockquote>
<h3 id="gitolite安装先决条件"><a href="#gitolite安装先决条件" class="headerlink" title="gitolite安装先决条件"></a>gitolite安装先决条件</h3><p>关于<code>git</code>和<code>ssh</code>登录的基础知识，网上已经有很多很好的文章，在这里就不再加以赘述了。</p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>要安装<code>gitolite</code>，首先要安装<code>git</code>:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="创建git用户组和git用户"><a href="#创建git用户组和git用户" class="headerlink" title="创建git用户组和git用户"></a>创建git用户组和git用户</h4><p>然后，需要新建用户和用户组<code>git</code>，以方便所有用户使用<code>git</code>账户进行登录：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 添加git用户组</span></span><br><span class="line">sudo groupadd git</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建新用户git并将其添加到用户组git之中</span></span><br><span class="line">sudo adduser -g git git</span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改用户git的密码</span></span><br><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<h4 id="创建管理员密钥"><a href="#创建管理员密钥" class="headerlink" title="创建管理员密钥"></a>创建管理员密钥</h4><p>由于初始化<code>gitolite</code>需要一个管理员的公钥，所以需要创建一个<code>key</code>:</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为名为“yourname”的账户生成相应的key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"yourname"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择存储key的位置及key文件名称</span></span><br><span class="line">Enter file in which to save the key (/home/user/.ssh/id_rsa): /home/user/.ssh/yourname</span><br><span class="line">Enter passphrase (empty for no passphrase): <span class="comment">#为你的key创建密码，一般不需要，回车即可</span></span><br><span class="line">Enter same passphrase again: <span class="comment">#回车即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后输出类似的结果表示key生成成功</span></span><br><span class="line">...</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|<span class="string">    . .          </span>|</span><br><span class="line">|<span class="string">     = .         </span>|</span><br><span class="line">|<span class="string">  . o E          </span>|</span><br><span class="line">|<span class="string"> o o = o         </span>|</span><br><span class="line">|<span class="string">  o o = S        </span>|</span><br><span class="line">|<span class="string">   . + B.        </span>|</span><br><span class="line">|<span class="string">    . =o.        </span>|</span><br><span class="line">|<span class="string">     .o.         </span>|</span><br><span class="line">|<span class="string">     .oo.        </span>|</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>
<h4 id="将公钥上传到git用户中"><a href="#将公钥上传到git用户中" class="headerlink" title="将公钥上传到git用户中"></a>将公钥上传到git用户中</h4><p>生成<code>key</code>之后，需要将其上传到<code>git</code>用户之中：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># 将公钥上传到<span class="selector-tag">git</span>用户中</span><br><span class="line"><span class="selector-tag">scp</span> /<span class="selector-tag">home</span>/<span class="selector-tag">user</span>/<span class="selector-class">.ssh</span>/<span class="selector-tag">yourname</span><span class="selector-class">.pub</span> <span class="selector-tag">git</span>@<span class="selector-tag">localhost</span>:/<span class="selector-tag">tmp</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ECDSA</span> <span class="selector-tag">key</span> <span class="selector-tag">fingerprint</span> <span class="selector-tag">is</span> <span class="selector-tag">77</span><span class="selector-pseudo">:ad</span><span class="selector-pseudo">:e9</span><span class="selector-pseudo">:c2</span><span class="selector-pseudo">:e3</span><span class="selector-pseudo">:9f</span><span class="selector-pseudo">:bc</span><span class="selector-pseudo">:eb</span><span class="selector-pseudo">:38</span><span class="selector-pseudo">:42</span><span class="selector-pseudo">:e8</span><span class="selector-pseudo">:24</span><span class="selector-pseudo">:4f</span><span class="selector-pseudo">:b4</span><span class="selector-pseudo">:4a</span><span class="selector-pseudo">:a9.</span></span><br><span class="line"><span class="selector-tag">Are</span> <span class="selector-tag">you</span> <span class="selector-tag">sure</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">continue</span> <span class="selector-tag">connecting</span> (yes/no)? <span class="selector-tag">yes</span></span><br></pre></td></tr></table></figure>
<p>若此时出现错误：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ssh: connect <span class="keyword">to</span> host 127.0.0.1<span class="built_in"> port </span>22:<span class="built_in"> Connection </span>refused</span><br><span class="line">lost connection</span><br></pre></td></tr></table></figure>
<p>则说明<code>ssh</code>服务没有打开，需要开启<code>ssh</code>服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启ssh服务</span></span><br><span class="line">sudo<span class="built_in"> service </span>sshd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动ssh服务</span></span><br><span class="line">sudo systemctl <span class="builtin-name">enable</span> sshd.service</span><br></pre></td></tr></table></figure>
<p>除此之外，要让局域网内的用户能够访问<code>git</code>服务器，需要关闭防火墙：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">stop</span> <span class="selector-tag">firewalld</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">disable</span> <span class="selector-tag">firewalld</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure>
<h3 id="安装gitolite"><a href="#安装gitolite" class="headerlink" title="安装gitolite"></a>安装gitolite</h3><h4 id="进入git用户并创建bin目录"><a href="#进入git用户并创建bin目录" class="headerlink" title="进入git用户并创建bin目录"></a>进入git用户并创建bin目录</h4><p>安装<code>gitolite</code>的操作需要在<code>git</code>用户下进行，首先需要切换到<code>git</code>用户：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">su git</span></span><br></pre></td></tr></table></figure>
<p>输入密码后，需要切换到<code>git</code>用户的用户根目录下创建<code>bin</code>文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建bin文件夹是为了将gitolite安装到其中便于认知和管理</span></span><br><span class="line">mkdir bin</span><br></pre></td></tr></table></figure>
<h4 id="克隆gitolite并安装"><a href="#克隆gitolite并安装" class="headerlink" title="克隆gitolite并安装"></a>克隆gitolite并安装</h4><p>我们需要从<code>github</code>中克隆<code>gitolite</code>的官方仓库进行安装：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆gitolite仓库</span></span><br><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/sitaramc/gi</span>tolite</span><br><span class="line"></span><br><span class="line"><span class="comment">#将gitolite安装到bin目录下</span></span><br><span class="line">.<span class="regexp">/gitolite/i</span>nstall -to ~<span class="regexp">/bin/</span></span><br></pre></td></tr></table></figure>
<p>安装<code>gitolite</code>的时候，可能会出现错误：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Can</span><span class="symbol">'t</span> locate <span class="type">Data</span>/<span class="type">Dumper</span>.pm in <span class="meta">@INC</span></span><br></pre></td></tr></table></figure>
<p>这是由于没有安装相应的<code>perl</code>包所导致的，需要切换回非<code>git</code>用户进行安装，使用命令：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 使用CPAN安装<span class="keyword">perl</span>包</span><br><span class="line">sudo <span class="keyword">perl</span> -MCPAN -<span class="keyword">e</span> <span class="keyword">shell</span></span><br><span class="line"></span><br><span class="line">cpan[<span class="number">1</span>]&gt; install Dat<span class="variable">a:</span>:Dumper</span><br></pre></td></tr></table></figure>
<p>如果是首次使用<code>CPAN</code>会进行一定的配置，在询问是否自动配置处输入<code>yes</code>即可。</p>
<p>使用<code>CPAN</code>时可能出现错误：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Can</span><span class="symbol">'t</span> locate <span class="type">CPAN</span>.pm in <span class="meta">@INC</span></span><br></pre></td></tr></table></figure>
<p>这是由于没有安装<code>CPAN</code>出现的错误，使用命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> perl-CPAN</span><br></pre></td></tr></table></figure>
<p>安装完成后，应该会自动集成<code>Data::Dumper</code>包。</p>
<p>回到<code>git</code>用户，安装<code>gitolite</code>后，<code>bin</code>文件夹中会出现相应的文件，到此，<code>gitolite</code>就安装成功了。</p>
<h4 id="使用公钥初始化gitolite"><a href="#使用公钥初始化gitolite" class="headerlink" title="使用公钥初始化gitolite"></a>使用公钥初始化gitolite</h4><p>完成安装<code>gitolite</code>后，需要使用刚才上传的公钥将<code>gitolite</code>进行初始化，这个公钥的所有者将成为<code>gitolite</code>的第一个管理员, 在<code>git</code>用户根目录下，使用命令：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"># 使用yourname.pub对gitolite进行初始化</span><br><span class="line">./bin/gitolite setup -pk yourname.pub</span><br><span class="line"></span><br><span class="line">初始化空的 Git 版本库于 /home/git/repositories/gitolite-admin.git/</span><br><span class="line">初始化空的 Git 版本库于 /home/git/repositories/testing.git/</span><br><span class="line"><span class="symbol">WARNING: </span>/home/git/.ssh missing; creating a new one</span><br><span class="line"><span class="code">    (this is normal on a brand new install)</span></span><br><span class="line"><span class="symbol">WARNING: </span>/home/git/.ssh/authorized<span class="emphasis">_keys missing; creating a new one</span></span><br><span class="line"><span class="emphasis">    (this is normal on a brand new install)</span></span><br></pre></td></tr></table></figure>
<p>到此为止，<code>gitolite</code>的初始化已经完成。</p>
<h3 id="添加gitolite的用户和仓库"><a href="#添加gitolite的用户和仓库" class="headerlink" title="添加gitolite的用户和仓库"></a>添加gitolite的用户和仓库</h3><p>不要手动在<code>git</code>服务器中添加新用户或者新仓库。因为<code>gitolite</code>的用户，仓库和权限规则都是使用一个名为<code>gitolite-admin</code>的特殊仓库进行维护的，想要进行修改，就需要通过修改该仓库的文件并<code>push</code>到服务器当中。</p>
<p>要添加用户和仓库，首先需要退出<code>git</code>用户后，将<code>gitolite-admin</code>克隆到本地:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出git用户</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将gitolite-admin仓库克隆到本地</span></span><br><span class="line">git clone git@localhost:gitolite-admin</span><br></pre></td></tr></table></figure>
<p>进入<code>gtiolite</code>目录后，可以看到两个子目录<code>conf</code>和<code>keydir</code>，<code>conf/gitolite.conf</code>用于修改仓库，用户及其权限，<code>keydir</code>用于存放用户的公钥。</p>
<p>为了增加新用户<code>alice</code>，<code>bob</code>和<code>carol</code>， 首先需要获取他们的公钥（alice.pub，bob.pub和carol.pub），并添加到<code>keydir</code>文件夹当中。</p>
<p>为了增加新仓库<code>foo</code>，并赋予这些用户不同的权限，修改<code>conf/gitolite.conf</code>文件：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">repo foo</span><br><span class="line">    RW+         =   alice</span><br><span class="line">    RW          =   bob</span><br><span class="line">    R           =   carol</span><br></pre></td></tr></table></figure>
<p>进行修改之后，需要将改动上传到服务器使其生效：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> conf</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> keydir</span></span><br><span class="line">git commit -m <span class="string">"added foo, gave access to alice, bob, carol"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>当<code>git</code>的<code>push</code>操作成功后，<code>gitolite</code>将会把新用户添加到服务器的<code>~/.ssh/authorized_keys</code>文件中，然后会新建一个名为<code>foo</code>的空仓库。</p>
<h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p><code>gitolite</code>的权限管理非常强大，之前展示的只是最简单的权限管理，下面是更加深入一些的管理：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">repo foo</span><br><span class="line">    RW+                     =   alice</span><br><span class="line">    -   master              =   bob</span><br><span class="line">    -   refs/tags/v[<span class="number">0</span><span class="number">-9</span>]    =   bob</span><br><span class="line">    RW                      =   bob</span><br><span class="line">    RW  refs/tags/v[<span class="number">0</span><span class="number">-9</span>]    =   carol</span><br><span class="line">    R                       =   dave</span><br></pre></td></tr></table></figure>
<p>下面对上述规则进行阐述：</p>
<ul>
<li><p><code>alice</code>能够对仓库进行所有的操作。</p>
</li>
<li><p><code>bob</code>能够创建和推送任何名字不为<code>master</code>的分支，并能够添加任何不以<code>v+数字</code>开头的<code>tag</code>。</p>
</li>
<li><p><code>carol</code>能够添加任何以<code>v+数字</code>开头的<code>tag</code>。</p>
</li>
<li><p><code>dave</code>能够进行<code>clone</code>和<code>fetch</code>操作。</p>
</li>
</ul>
<p>更加详细的权限管理请看<a href="http://gitolite.com/gitolite/gitolite.html&quot;gitolite官方文档&quot;" target="_blank" rel="noopener">官方文档</a>。</p>
<h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><p><code>gitolite</code>允许创建用户组：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@staff</span>      =   alice bob carol</span><br><span class="line"><span class="variable">@interns</span>    =   ashok</span><br><span class="line"></span><br><span class="line">repo secret</span><br><span class="line">    RW      =   <span class="variable">@staff</span></span><br><span class="line"></span><br><span class="line">repo foss</span><br><span class="line">    RW+     =   <span class="variable">@staff</span></span><br><span class="line">    RW      =   <span class="variable">@interns</span></span><br></pre></td></tr></table></figure>
<p>用户组是可以堆叠的，下面的写法和上方的<code>@staff</code>是相同的：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@staff</span>      =   alice bob</span><br><span class="line"><span class="variable">@staff</span>      =   carol</span><br></pre></td></tr></table></figure>
<p>同样的，也可以将用户组添加到另一个用户组当中：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@all-devs</span>   =   <span class="variable">@staff</span> <span class="variable">@interns</span></span><br></pre></td></tr></table></figure>
<p>此外，<code>gitolite</code>有一个特殊的用户组，名为<code>@all</code>，他表示所有的用户。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS Yosemite 配置sublime text C语言开发环境</title>
    <url>/2015/05/04/2015-05-04-mac-sublime-c/</url>
    <content><![CDATA[<blockquote>
<p>“Sublime Text是一个轻便的文本编辑器”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="http://www.sublimetext.com/3" title="sublime text 3" target="_blank" rel="noopener">Sublime Text</a> 是一个代码编辑器，也是HTML和散文先进的文本编辑器。它是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的<a href="http://www.vim.org/download.php" title="Vim" target="_blank" rel="noopener">Vim</a>。<br><a href="http://www.sublimetext.com/3" title="sublime text 3" target="_blank" rel="noopener">Sublime Text</a>具有漂亮的用户界面和强大的功能，例如代码缩略图，代码段等。还可自定义键绑定，菜单和工具栏。它的主要功能包括：拼写检查，书签，Goto 功能，即时项目切换，多选择，多窗口等等。它是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。它还具有大量的可扩展插件，极大地丰富了这款编辑器的功能。</p>
<a id="more"></a>
<h3 id="安装配置sublime-text"><a href="#安装配置sublime-text" class="headerlink" title="安装配置sublime text"></a>安装配置sublime text</h3><h4 id="安装sublime-text-3"><a href="#安装sublime-text-3" class="headerlink" title="安装sublime text 3"></a>安装sublime text 3</h4><p>首先可以前往<a href="http://www.sublimetext.com/3" title="sublime text 3" target="_blank" rel="noopener">Sublime Text官方网站</a>下载对应平台的软件，安装完成后即可使用。但是为了更好地使用这一款强大的软件，我们可以安装一些插件。</p>
<p>这款软件是永久免费的，但是免费版会时不时的弹出购买提示，下面提供一个注册码，可以直接注册这个软件：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">—– BEGIN LICENSE —–</span><br><span class="line">Andrew Weber</span><br><span class="line">Single User License</span><br><span class="line">EA7E<span class="number">-855605</span></span><br><span class="line"><span class="number">813</span>A03DD <span class="number">5E4</span>AD9E6 <span class="number">6</span>C0EEB94 BC99798F</span><br><span class="line"><span class="number">942194</span>A6 <span class="number">02396E98</span> E62C9979 <span class="number">4</span>BB979FE</span><br><span class="line"><span class="number">91424</span>C9D A45400BF F6747D88 <span class="number">2</span>FB88078</span><br><span class="line"><span class="number">90</span>F5CC94 <span class="number">1</span>CDC92DC <span class="number">8457107</span>A F151657B</span><br><span class="line"><span class="number">1</span>D22E383 A997F016 <span class="number">42397640</span> <span class="number">33</span>F41CFC</span><br><span class="line">E1D0AE85 A0BBD039 <span class="number">0E9</span>C8D55 E1B89D5D</span><br><span class="line"><span class="number">5</span>CDB7036 E56DE1C0 EFCC0840 <span class="number">650</span>CD3A6</span><br><span class="line">B98FC99C <span class="number">8</span>FAC73EE D2B95564 DF450523</span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure>
<h4 id="安装sublime-text-3-插件"><a href="#安装sublime-text-3-插件" class="headerlink" title="安装sublime text 3 插件"></a>安装sublime text 3 插件</h4><p><em>Package Control组件：</em></p>
<ul>
<li><p>按control+`(键盘上1左边的按钮)调出console控制台</p>
</li>
<li><p>粘贴以下代码到底部命令行并回车：</p>
</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import urllib.request,<span class="built_in">os</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="built_in">open</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.join(ipp, pf), <span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure>
<ul>
<li><p>重启Sublime Text 3</p>
</li>
<li><p>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功</p>
</li>
</ul>
<p>下面是sublime text 2 的安装命令：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import urllib2,<span class="built_in">os</span>; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); <span class="built_in">os</span>.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); <span class="built_in">open</span>( <span class="built_in">os</span>.<span class="built_in">path</span>.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).<span class="built_in">read</span>()); <span class="built_in">print</span>( <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用Package Control安装插件的方法：</p>
</blockquote>
<ul>
<li><p>按下Ctrl+Shift+P调出命令面板</p>
</li>
<li><p>输入pcic 调出 Install Package 选项并回车，然后在列表中选中要安装的插件</p>
</li>
</ul>
<p><em>较为常用的一些插件</em></p>
<ol>
<li><p><code>ConvertToUTF8</code>　　支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件</p>
</li>
<li><p><code>Bracket Highlighter</code>　　用于匹配括号，引号和html标签。对于很长的代码很有用。安装好之后，不需要设置插件会自动生效</p>
</li>
<li><p><code>DocBlockr</code>　　DocBlockr可以自动生成PHPDoc风格的注释。它支持的语言有Javascript, PHP, ActionScript, CoffeeScript, Java, Objective C, C, C++</p>
</li>
<li><p><code>Emmet(Zen Coding)</code>　　快速生成HTML代码段的插件，强大到无与伦比，不知道的请自行google</p>
</li>
<li><p><code>SideBar Enhancements</code>　　这个插件改进了侧边栏，增加了许多功能</p>
</li>
<li><p><code>SideBar Folders</code>　　增加了侧边栏对于文件夹的支持</p>
</li>
<li><p><code>SublimeCodeIntel</code>    提供了代码提示和自动补全功能</p>
</li>
</ol>
<p>sublime text 还具有很多插件，读者可以根据自己所使用的语言和需要进行相应的安装</p>
<p><em>配置sublime text主题</em></p>
<p>Sublime Text本身对于主题的扩展也是十分的强大，一些推荐的主题可以前往<a href="http://designbeep.com/2014/06/10/35-cool-sublime-text-themes/" target="_blank" rel="noopener">design beep网站</a>进行选择和安装</p>
<p>下面介绍一下我安装的主题和相应的配置文件：</p>
<p>在package control中分别输入<code>numix</code>和<code>itg.flat</code>进行主题的安装，然后安装插件<code>markdown extend</code>增加对markdown语法的支持，然后编辑<code>Settings-User</code>，加入以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"color_scheme"</span>: <span class="string">"Packages/Theme - itg.flat/itg.dark.tmTheme"</span>,</span><br><span class="line">	<span class="attr">"numix_sidebar_tree_medium"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">"numix_small_tabs"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">"theme"</span>: <span class="string">"Numix.sublime-theme"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="/uploads/in-post/sublime_theme.png" alt="numix主题"></p>
<h3 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h3><p>安装完sublime text后，编辑C语言的文本编辑器就已经配置好了，但是想要编译C文件，则需要安装<a href="http://gcc.gnu.org/" title="gcc官方网站" target="_blank" rel="noopener">gcc</a>，在Mac OS中，直接使用<code>brew</code>命令进行安装即可，安装命令如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>gcc</span><br></pre></td></tr></table></figure>
<p>等待安装完成</p>
<p>输入命令<code>gcc -v</code>验证是否安装成功，如果安装成功，应该有以下提示：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Configured <span class="string">with:</span> --prefix=<span class="regexp">/Library/</span>Developer<span class="regexp">/CommandLineTools/</span>usr --with-gxx-include-dir=<span class="regexp">/usr/</span>include<span class="regexp">/c++/</span><span class="number">4.2</span><span class="number">.1</span></span><br><span class="line">Apple LLVM version <span class="number">6.1</span><span class="number">.0</span> (clang<span class="number">-602.0</span><span class="number">.49</span>) (based on LLVM <span class="number">3.6</span><span class="number">.0</span>svn)</span><br><span class="line"><span class="string">Target:</span> x86_64-apple-darwin14<span class="number">.3</span><span class="number">.0</span></span><br><span class="line">Thread <span class="string">model:</span> posix</span><br></pre></td></tr></table></figure>
<h3 id="配置sublime-text的C语言编译系统"><a href="#配置sublime-text的C语言编译系统" class="headerlink" title="配置sublime text的C语言编译系统"></a>配置sublime text的C语言编译系统</h3><p>经过前面的步骤，就可以分别进行C语言的编辑和编译，但是为了方便，只需要简单地配置就可以直接用sublime text进行编译了</p>
<p>打开Tools-&gt;Build System-&gt;New Build System，在新建的文件中输入以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"cmd"</span> : [<span class="string">"gcc -o $&#123;file_base_name&#125; $file_name"</span>],</span><br><span class="line">    <span class="attr">"shell"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"working_dir"</span> : <span class="string">"$file_path"</span>,</span><br><span class="line">    <span class="attr">"selector"</span>: <span class="string">"source.c"</span>,</span><br><span class="line">    <span class="attr">"encoding"</span>:<span class="string">"utf-8"</span>,</span><br><span class="line">    <span class="attr">"variants"</span> :</span><br><span class="line">    [&#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"Run"</span>,</span><br><span class="line">        <span class="attr">"cmd"</span> : <span class="string">"./$&#123;file_base_name&#125;"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用control+B进行编译文件，使用control+shift+B运行编译好的文件</p>
<p>以下是sublime text 2的内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"cmd"</span> : [<span class="string">"gcc"</span>,  <span class="string">"-o"</span>, <span class="string">"$file_base_name"</span>, <span class="string">"$file_name"</span>],</span><br><span class="line">    <span class="attr">"cmd"</span> : [<span class="string">"./$file_base_name"</span>],</span><br><span class="line">    <span class="attr">"selector"</span> : <span class="string">"source.c"</span>,</span><br><span class="line">    <span class="attr">"shell"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"working_dir"</span> : <span class="string">"$file_path"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>第一行相当于在shell中输入命令<code>gcc -o 文件名 文件名.c</code></p>
</li>
<li><p>第二行则是运行编译成功的文件</p>
</li>
<li><p>第三行的意思是对后缀为<code>.c</code>的文件进行选择</p>
</li>
</ul>
<p>编辑完成后，保存文件，命名为C.sublime-build，然后就可以在Build System中选中这个编译方式了</p>
<p>编辑文件hello.c:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用命令<code>command + B</code>编译并运行，效果如下:</p>
<p><img src="/uploads/in-post/hello_world_c.png" alt="hello world"></p>
<p>至此，就可以在你的Mac OS中使用sublime text进行C语言的开发了</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 简明语法</title>
    <url>/2014/10/14/2014-10-14-markdown-simple-syntax/</url>
    <content><![CDATA[<blockquote>
<p>“Markdown 语言是现在编写博客最为常用的语言。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Markdown 的目标是实现「易读易写」，成为一种适用于网络的「书写语言」。</p>
<p>一份使用 Markdown 格式撰写的文件可以直接以纯文本发布，它的最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>Markdown 的语法由一些符号所组成，其作用一目了然。比如：在文字两旁加上星号，看起来就像<strong>强调</strong>。</p>
<p>Markdown 兼容 HTML 语法并且会将<code>&lt;</code>和<code>&amp;</code>等符号进行自动转换，这项特性可以让我们很容易地用 Markdown 写 HTML code。</p>
<a id="more"></a>
<!-- more -->
<h3 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h3><h4 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h4><ul>
<li>空白行表示单一段落，相当于<code>&lt;p/&gt;</code>。</li>
<li>连续两个空格表示换行，相当于<code>&lt;br/&gt;</code>。</li>
<li>连续三个<code>*</code>或<code>+</code>或<code>-</code>,然后空白行，表示 hr 横线</li>
</ul>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>标题是在首行插入 1 到 6 个<code>#</code>,对应的是标题 1 至标题 6，例如：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure>
<p>同时，也可以选择性地「闭合」标题，在行尾加上<code>#</code>，这么做只是为了美观：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ###</span><br></pre></td></tr></table></figure>
<h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><p>Markdown 标记区块引用是使用类似 email 中用<code>&gt;</code>加<code>space</code>的引用方式:</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; This <span class="keyword">is</span> a blockquote <span class="keyword">with</span> two <span class="built_in">paragraphs</span>. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla <span class="keyword">in</span>, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line"><span class="built_in">id</span> sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<blockquote>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>区块引用可以嵌套，只要根据层次加上不同数量的<code>&gt;</code>：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">first</span> level <span class="keyword">of</span> quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This <span class="keyword">is</span> nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">first</span> level.</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<blockquote>
<ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return &quot;Hello world!&quot;;
</code></pre></blockquote>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用<code>*</code>、<code>+</code>或是<code>-</code>作为列表标记：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 三种符号效果相同</span></span><br><span class="line"><span class="bullet">*   </span>Red</span><br><span class="line"><span class="bullet">*   </span>Green</span><br><span class="line"><span class="bullet">*   </span>Blue</span><br><span class="line"><span class="bullet">+   </span>Red</span><br><span class="line"><span class="bullet">+   </span>Green</span><br><span class="line"><span class="bullet">+   </span>Blue</span><br><span class="line"><span class="bullet">-   </span>Red</span><br><span class="line"><span class="bullet">-   </span>Green</span><br><span class="line"><span class="bullet">-   </span>Blue</span><br></pre></td></tr></table></figure>
<p>效果均为：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>有序列表则使用数字接着一个英文句点<code>.</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.  </span>Bird</span><br><span class="line"><span class="bullet">2.  </span>McHale</span><br><span class="line"><span class="bullet">3.  </span>Parish</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个<code>space</code>或是 1 个<code>tab</code>就可以，例如，下面的输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p>这是一个普通段落：</p>
<pre><code>这是一个代码区块。
</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是<code>*</code>便只是<code>*</code>。</p>
<p>此外，还可以使用一对<br>‘ ``` ‘（连续三个数字键 1 左边的反引号）将段落包围起来使其成为代码区块。</p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>你可以在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。你也可以在<code>*</code>或是<code>-</code>中间插入<code>space</code>。下面每种写法都可以建立分隔线：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>可以使用以下的方式建立表格：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">h1|<span class="string">h2</span>|h3</span><br><span class="line">--|<span class="string">--</span>|<span class="string">--</span></span><br><span class="line"><span class="string">c1</span>|<span class="string">c2</span>|c3</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">|<span class="string">h1</span>|<span class="string">h2</span>|<span class="string">h3</span>|</span><br><span class="line">|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|</span><br><span class="line">|<span class="string">c1</span>|<span class="string">c2</span>|<span class="string">c3</span>|</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>h1</th>
<th>h2</th>
<th>h3</th>
</tr>
</thead>
<tbody>
<tr>
<td>c1</td>
<td>c2</td>
<td>c3</td>
</tr>
</tbody>
</table>
<p>或者</p>
<table>
<thead>
<tr>
<th>h1</th>
<th>h2</th>
<th>h3</th>
</tr>
</thead>
<tbody>
<tr>
<td>c1</td>
<td>c2</td>
<td>c3</td>
</tr>
</tbody>
</table>
<h3 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用<code>[]</code>来标记。</p>
<p><em>行内式链接</em></p>
<p>要建立一个行内式的链接，只要在<code>[]</code>后面紧接着<code>()</code>并插入网址链接即可，如果你还想要加上链接的<code>title</code>文字，只要在网址后面，用<code>&quot;&quot;</code>把<code>title</code>文字包起来即可，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是[<span class="string">百度</span>](<span class="link">http://www.baidu.com "百度首页"</span>)的行内式链接.</span><br><span class="line"></span><br><span class="line">这个[<span class="string">百度</span>](<span class="link">http://www.baidu.com</span>)不包含<span class="code">`title`</span>参数.</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p>这是<a href="http://www.baidu.com" title="百度首页" target="_blank" rel="noopener">百度</a>的行内式链接.</p>
<p>这个<a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a>不包含<code>title</code>参数.</p>
<p><em>参考式链接</em></p>
<p>参考式的链接是在链接文字的<code>[]</code>后面再接上另一个<code>[]</code>，而在第二个<code>[]</code>里面要填入用以辨识链接的标记，接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>
这是[百度][id]参考式链接.

[id]: http://www.baidu.com  "百度首页"
</code></pre>

<p>效果为：</p>
<p>这是<a href="http://www.baidu.com" title="百度首页" target="_blank" rel="noopener">百度</a>参考式链接.</p>
<p>链接内容定义的形式为：</p>
<ul>
<li><code>[]</code>（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>紧跟着一个<code>:</code></li>
<li>接着是一个以上的<code>space</code>或<code>tab</code></li>
<li>然后是链接的网址</li>
<li>最后可以选择性地输入<code>title</code>内容，可以用<code>&#39;&#39;</code>、<code>&quot;&quot;</code>或是<code>()</code>包着</li>
</ul>
<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>Markdown 使用星号<code>*</code>和下划线<code>_</code>作为标记强调字词的符号，被<code>*</code>或<code>_</code>包围的字词会被转成用<code>&lt;em&gt;</code>标签包围，用两个<code>*</code>或<code>_</code>包起来的话，则会被转成<code>&lt;strong&gt;</code>，例如：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">*单个星号*</span><br><span class="line"></span><br><span class="line"><span class="symbol">_</span>单个下划线<span class="symbol">_</span></span><br><span class="line"></span><br><span class="line">**双星号**</span><br><span class="line"></span><br><span class="line"><span class="symbol">__</span>双下划线<span class="symbol">__</span></span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p><em>单个星号</em></p>
<p><em>单个下划线</em></p>
<p><strong>双星号</strong></p>
<p><strong>双下划线</strong></p>
<p>强调样式的限制是，样式符号必须成对出现，如果你的<code>*</code>和<code>_</code>两边都有空白的话，它们就只会被当成普通的符号。</p>
<p>强调也可以直接插在文字中间：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">这是一个<span class="strong">*强调*</span>。</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p>这是一个<em>强调</em>。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果要标记一小段行内代码，你可以用<code>`</code>把它包起来，例如：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> the `printf()` <span class="function"><span class="keyword">function</span>.</span></span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p>Use the <code>printf()</code> function.</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>
<p><em>行内式图片</em></p>
<p>行内式的图片语法看起来像是：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">测试图片</span>](<span class="link">/uploads/home-bg-art.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">测试图片</span>](<span class="link">/uploads/home-bg-art.jpg "这是一个测试图片"</span>)</span><br></pre></td></tr></table></figure>
<p>详细叙述如下：</p>
<ul>
<li>一个<code>!</code></li>
<li>接着一个<code>[]</code>，里面放上图片的替代文字</li>
<li>接着一个<code>()</code>，里面放上图片的网址，最后还可以用<code>&quot;&quot;</code>包住,并加上选择性的<code>title</code>文字。</li>
</ul>
<p>效果为：</p>
<p><img src="/uploads/home-bg-art.jpg" alt="测试图片"></p>
<p><img src="/uploads/home-bg-art.jpg" alt="测试图片" title="这是一个测试图片"></p>
<p><em>参考式图片</em></p>
<p>参考式的图片语法则如下：</p>
<pre><code>
![Alt text][id]

[id]: /uploads/home-bg-art.jpg "这是一个测试图片"
</code></pre>

<p>效果为：</p>
<p><img src="/uploads/home-bg-art.jpg" alt="Alt text" title="这是一个测试图片"></p>
<p>到目前为止，Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的<code>&lt;img&gt;</code>标签。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用<code>&lt;&gt;</code>包起来，Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;http://www.baidu.com&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;baidu@163.com&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p>
<p><a href="mailto:baidu@163.com" target="_blank" rel="noopener">mailto:baidu@163.com</a></p>
<h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h4><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号:</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\\</span>   反斜线</span><br><span class="line"><span class="string">\`</span>   反引号</span><br><span class="line"><span class="string">\*</span>   星号</span><br><span class="line"><span class="string">\_</span>   底线</span><br><span class="line"><span class="string">\&#123;&#125;</span>  花括号</span><br><span class="line"><span class="string">\[]</span>  方括号</span><br><span class="line"><span class="string">\()</span>  括弧</span><br><span class="line"><span class="string">\#</span>   井字号</span><br><span class="line"><span class="string">\+</span>   加号</span><br><span class="line"><span class="string">\-</span>   减号</span><br><span class="line"><span class="string">\.</span>   英文句点</span><br><span class="line"><span class="string">\!</span>   惊叹号</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<p>\ 反斜线</p>
<p>` 反引号</p>
<p>* 星号</p>
<p>_ 底线</p>
<p>{} 花括号</p>
<p>[] 方括号</p>
<p>() 括弧</p>
<p># 井字号</p>
<p>+ 加号</p>
<p>- 减号</p>
<p>. 英文句点</p>
<p>! 惊叹号</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>简明语法</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora22 配置Nginx,Mysql,PHP</title>
    <url>/2014/12/09/2014-12-09-nginx-mysql-php-fedora/</url>
    <content><![CDATA[<blockquote>
<p>“LNMP开发环境是PHP语言开发网站的主流环境。”</p>
</blockquote>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>nginx在fedora当中是一个默认包，所以直接使用命令行进行安装即可：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> nginx -y</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后启动nginx服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>nginx start</span><br></pre></td></tr></table></figure>
<p>当然，也可以设置他为开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="builtin-name">enable</span> nginx.service</span><br></pre></td></tr></table></figure>
<p>然后在你的浏览器当中输入localhost，如果看到以下界面即为安装成功：</p>
<p><img src="/uploads/in-post/nginx_sccess.png" alt="nginx success" title="nginx success"></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>mysql在fedora当中叫做MariaDB，但是也可以用安装mysql的命令直接进行安装：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> mysql mysql-<span class="keyword">server</span> -y</span><br></pre></td></tr></table></figure>
<p>然后启动mysql服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>mariadb start</span><br></pre></td></tr></table></figure>
<p>当然，也可以设置他为开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="builtin-name">enable</span> mariadb.service</span><br></pre></td></tr></table></figure>
<p>然后输入命令：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">sudo netstat -tap <span class="string">| grep mysql</span></span><br></pre></td></tr></table></figure>
<p>如果出现以下代码，说明启动成功：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">tcp</span>        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:mysql</span>           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:*</span>               <span class="string">LISTEN</span></span><br><span class="line"> <span class="number">5464</span><span class="string">/mysqld</span></span><br></pre></td></tr></table></figure>
<p>启动成功后，我们需要给root用户设置一个密码，以防止任何人都可以访问我们的数据库：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysqladmin</span> -u root password <span class="string">"root"</span></span><br></pre></td></tr></table></figure>
<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><p>我们可以让PHP5在nginx中以FastCGI的模式工作。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> php lighttpd-fastcgi php-devel php-fpm php-mysql -y</span><br></pre></td></tr></table></figure>
<p>然后启动php-fpm服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>php-fpm start</span><br></pre></td></tr></table></figure>
<p>当然，也可以设置他为开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="builtin-name">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure>
<p>启动之后，还需要配置nginx使之支持php</p>
<h3 id="配置nginx支持php"><a href="#配置nginx支持php" class="headerlink" title="配置nginx支持php"></a>配置nginx支持php</h3><p>首先备份原先的conf文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf /</span>etc<span class="regexp">/nginx/</span>nginx.conf.bak</span><br></pre></td></tr></table></figure>
<p>然后复制一份配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf.default /</span>etc<span class="regexp">/nginx/</span>nginx.conf</span><br></pre></td></tr></table></figure>
<p>新建两个目录用于分别存放可用和生效的配置文件</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/nginx/sites-avaliable</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure>
<p>这两个目录是模仿Ubuntu的nginx目录进行创建的，其中sites-analiable文件夹用于存放所有可用的server配置，sites-enabled文件夹用于存放生效的server配置</p>
<p>修改nginx配置文件，添加fastcgi支持</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/nginx/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>将文件修改为以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log;</span><br><span class="line"><span class="comment">#error_log  /var/log/nginx/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  /var/log/nginx/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">pid</span>        /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件将从conf.d和sites-enabled文件夹中读取所有的server配置，首先需要在sites-avaliable文件夹中建立可用的server配置，然后软链接到sites-enabled文件夹中，这样就可以修改可用配置时，生效配置也会修改，但是删除生效配置时不会对可用配置造成影响：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-avaliable/</span><span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>将其修改为以下内容：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost; <span class="comment"># or other domain name you like.</span></span><br><span class="line">    <span class="comment">#include /data/www/.htaccess;</span></span><br><span class="line">    charset utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">	root /usr/share/nginx/html;//这里是web项目文件夹的根目录</span><br><span class="line"></span><br><span class="line">	include /etc/nginx/default.d/*.conf;//这个配置文件是安装php和php-fpm时自动生成的，是对nginx针对php的配置</span><br><span class="line"></span><br><span class="line">   <span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">        #try_files</span> $uri $uri/ /index.php?$args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">    <span class="keyword">location</span> <span class="title">= /404</span>.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">    <span class="keyword">location</span> <span class="title">= /50x</span>.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在sites-enabled文件夹中建立可用配置的软链接即可<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-avaliable<span class="built_in">/default </span>/etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></p>
<p>具体的其他nginx相关配置可以详见<a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">nginx官方网站</a></p>
<p>另外，如果php报与时区相关的错误，则需要修改/etc/php.ini文件，在其中<code>[Date]</code>标签下加入一行<code>date.timezone = &#39;Asia/Shanghai&#39;</code>即可</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>每次配置nginx文件后，都需要将其进行重启：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>nginx restart</span><br></pre></td></tr></table></figure>
<p>每次配置php.ini文件后，也需要将其进行重启：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>php-fpm restart</span><br></pre></td></tr></table></figure>
<p>然后建立index.php文件进行测试：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">vim <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/nginx/</span>html/info.php</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;?php</span></span><br><span class="line"><span class="params">   phpinfo();</span></span><br><span class="line"><span class="params">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在浏览器中输入servername进行测试：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">输入：localhost/<span class="meta">info</span>.php</span><br><span class="line">显示phpinfo界面说明解析成功</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Fedora</tag>
        <tag>PHP</tag>
        <tag>Nginx</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS上搭建Nginx,Mysql,PHP开发环境</title>
    <url>/2015/05/29/2015-05-29-install-nginx-php-mysql-mac/</url>
    <content><![CDATA[<blockquote>
<p>“LNMP开发环境是PHP语言开发网站的主流环境。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>LNMP代表的就是：Linux系统下Nginx+MySQL+PHP这种网站服务器架构。Linux是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo等。<a href="http://nginx.org/" target="_blank" rel="noopener">Nginx</a>是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。<a href="http://www.mysql.com/" target="_blank" rel="noopener">Mysql</a>是一个小型关系型数据库管理系统。<a href="http://php.net/" target="_blank" rel="noopener">PHP</a>是一种在服务器端执行的嵌入HTML文档的脚本语言。这四种软件均为免费开源软件，组合到一起，成为一个免费、高效、扩展性强的网站服务系统。</p>
<a id="more"></a>
<h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>使用Mac的程序员必不可少的一步便是安装Homebrew，他就像是centOS的<code>yum</code>命令和ubuntu的<code>apt-get</code>命令一样，通过<code>brew</code>命令，我们可以快速的安装一些软件包。<br>使用命令行安装Homebrew的命令如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure>
<p>使用<code>brew doctor</code>检查是否存在冲突，然后使用<code>brew update &amp;&amp; brew upgrade</code>对brew进行升级。</p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>nginx在Mac OS中可以直接使用brew命令进行安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>nginx</span><br></pre></td></tr></table></figure>
<p>如果需要使用80端口的话，需要将nginx加入root组当中：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -v <span class="regexp">/usr/</span>local<span class="regexp">/opt/</span>nginx<span class="regexp">/*.plist /</span>Library<span class="regexp">/LaunchDaemons/</span></span><br><span class="line">sudo chown root:wheel <span class="regexp">/Library/</span>LaunchDaemons<span class="regexp">/homebrew.mxcl.nginx.plist</span></span><br></pre></td></tr></table></figure>
<p>然后使用命令启动nginx服务：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx</span></span><br></pre></td></tr></table></figure>
<p>测试nginx是否安装成功，因为默认配置文件监听的是<code>8080</code>端口，所以先对<code>8080</code>端口发起请求：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">curl -IL <span class="string">http:</span><span class="comment">//127.0.0.1:8080</span></span><br></pre></td></tr></table></figure>
<p>结果应该类似于下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">Server:</span> <span class="string">nginx/1.9.1</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Fri,</span> <span class="number">29</span> <span class="string">May</span> <span class="number">2015</span> <span class="number">14</span><span class="string">:50:47</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/html</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">612</span></span><br><span class="line"><span class="attr">Last-Modified:</span> <span class="string">Fri,</span> <span class="number">29</span> <span class="string">May</span> <span class="number">2015</span> <span class="number">14</span><span class="string">:40:47</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">ETag:</span> <span class="string">"5444dea7-264"</span></span><br><span class="line"><span class="attr">Accept-Ranges:</span> <span class="string">bytes</span></span><br></pre></td></tr></table></figure>
<p>nginx的相关操作如下：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">sudo nginx //启动nginx</span><br><span class="line">sudo nginx -s reload|<span class="string">reopen</span>|<span class="string">quit //重新加载</span>|<span class="string">重启</span>|<span class="string">退出</span></span><br></pre></td></tr></table></figure>
<h3 id="安装php-fpm"><a href="#安装php-fpm" class="headerlink" title="安装php-fpm"></a>安装php-fpm</h3><p>因为brew并没有php-fpm的源，所以首先要添加源：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>tap homebrew/dupes</span><br><span class="line"><span class="keyword">brew </span>tap homebrew/php</span><br></pre></td></tr></table></figure>
<p>然后安装php-fpm，输入命令:</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">brew</span> <span class="comment">install</span> <span class="comment">php56</span> --<span class="comment">whitout</span><span class="literal">-</span><span class="comment">apache</span> --<span class="comment">with</span><span class="literal">-</span><span class="comment">imap</span> --<span class="comment">with</span><span class="literal">-</span><span class="comment">tidy</span> --<span class="comment">with</span><span class="literal">-</span><span class="comment">debug</span> --<span class="comment">with</span><span class="literal">-</span><span class="comment">pgsql</span> --<span class="comment">with</span><span class="literal">-</span><span class="comment">mysql</span> --<span class="comment">with</span><span class="literal">-</span><span class="comment">fpm</span></span><br></pre></td></tr></table></figure>
<p>程序会自动安装，等待几分钟后完成安装。</p>
<p>安装完成后，还需要将php加入<code>$PATH</code>当中：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果使用bash的话</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用ZSH的话</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>然后可以设置php-fpm的开机自启动：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p ~<span class="regexp">/Library/</span>LaunchAgents</span><br><span class="line">ln -sfv <span class="regexp">/usr/</span>local<span class="regexp">/opt/</span>php56<span class="regexp">/homebrew.mxcl.php56.plist ~/</span>Library<span class="regexp">/LaunchAgents/</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents<span class="regexp">/homebrew.mxcl.php56.plist</span></span><br></pre></td></tr></table></figure>
<p>使用以下命令监测php-fpm是否启动成功：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">lsof -Pni4 | <span class="type">grep</span> LISTEN | <span class="type">grep</span> php</span><br></pre></td></tr></table></figure>
<p>如果启动成功应当有以下类似输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">php-fpm</span>   <span class="number">27578</span> <span class="string">wenzhiquan</span>    <span class="string">9u</span>  <span class="string">IPv4</span> <span class="number">0xf29f8b26c08fc27</span>      <span class="string">0t0</span>  <span class="string">TCP</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9000</span> <span class="string">(LISTEN)</span></span><br><span class="line"><span class="string">php-fpm</span>   <span class="number">27628</span> <span class="string">wenzhiquan</span>    <span class="string">0u</span>  <span class="string">IPv4</span> <span class="number">0xf29f8b26c08fc27</span>      <span class="string">0t0</span>  <span class="string">TCP</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9000</span> <span class="string">(LISTEN)</span></span><br><span class="line"><span class="string">php-fpm</span>   <span class="number">27629</span> <span class="string">wenzhiquan</span>    <span class="string">0u</span>  <span class="string">IPv4</span> <span class="number">0xf29f8b26c08fc27</span>      <span class="string">0t0</span>  <span class="string">TCP</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9000</span> <span class="string">(LISTEN)</span></span><br><span class="line"><span class="string">php-fpm</span>   <span class="number">27630</span> <span class="string">wenzhiquan</span>    <span class="string">0u</span>  <span class="string">IPv4</span> <span class="number">0xf29f8b26c08fc27</span>      <span class="string">0t0</span>  <span class="string">TCP</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9000</span> <span class="string">(LISTEN)</span></span><br></pre></td></tr></table></figure>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>MySQL也可以使用brew命令直接进行安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</span><br></pre></td></tr></table></figure>
<p>同样，可以设置MySQL的开机自启动：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">ln -sfv <span class="string">/usr/local/opt/mysql/</span>*<span class="string">.plist</span> ~<span class="string">/Library/LaunchAgents</span></span><br><span class="line">launchctl load ~<span class="string">/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span></span><br></pre></td></tr></table></figure>
<p>然后进行MySQL的安全安装，使用以下命令，可以更改root密码、删除匿名用户、关闭远程连接等：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql_secure_installation</span></span><br></pre></td></tr></table></figure>
<p>然后会输出以下内容：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt; <span class="selector-tag">Enter</span> <span class="selector-tag">current</span> <span class="selector-tag">password</span> <span class="selector-tag">for</span> <span class="selector-tag">root</span> (enter for none):		<span class="comment">//默认没有密码，直接回车即可</span></span><br><span class="line">&gt; <span class="selector-tag">Change</span> <span class="selector-tag">the</span> <span class="selector-tag">root</span> <span class="selector-tag">password</span>? <span class="selector-attr">[Y/n]</span>						<span class="comment">//是否更改root密码，选择是，然后输入并确认密码</span></span><br><span class="line">&gt; <span class="selector-tag">Remove</span> <span class="selector-tag">anonymous</span> <span class="selector-tag">users</span>? <span class="selector-attr">[Y/n]</span>							<span class="comment">//是否删除匿名用户，选择是</span></span><br><span class="line">&gt; <span class="selector-tag">Disallow</span> <span class="selector-tag">root</span> <span class="selector-tag">login</span> <span class="selector-tag">remotely</span>? <span class="selector-attr">[Y/n]</span>					<span class="comment">//是否禁止远程登录，选择是</span></span><br><span class="line">&gt; <span class="selector-tag">Remove</span> <span class="selector-tag">test</span> <span class="selector-tag">database</span> <span class="selector-tag">and</span> <span class="selector-tag">access</span> <span class="selector-tag">to</span> <span class="selector-tag">it</span>? <span class="selector-attr">[Y/n]</span>			<span class="comment">//是否删除test数据库，选择是</span></span><br><span class="line">&gt; <span class="selector-tag">Reload</span> <span class="selector-tag">privilege</span> <span class="selector-tag">tables</span> <span class="selector-tag">now</span>? <span class="selector-attr">[Y/n]</span>					<span class="comment">//是否重载表格数据，选择是</span></span><br></pre></td></tr></table></figure>
<p>测试数据库是否安装成功：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -u root -p</span></span><br></pre></td></tr></table></figure>
<p>然后输入刚才设置的root密码，将会输出以下内容：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">exit</span>			<span class="regexp">//</span>输入<span class="keyword">exit</span>退出数据库</span><br></pre></td></tr></table></figure>
<h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>首先，为我们的配置文件创建一些文件夹，这些是仿照ubuntu的nginx结构进行建立的目录：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/logs</span><br><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/sites-available</span><br><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/sites-enabled</span><br><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span></span><br><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/ssl</span><br><span class="line"></span><br><span class="line">sudo <span class="keyword">mkdir</span> -p /<span class="keyword">var</span>/www</span><br><span class="line">sudo chown :staff /<span class="keyword">var</span>/www</span><br><span class="line">sudo chmod 775 /<span class="keyword">var</span>/www</span><br></pre></td></tr></table></figure>
<p>然后修改nginx配置文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf</span></span><br></pre></td></tr></table></figure>
<p>将内容替换为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /usr/local/etc/nginx/logs/error.log <span class="literal">debug</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>             mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /usr/local/etc/nginx/logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /usr/local/etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后创建php-fpm配置文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/ect/</span>nginx<span class="regexp">/conf.d/</span>php-fpm</span><br></pre></td></tr></table></figure>
<p>输入以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span>      <span class="variable">$uri</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">    <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后加入站点配置文件：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/ect/</span>nginx<span class="regexp">/sites-enabled/</span><span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>输入以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>       /var/www/;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /usr/local/etc/nginx/logs/default.access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">include</span>   /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /info &#123;</span><br><span class="line">        <span class="attribute">allow</span>   <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">deny</span>    all;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /.<span class="literal">info</span>.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">404</span>     /<span class="number">404</span>.html;</span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">403</span>     /<span class="number">403</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启nginx，至此，配置完成，在www下写一个测试文件，进行测试即可</p>
<p><strong>尽情的享受在Mac OS开发PHP的快感吧！</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Nginx</tag>
        <tag>Mysql</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS安装jekyll</title>
    <url>/2015/03/19/2015-03-19-mac-install-jekyll/</url>
    <content><![CDATA[<blockquote>
<p>“jekyll 是一款简单的博客系统，静态网站生成器。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>jekyll 是一款简单的博客系统，静态网站生成器。她有一个模版目录，存放整个静态网站的模版文件，可以通过<a href="https://github.com/shopify/liquid/wiki" title="Liquid" target="_blank" rel="noopener">Liquid</a>处理模版文件，把使用标记语言<a href="http://en.wikipedia.org/wiki/Textile" title="Textile" target="_blank" rel="noopener">Textile</a>或<a href="http://en.wikipedia.org/wiki/Markdown" title="Markdown" target="_blank" rel="noopener">Markdown</a>编写的内容文件，按照模版格式，转换成最终的静态网站页面。大名鼎鼎的GitHub Pages就是通过它实现的。搭建好我们的博客系统之后，我们还可以把它放到github的pages上进行展示。</p>
<a id="more"></a>
<h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>使用Mac的程序员必不可少的一步便是安装Homebrew，他就像是centOS的<code>yum</code>命令和ubuntu的<code>apt-get</code>命令一样，通过<code>brew</code>命令，我们可以快速的安装一些软件包。<br>使用命令行安装Homebrew的命令如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure>
<h3 id="安装最新版ruby"><a href="#安装最新版ruby" class="headerlink" title="安装最新版ruby"></a>安装最新版ruby</h3><p>Homebrew安装完成之后，使用它来安装最新版本的ruby，代码如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>ruby</span><br></pre></td></tr></table></figure>
<p>安装完成之后，会提示安装好的ruby目录为<code>/usr/local/Cellar/ruby/2.2.0</code>,我用的shell为zsh，所以想要最新安装的ruby生效，需要将<code>~/.zshrc</code>配置文件中的环境变量<code>PATH</code>中添加上新版本ruby的目录，在<code>PATH</code>后添加上ruby安装目录的<code>bin</code>文件夹，如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/Cellar/ruby/2.2.0/bin"</span></span><br></pre></td></tr></table></figure>
<p>然后输入命令<code>source ~/.zshrc</code>，再使用ruby就是最新版本了。</p>
<p>输入命令<code>ruby --version</code>查看ruby版本：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ruby <span class="number">2.2</span><span class="number">.0</span>p0 (<span class="number">2014</span><span class="number">-12</span><span class="number">-25</span> revision <span class="number">49005</span>) [x86_64-darwin14]</span><br></pre></td></tr></table></figure>
<p>如果，版本不对，就使用命令<code>echo $PATH</code>查看最新版本的ruby目录是否在环境变量<code>PATH</code>中，如果不对，就按照上述过程修改环境变量<code>PATH</code>。</p>
<h3 id="安装jkeyll"><a href="#安装jkeyll" class="headerlink" title="安装jkeyll"></a>安装jkeyll</h3><p>安装最新版本的jekyll，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> jekyll</span><br></pre></td></tr></table></figure>
<p>因为我们将会使用Markdown语言作为标记语言，所以还需要安装kramdown，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> kramdown</span><br></pre></td></tr></table></figure>
<p>至此，本机的jekyll运行环境就已经搭建好了</p>
<h3 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h3><p>安装好之后，就可以自己构建一个博客系统，或者也可以到<a href="http://jekyllthemes.org/" title="jekyll 模板网站" target="_blank" rel="noopener">jekyll模板网站</a> 下载自己喜欢的模板进行修改，然后运行并查看效果，要运行jekyll首先要进入博客的根目录，然后运行命令<code>jekyll server</code>，最后会显示启动信息：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Server</span> address: http:<span class="comment">//127.0.0.1:4000/</span></span><br><span class="line"><span class="built_in">Server</span> <span class="built_in">running</span>... <span class="built_in">press</span> ctrl-c to <span class="built_in">stop</span>.</span><br></pre></td></tr></table></figure>
<p>说明程序已经成功启动，在浏览器中输入localhost:4000，就可以查看自己的博客了。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora 22上安装jekyll</title>
    <url>/2015/09/18/2015-09-18-install-jekyll-fedora/</url>
    <content><![CDATA[<blockquote>
<p>“jekyll 是一款简单的博客系统，静态网站生成器。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>jekyll</code>是一个简单的免费的Blog生成工具，类似<code>WordPress</code>。但是和<code>WordPress</code>又有很大的不同，原因是<code>jekyll</code>只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如<code>Disqus</code>。最关键的是<code>jekyll</code>可以免费部署在<code>Github</code>上，而且可以绑定自己的域名。</p>
<a id="more"></a>
<h3 id="安装最新版ruby"><a href="#安装最新版ruby" class="headerlink" title="安装最新版ruby"></a>安装最新版ruby</h3><p>调用命令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> ruby</span><br></pre></td></tr></table></figure>
<p>安装完成后,输入命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ruby -v</span></span><br></pre></td></tr></table></figure>
<p>会有如下类似的显示:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ruby <span class="number">2.2</span><span class="number">.3</span>p173 (<span class="number">2015</span><span class="number">-08</span><span class="number">-18</span> revision <span class="number">51636</span>) [x86_64-linux]</span><br></pre></td></tr></table></figure>
<p>说明已经成功安装了2.2.3版本的ruby。</p>
<h3 id="安装jkeyll"><a href="#安装jkeyll" class="headerlink" title="安装jkeyll"></a>安装jkeyll</h3><p>安装最新版本的jekyll，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> jekyll</span><br></pre></td></tr></table></figure>
<p>安装过程中可能会报如下错误:</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">Fetching: ffi<span class="string">-1</span>.9.10.gem (100%)</span><br><span class="line">Building native extensions.  This could take a while...</span><br><span class="line"><span class="keyword">ERROR:  </span>Error installing jekyll:</span><br><span class="line">	ERROR: Failed to build gem native extension.</span><br><span class="line"></span><br><span class="line">    /usr/bin/ruby -r ./siteconf20150918<span class="string">-17908</span>-j7rbks.rb extconf.rb</span><br><span class="line">mkmf.rb can't find header files for ruby at /usr/share/include/ruby.h</span><br><span class="line"></span><br><span class="line">extconf failed, exit code 1</span><br><span class="line"></span><br><span class="line">Gem files will remain installed in /home/wenzhiquan/.gem/ruby/gems/ffi<span class="string">-1</span>.9.10 for inspection.</span><br><span class="line">Results logged to /home/wenzhiquan/.gem/ruby/extensions/x86_64-linux/ffi<span class="string">-1</span>.9.10/gem_make.out</span><br></pre></td></tr></table></figure>
<p>原因是没有安装gem本地扩展,输入命令<code>sudo dnf install ruby-devel</code>安装dev版本的ruby即可解决问题。如果是报gcc相关的错误,只需要<code>sudo dnf install gcc</code>进行安装即可。</p>
<p>因为我们将会使用Markdown语言作为标记语言，所以还需要安装kramdown，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> kramdown</span><br></pre></td></tr></table></figure>
<p>至此，本机的jekyll运行环境就已经搭建好了。</p>
<p>如果ruby下载过慢，可以修改gem的下载源：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">gem sources --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/  </span><br><span class="line">gem sources -<span class="keyword">a</span> http<span class="variable">s:</span>//<span class="keyword">ruby</span>.taobao.org/  </span><br><span class="line">gem sources -<span class="keyword">l</span>  </span><br><span class="line">*** CURRENT SOURCES ***  </span><br><span class="line">http<span class="variable">s:</span>//<span class="keyword">ruby</span>.taobao.org  </span><br><span class="line"># 请确保只有 <span class="keyword">ruby</span>.taobao.org  </span><br><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure>
<h3 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h3><p>安装好之后，就可以自己构建一个博客系统，或者也可以到<a href="http://jekyllthemes.org/" title="jekyll 模板网站" target="_blank" rel="noopener">jekyll模板网站</a> 下载自己喜欢的模板进行修改，然后运行并查看效果，要运行jekyll首先要进入博客的根目录，然后运行命令<code>jekyll server</code>，最后会显示启动信息：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Server</span> address: http:<span class="comment">//127.0.0.1:4000/</span></span><br><span class="line"><span class="built_in">Server</span> <span class="built_in">running</span>... <span class="built_in">press</span> ctrl-c to <span class="built_in">stop</span>.</span><br></pre></td></tr></table></figure>
<p>说明程序已经成功启动，在浏览器中输入<code>localhost:4000</code>，就可以查看自己的博客了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Fedora</tag>
        <tag>Jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>七种基本排序算法</title>
    <url>/2016/03/28/2016-03-28-seven-sort/</url>
    <content><![CDATA[<blockquote>
<p>“排序算法可以说是数据结构与算法当中最为基础的部分”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>排序算法可以说是数据结构与算法当中最为基础的部分，针对的是数组这一数据结构。将数组中的无序数据元素通过算法整理为有序的数据元素即为排序。</p>
<a id="more"></a>
<h3 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>简介：</p>
<p><code>冒泡排序</code>（Bubble Sort）是一种简单的排序算法。它重复地访问要排序的数列，将每次访问的最大值“浮”到数组尾部。</p>
<p>步骤如下：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个，直到把最大的元素放到数组尾部。</li>
<li>遍历长度减一，对剩下的元素从头重复以上的步骤。</li>
<li>直到没有任何一对数字需要比较时完成。</li>
</ol>
<!--break-->
<p>实现代码：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">def</span> <span class="selector-tag">bubbleSort</span>(arr):</span><br><span class="line">    <span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(len(arr))<span class="selector-attr">[::-1]</span>:</span><br><span class="line">        <span class="selector-tag">for</span> <span class="selector-tag">j</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(i):</span><br><span class="line">            <span class="selector-tag">if</span> <span class="selector-tag">arr</span><span class="selector-attr">[j]</span> &gt; <span class="selector-tag">arr</span><span class="selector-attr">[j + 1]</span>:</span><br><span class="line">                <span class="selector-tag">swap</span>(arr[j], arr[j + <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/uploads/in-post/bubbleSort.gif" alt="冒泡排序"></p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>简介：</p>
<p><code>选择排序</code>(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，重复上述过程，直到所有元素均排序完毕。</p>
<p>步骤如下：</p>
<ol>
<li>遍历数组，找到最小的元素，将其置于数组起始位置。</li>
<li>从上次最小元素存放的后一个元素开始遍历至数组尾，将最小的元素置于开始处。</li>
<li>重复上述过程，直到元素排序完毕。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">def selectSort(arr):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> in range(len(arr)):</span><br><span class="line">        <span class="built_in">min</span> = <span class="built_in">i</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> in range(<span class="built_in">i</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[<span class="built_in">j</span>] &lt; arr[<span class="built_in">min</span>]:</span><br><span class="line">                <span class="built_in">min</span> = <span class="built_in">j</span></span><br><span class="line">        swap(arr[<span class="built_in">i</span>], arr[<span class="built_in">min</span>])</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/uploads/in-post/selectSort.gif" alt="选择排序"></p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>简介：</p>
<p><code>插入排序</code>（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>步骤如下：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置中</li>
<li>重复步骤2</li>
</ol>
<p>实现代码：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def insertSort(arr):</span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        tmp = arr[i]</span><br><span class="line">        <span class="keyword">pre</span> = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">pre</span> &gt;= <span class="number">0</span> <span class="built_in">and</span> arr[<span class="keyword">pre</span>] &gt; tmp:</span><br><span class="line">            arr[<span class="keyword">pre</span> + <span class="number">1</span>] = arr[<span class="keyword">pre</span>]</span><br><span class="line">            <span class="keyword">pre</span> -= <span class="number">1</span></span><br><span class="line">        arr[<span class="keyword">pre</span> + <span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure>
<h3 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h3><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>简介：</p>
<p><code>希尔排序</code>(Shell Sort)是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>
<p>步骤如下：</p>
<ol>
<li>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；</li>
<li>随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def insertSort(arr):</span><br><span class="line">    <span class="keyword">k</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">k</span> &lt; <span class="built_in">len</span>(arr) / <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">k</span> = <span class="number">3</span> * h + <span class="number">1</span> //此处为Knuth算法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">k</span> &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">k</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            tmp = arr[i]</span><br><span class="line">            <span class="keyword">pre</span> = i - <span class="keyword">k</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">pre</span> &gt;= <span class="number">0</span> <span class="built_in">and</span> arr[<span class="keyword">pre</span>] &gt; tmp:</span><br><span class="line">                arr[<span class="keyword">pre</span> + <span class="keyword">k</span>] = arr[<span class="keyword">pre</span>]</span><br><span class="line">                <span class="keyword">pre</span> -= <span class="keyword">k</span></span><br><span class="line">            arr[<span class="keyword">pre</span> + <span class="keyword">k</span>] = tmp</span><br><span class="line">        <span class="keyword">k</span> = (<span class="keyword">k</span> - <span class="number">1</span>) / <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/uploads/in-post/shellSort.gif" alt="希尔排序"></p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>简介：</p>
<p><code>快速排序</code>（Quicksort）是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<p>步骤如下：</p>
<p>步骤：</p>
<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(arr, low, high)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; <span class="symbol">high:</span></span><br><span class="line">        pivot = partition(arr, low, high)</span><br><span class="line">        quickSort(arr, low, pivot - <span class="number">1</span>)</span><br><span class="line">        quickSort(arr, pivot + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(arr, low, high)</span></span><span class="symbol">:</span></span><br><span class="line">    pivot = arr[low]</span><br><span class="line">    <span class="keyword">while</span> low &lt; <span class="symbol">high:</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> arr[high] &gt;= <span class="symbol">pivot:</span></span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        arr[low] = arr[high]</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> arr[low] &lt;= <span class="symbol">pivot:</span></span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        arr[high] = arr[low]</span><br><span class="line">    arr[low] = pivot</span><br><span class="line">    <span class="keyword">return</span> low</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/uploads/in-post/quickSort.gif" alt="快速排序"></p>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>简介：</p>
<p><code>归并排序</code>(Merge Sort)是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>
<p>步骤如下：</p>
<ol>
<li>申请空间，创建两个数组，长度分别为两个有序数组的长度</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<p>实现代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">def mergeSort(arr, low, high):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span></span><br><span class="line">        mergeSort(arr, low, mid)</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, high)</span><br><span class="line">        <span class="keyword">return</span> merge(arr, low, mid, high)</span><br><span class="line"></span><br><span class="line">def merge(arr, low, mid, high):</span><br><span class="line">    leftArr = arr[low : mid + <span class="number">1</span>]</span><br><span class="line">    rightArr = arr[mid + <span class="number">1</span> : high + <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">i</span>, <span class="built_in">j</span>, m = <span class="number">0</span>, <span class="number">0</span>, low</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">i</span> &lt; len(leftArr) and <span class="built_in">j</span> &lt; len(rightArr)：</span><br><span class="line">        <span class="keyword">if</span> leftArr[<span class="built_in">i</span>] &lt; rightArr[<span class="built_in">j</span>]:</span><br><span class="line">            arr[m] = leftArr[<span class="built_in">i</span>]</span><br><span class="line">            <span class="built_in">i</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            arr[m] = rightArr[<span class="built_in">j</span>]</span><br><span class="line">            <span class="built_in">j</span> += <span class="number">1</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">i</span> &lt; len(leftArr):</span><br><span class="line">        arr[m] = leftArr[<span class="built_in">i</span>]</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">j</span> &lt; len(rightArr):</span><br><span class="line">        arr[m] = rightArr[<span class="built_in">j</span>]</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">        <span class="built_in">j</span> += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>实现效果：</p>
<p><img src="/uploads/in-post/mergeSort.gif" alt="归并排序"></p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>简介：</p>
<p>堆积排序（Heap Sort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>步骤如下：</p>
<ol>
<li>按堆的定义将数组R[0..n]调整为堆（这个过程称为创建初始堆），交换R[0]和R[n]；</li>
<li>将R[0..n-1]调整为堆，交换R[0]和R[n-1]；</li>
<li>重复上述过程，直到交换了R[0]和R[1]为止。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">def heapSort(arr):</span><br><span class="line">    for i in range(len(arr) / <span class="number">2</span>)[::-<span class="number">1</span>]:</span><br><span class="line">        heapAdjust(arr, i, len(arr))</span><br><span class="line"></span><br><span class="line">    for i in range(len(arr) - <span class="number">1</span>)[::-<span class="number">1</span>]:</span><br><span class="line">        swap(arr[i], arr[<span class="number">0</span>])</span><br><span class="line">        heapAdjust(arr, <span class="number">0</span>, i)</span><br><span class="line"></span><br><span class="line">def heapAdjust(arr, parent, length)：</span><br><span class="line">    tmp = arr[parent]</span><br><span class="line">    child = <span class="number">2</span> * parent + <span class="number">1</span></span><br><span class="line">    while child &lt; length:</span><br><span class="line">        if child + <span class="number">1</span> &lt; length and arr[child + <span class="number">1</span>] &gt; arr[child]:</span><br><span class="line">            child += <span class="number">1</span></span><br><span class="line">        if arr[child] &lt;= tmp:</span><br><span class="line">            break</span><br><span class="line">        arr[parent] = arr[child]</span><br><span class="line">        parent = child</span><br><span class="line">        child = <span class="number">2</span> * parent + <span class="number">1</span></span><br><span class="line">        arr[parent] = tmp</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/uploads/in-post/heapSort.gif" alt="堆排序"></p>
<h3 id="各排序算法时间空间复杂度"><a href="#各排序算法时间空间复杂度" class="headerlink" title="各排序算法时间空间复杂度"></a>各排序算法时间空间复杂度</h3><p><img src="/uploads/in-post/sortTimeComplexity.png" alt></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（1）—— String</title>
    <url>/2016/05/31/2016-05-31-interview-algorithm-string/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–String相关”</p>
</blockquote>
<a id="more"></a>
<h3 id="Two-Strings-Are-Anagrams-easy"><a href="#Two-Strings-Are-Anagrams-easy" class="headerlink" title="Two Strings Are Anagrams - easy"></a>Two Strings Are Anagrams - easy</h3><p>题目</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Write a method anagram(s,t) to decide <span class="keyword">if</span> two strings are anagrams or not.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given s = <span class="string">"abcd"</span>, t = <span class="string">"dcab"</span>, <span class="keyword">return</span> <span class="literal">true</span>.</span><br><span class="line">Given s = <span class="string">"ab"</span>, t = <span class="string">"ab"</span>, <span class="keyword">return</span> <span class="literal">true</span>.</span><br><span class="line">Given s = <span class="string">"ab"</span>, t = <span class="string">"ac"</span>, <span class="keyword">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">anagram</span><span class="params">(<span class="keyword">String</span> s, <span class="keyword">String</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HashMap&lt;Character, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 将第一个字符串的每个字母存入哈希表中，也可以用数组进行处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (hashMap.containsKey(tmp)) &#123;</span><br><span class="line">            hashMap.<span class="built_in">put</span>(tmp, hashMap.<span class="built_in">get</span>(tmp) <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap.<span class="built_in">put</span>(tmp, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询第二个字符串中的每个字母是否在哈希表中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (!hashMap.containsKey(tmp)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap.<span class="built_in">put</span>(tmp, hashMap.<span class="built_in">get</span>(tmp) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (hashMap.<span class="built_in">get</span>(tmp) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/two-strings-are-anagrams/" target="_blank" rel="noopener">Two Strings Are Anagrams</a></p>
<h3 id="Compare-Strings-easy"><a href="#Compare-Strings-easy" class="headerlink" title="Compare Strings - easy"></a>Compare Strings - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Compare <span class="literal">two</span> strings A <span class="keyword">and</span> B, determine whether A <span class="keyword">contains</span> all <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">characters</span></span><br><span class="line"><span class="keyword">in</span> B.The <span class="keyword">characters</span> <span class="keyword">in</span> <span class="keyword">string</span> A <span class="keyword">and</span> B are all Upper Case letters.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For A = <span class="string">"ABCD"</span>, B = <span class="string">"ACD"</span>, <span class="literal">return</span> <span class="literal">true</span>.</span><br><span class="line">For A = <span class="string">"ABCD"</span>, B = <span class="string">"AABC"</span>, <span class="literal">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareStrings</span><span class="params">(<span class="keyword">String</span> s, <span class="keyword">String</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = s.charAt(i);</span><br><span class="line">        arr[tmp - <span class="string">'A'</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = t.charAt(i);</span><br><span class="line">        arr[tmp - <span class="string">'A'</span>] -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[tmp - <span class="string">'A'</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/zh-cn/problem/compare-strings/" target="_blank" rel="noopener">Compare Strings</a></p>
<h3 id="strStr-easy"><a href="#strStr-easy" class="headerlink" title="strStr - easy"></a>strStr - easy</h3><p>题目</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">For <span class="keyword">a</span> given <span class="keyword">source</span> <span class="built_in">string</span> <span class="built_in">and</span> <span class="keyword">a</span> target <span class="built_in">string</span>, you should output the <span class="keyword">first</span></span><br><span class="line"><span class="built_in">index</span>(from <span class="number">0</span>) of target <span class="built_in">string</span> in <span class="keyword">source</span> <span class="built_in">string</span>.</span><br><span class="line"></span><br><span class="line">If target does not exist in <span class="keyword">source</span>, just <span class="keyword">return</span> -<span class="number">1</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">If <span class="keyword">source</span> = <span class="string">"source"</span> <span class="built_in">and</span> target = <span class="string">"target"</span>, <span class="keyword">return</span> -<span class="number">1</span>.</span><br><span class="line"></span><br><span class="line">If <span class="keyword">source</span> = <span class="string">"abcdabcdefg"</span> <span class="built_in">and</span> target = <span class="string">"bcd"</span>, <span class="keyword">return</span> <span class="number">1</span>.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> strStr(<span class="keyword">String</span> <span class="built_in">text</span>, <span class="keyword">String</span> pattern) &#123;</span><br><span class="line">    <span class="comment">//write your code here</span></span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="keyword">null</span> || <span class="built_in">text</span> == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> tlen = <span class="built_in">text</span>.length(), plen = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k;</span><br><span class="line">    <span class="built_in">int</span> index;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; tlen &amp;&amp; j &lt; plen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">text</span>.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index = result plen;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = plen - <span class="number">1</span>; k &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">text</span>.charAt(index) != pattern.charAt(k); k--);</span><br><span class="line">        i = result;</span><br><span class="line">        i += plen - k;</span><br><span class="line">        result = i;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (result plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &lt;= tlen? result: <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/strstr/" target="_blank" rel="noopener">strStr</a></p>
<h3 id="Anagrams-medium"><a href="#Anagrams-medium" class="headerlink" title="Anagrams - medium"></a>Anagrams - medium</h3><p>题目</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Given</span> an array of strings, return all groups of strings that are anagrams.</span><br><span class="line"></span><br><span class="line"><span class="symbol">Example</span></span><br><span class="line"><span class="symbol">Given</span> [<span class="string">"lint"</span>, <span class="string">"intl"</span>, <span class="string">"inlt"</span>, <span class="string">"code"</span>], return [<span class="string">"lint"</span>, <span class="string">"inlt"</span>, <span class="string">"intl"</span>].</span><br><span class="line"></span><br><span class="line"><span class="symbol">Given</span> [<span class="string">"ab"</span>, <span class="string">"ba"</span>, <span class="string">"cd"</span>, <span class="string">"dc"</span>, <span class="string">"e"</span>], return [<span class="string">"ab"</span>, <span class="string">"ba"</span>, <span class="string">"cd"</span>, <span class="string">"dc"</span>].</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; anagrams(<span class="keyword">String</span>[] strs) &#123;</span><br><span class="line">    <span class="built_in">int</span> length = strs.length;</span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span> || strs == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, ArrayList&lt;<span class="keyword">String</span>&gt;&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">str</span>: strs) &#123;</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = getKey(<span class="built_in">str</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">map</span>.containsKey(<span class="built_in">key</span>)) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="built_in">key</span>, <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>).<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ArrayList&lt;<span class="keyword">String</span>&gt; tmp: <span class="built_in">map</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            result.addAll(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> getKey(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">char</span>[] array = <span class="built_in">str</span>.toCharArray();</span><br><span class="line">    Arrays.<span class="built_in">sort</span>(array);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">String</span>.valueOf(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/zh-cn/problem/anagrams/" target="_blank" rel="noopener">Anagrams</a></p>
<h3 id="Longest-Common-Substring-medium"><a href="#Longest-Common-Substring-medium" class="headerlink" title="Longest Common Substring - medium"></a>Longest Common Substring - medium</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="literal">two</span> strings, find <span class="keyword">the</span> longest common substring.Return <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> <span class="keyword">it</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given A = <span class="string">"ABCD"</span>, B = <span class="string">"CBCE"</span>, <span class="literal">return</span> <span class="number">2.</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="keyword">String</span> A, <span class="keyword">String</span> B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lengthA = A.length();</span><br><span class="line">    <span class="keyword">int</span> lengthB = B.length();</span><br><span class="line">    <span class="keyword">if</span> (lengthA &lt; <span class="number">0</span> || lengthB &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[lengthA][lengthB];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A.charAt(i) == B.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> arr[i][j] = arr[i <span class="number">-1</span>][j - <span class="number">1</span>] <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">max</span> &lt; arr[i][j])</span><br><span class="line">                    <span class="built_in">max</span> = arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/longest-common-substring/" target="_blank" rel="noopener">Longest Common Substring </a></p>
<h3 id="Longest-Common-Prefix-medium"><a href="#Longest-Common-Prefix-medium" class="headerlink" title="Longest Common Prefix - medium"></a>Longest Common Prefix - medium</h3><p>题目</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Given k strings, <span class="builtin-name">find</span> the longest common<span class="built_in"> prefix </span>(LCP).</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="keyword">For</span> strings <span class="string">"ABCD"</span>, <span class="string">"ABEF"</span> <span class="keyword">and</span> <span class="string">"ACEF"</span>, the LCP is <span class="string">"A"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> strings <span class="string">"ABCDEFG"</span>, <span class="string">"ABCEFG"</span> <span class="keyword">and</span> <span class="string">"ABCEFA"</span>, the LCP is <span class="string">"ABC"</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">    // write your code here</span><br><span class="line">    <span class="keyword">if</span> (strs.<span class="built_in">length</span> &lt; <span class="number">1</span>) <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">    String <span class="built_in">prefix</span> = strs[<span class="number">0</span>];</span><br><span class="line">    int <span class="built_in">length</span> = <span class="built_in">prefix</span>.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (String str: strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.equals(<span class="string">""</span>)) <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (str.<span class="built_in">length</span>() &lt; <span class="built_in">length</span>) &#123;</span><br><span class="line">            <span class="built_in">length</span> = str.<span class="built_in">length</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!str.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="built_in">length</span>).equals(<span class="built_in">prefix</span>)) &#123;</span><br><span class="line">            <span class="built_in">length</span> -= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">prefix</span> = <span class="built_in">prefix</span>.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="built_in">length</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">prefix</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/longest-common-prefix/" target="_blank" rel="noopener">Longest Common Prefix</a></p>
<h3 id="String-to-Integer-II-hard"><a href="#String-to-Integer-II-hard" class="headerlink" title="String to Integer II - hard"></a>String to Integer II - hard</h3><p>题目</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Implement <span class="keyword">function</span> atoi <span class="keyword">to</span> convert a string <span class="keyword">to</span> an integer.</span><br><span class="line"></span><br><span class="line">If <span class="literal">no</span> valid conversion could be performed, a zero value <span class="keyword">is</span> returned.</span><br><span class="line"></span><br><span class="line">If the correct value <span class="keyword">is</span> out <span class="keyword">of</span> the range <span class="keyword">of</span> representable values, INT_MAX (<span class="number">2147483647</span>) <span class="keyword">or</span> INT_MIN (-<span class="number">2147483648</span>) <span class="keyword">is</span> returned.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="string">"10"</span> =&gt; <span class="number">10</span></span><br><span class="line"><span class="string">"-1"</span> =&gt; -<span class="number">1</span></span><br><span class="line"><span class="string">"123123123123123"</span> =&gt; <span class="number">2147483647</span></span><br><span class="line"><span class="string">"1.0"</span> =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> atoi(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">str</span>.<span class="built_in">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span>.length() &gt; <span class="number">12</span>) <span class="built_in">str</span> = <span class="built_in">str</span>.substring(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span> == <span class="keyword">null</span> || <span class="built_in">str</span>.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">char</span> [] arr = <span class="built_in">str</span>.toCharArray();</span><br><span class="line">    <span class="built_in">int</span> symbol = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="string">'+'</span>) symbol = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="string">'-'</span>) symbol = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] &lt;= <span class="string">'9'</span> &amp;&amp; arr[<span class="number">0</span>] &gt;= <span class="string">'0'</span>) result += (arr[<span class="number">0</span>] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">str</span>.length(); i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (arr[i] &lt;= <span class="string">'9'</span> &amp;&amp; arr[i] &gt;= <span class="string">'0'</span>) &#123;</span><br><span class="line">             result *= <span class="number">10</span>;</span><br><span class="line">             result += (arr[i] - <span class="string">'0'</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (symbol != <span class="number">0</span>) result *= symbol;</span><br><span class="line">    <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; Integer.MIN_VALUE) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (<span class="built_in">int</span>)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/string-to-integer-ii/" target="_blank" rel="noopener">String to Integer II</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式的八种写法</title>
    <url>/2016/03/28/2016-03-28-singleton-eight-type/</url>
    <content><![CDATA[<blockquote>
<p>“单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>单例模式</code>（singleton）是一种常用的设计模式，其定义是单例对象的类只能允许创建一个实例，而可以被多次调用。</p>
<p>单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。使用工厂方法来限制实例化过程。这个方法应该是静态方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。</p>
<a id="more"></a>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>显然单例模式的要点有三个：</p>
<p>一是某个类只能有一个实例；</p>
<p>二是它必须自行创建这个实例；</p>
<p>三是它必须自行向整个系统提供这个实例。</p>
<p>单例的实现主要是通过以下两个步骤：</p>
<p>1). 将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</p>
<p>2). 在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，没有对创建实例的方法进行线程保护，会出现两个线程同时调用创建方法的情况，由于它们没有检测到实例的存在，从而同时各自创建了一个实例，这样就会构造出两个不同的实例，从而违反了单例模式中实例唯一的原则。所以需要对多线程状态下的单例模式进行线程保护。</p>
<h3 id="八种写法"><a href="#八种写法" class="headerlink" title="八种写法"></a>八种写法</h3><h4 id="懒汉式（线程不安全）-不可用"><a href="#懒汉式（线程不安全）-不可用" class="headerlink" title="懒汉式（线程不安全）[不可用]"></a>懒汉式（线程不安全）[不可用]</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法起到了<code>Lazy Loading</code>的效果，即只有在需要调用类时才生成相应的实例。</p>
<p>这种写法只能在单线程下使用。如果在多线程下，一个线程进入了<code>if(singleton == null)</code>判断语句块，还未往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p>
<h4 id="懒汉式（线程安全，同步方法）-不推荐用"><a href="#懒汉式（线程安全，同步方法）-不推荐用" class="headerlink" title="懒汉式（线程安全，同步方法）[不推荐用]"></a>懒汉式（线程安全，同步方法）[不推荐用]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决了4.1的线程不安全问题，保证了同时只能有一个对<code>getInstance()</code>方法的调用。</p>
<p>缺点：效率低下，每个线程在执行<code>getInstance()</code>方法时都要进行同步。而事实上只要保证第一次建立实例时同步即可。</p>
<h4 id="懒汉式-线程安全，同步代码块-不可用"><a href="#懒汉式-线程安全，同步代码块-不可用" class="headerlink" title="懒汉式(线程安全，同步代码块)[不可用]"></a>懒汉式(线程安全，同步代码块)[不可用]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于4.2实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。</p>
<p>但是这种同步并不能起到线程同步的作用。会遇到与4.1中的实现方式相同的问题，假如一个线程进入了<code>if (singleton == null)</code>判断语句块，还未往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>
<h4 id="双重校验锁-可用"><a href="#双重校验锁-可用" class="headerlink" title="双重校验锁[可用]"></a>双重校验锁[可用]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法是针对4.2实现方式进行的改进，同时又避免了4.3中不能起到线程同步作用的问题。因为在同步代码块中再次进行了<code>if (singleton == null)</code>判断，保证了只会新建一个实例。</p>
<p>注意：因为使用了<code>volatile</code>关键字，所以在JDK1.5之后，双重检查锁定才能够正常达到单例效果。</p>
<h4 id="饿汉式（静态常量）-可用"><a href="#饿汉式（静态常量）-可用" class="headerlink" title="饿汉式（静态常量）[可用]"></a>饿汉式（静态常量）[可用]</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private final static Singleton<span class="built_in"> INSTANCE </span>= new Singleton();</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点：写法简单，在类装载时完成实例化。避免了线程同步问题。</p>
<p>缺点：一定会实例化类，没有达到<code>Lazy Loading</code>的效果。如果从未使用过这个实例，会造成内存的浪费。</p>
<h4 id="饿汉式（静态代码块）-可用"><a href="#饿汉式（静态代码块）-可用" class="headerlink" title="饿汉式（静态代码块）[可用]"></a>饿汉式（静态代码块）[可用]</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static Singleton instance;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">       <span class="built_in"> instance </span>= new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和4.5方法起到相同的作用，优缺点也相同。</p>
<h4 id="静态内部类-推荐用"><a href="#静态内部类-推荐用" class="headerlink" title="静态内部类[推荐用]"></a>静态内部类[推荐用]</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> &#123;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式与4.5和4.6的饿汉式写法采用的机制类似，但又不相同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要<code>Singleton</code>类被装载就会实例化，没有起到<code>Lazy Loading</code>的作用，而静态内部类方式在<code>Singleton</code>类被装载时并不会立即实例化，而是在调用<code>getInstance()</code>方法时，才会装载<code>SingletonInstance</code>类，进而完成<code>Singleton</code>的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<p>优点：线程安全，延迟加载，效率高。</p>
<h4 id="枚举-推荐用"><a href="#枚举-推荐用" class="headerlink" title="枚举[推荐用]"></a>枚举[推荐用]</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void whateverMethod() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这种方式是<code>Effective Java</code>作者<code>Josh Bloch</code>提倡的方式，借助JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒。</p>
<h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h3><ul>
<li>需要频繁的进行创建和销毁的对象；</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；</li>
<li>频繁访问数据库或文件的对象。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>Singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配Sunday算法</title>
    <url>/2016/05/28/2016-05-28-string-match-sunday/</url>
    <content><![CDATA[<blockquote>
<p>“Sunday算法是Daniel M.Sunday于1990年提出的字符串模式匹配。”</p>
</blockquote>
<h3 id="Sunday算法简介"><a href="#Sunday算法简介" class="headerlink" title="Sunday算法简介"></a>Sunday算法简介</h3><p>字符串查找算法中，最著名的两个是<code>KMP</code>算法(Knuth-Morris-Pratt)和<code>BM</code>算法(Boyer-Moore)。两个算法在最坏情况下均具有线性的查找时间。但是在实用上，KMP算法并不比c库函数<code>strstr()</code>快多少，而<code>BM</code>算法则往往比<code>KMP</code>算法快上3－5倍(未经验证)。而<code>Sunday</code>算法比<code>BM</code>还要快，而且更易理解。<code>Sunday</code>算法的核心思想是：在匹配过程中，模式串并不被要求一定要按从左向右进行比较还是从右向左进行比较，它在发现不匹配时，算法能跳过尽可能多的字符以进行下一步的匹配，从而提高了匹配效率。</p>
<a id="more"></a>
<h3 id="Sunday算法讲解"><a href="#Sunday算法讲解" class="headerlink" title="Sunday算法讲解"></a>Sunday算法讲解</h3><p>假设现在有两个字符串</p>
<p>主串为 A = “What a nice algorithm”</p>
<p>模式串为 B = “nice”</p>
<p>Sunday算法的大致原理是：</p>
<p>先从左到右逐个字符进行比较，以A和B字符串为例：初始状态i = 0, 指向A的第一个字符，j = 0 指向B的第一个字符，分别为<code>W</code>和<code>n</code>，不匹配，于是要把子串往后移动。</p>
<table>
<thead>
<tr>
<th>W</th>
<th>h</th>
<th>a</th>
<th>t</th>
<th></th>
<th>a</th>
<th></th>
<th>n</th>
<th>i</th>
<th>c</th>
<th>e</th>
<th></th>
<th>a</th>
<th>l</th>
<th>g</th>
<th>o</th>
<th>r</th>
<th>i</th>
<th>t</th>
<th>h</th>
<th>m</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td></td>
<td></td>
<td></td>
<td>m</td>
</tr>
<tr>
<td>n</td>
<td>i</td>
<td>c</td>
<td>e</td>
</tr>
<tr>
<td>j</td>
</tr>
</tbody>
</table>
<p>此时，Sunday算法要求，找到位于A字串中位于B字符串后面的第一个字符，即下图中m所指向的字符<code>空格</code>，在模式字符串B中从后向前查找是否存在<code>空格</code>，如果不存在，则直接将模式串置于m之后。</p>
<table>
<thead>
<tr>
<th>W</th>
<th>h</th>
<th>a</th>
<th>t</th>
<th></th>
<th>a</th>
<th></th>
<th>n</th>
<th>i</th>
<th>c</th>
<th>e</th>
<th></th>
<th>a</th>
<th>l</th>
<th>g</th>
<th>o</th>
<th>r</th>
<th>i</th>
<th>t</th>
<th>h</th>
<th>m</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td></td>
<td></td>
<td></td>
<td>m</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>n</td>
<td>i</td>
<td>c</td>
<td>e</td>
</tr>
<tr>
<td>j</td>
</tr>
</tbody>
</table>
<p>然后将i和j置于新位置，继续进行匹配。</p>
<table>
<thead>
<tr>
<th>W</th>
<th>h</th>
<th>a</th>
<th>t</th>
<th></th>
<th>a</th>
<th></th>
<th>n</th>
<th>i</th>
<th>c</th>
<th>e</th>
<th></th>
<th>a</th>
<th>l</th>
<th>g</th>
<th>o</th>
<th>r</th>
<th>i</th>
<th>t</th>
<th>h</th>
<th>m</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>i</td>
<td></td>
<td></td>
<td></td>
<td>m</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>n</td>
<td>i</td>
<td>c</td>
<td>e</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>j</td>
<td></td>
<td>k</td>
</tr>
</tbody>
</table>
<p><code>a</code>和<code>n</code>不匹配，需要将子串向后移动，可以看到此时m所在位置的字符<code>c</code>和k所在位置的字符<code>c</code>相同，此时需要将相同的字符对齐，让j再次指向B字符串的头一个字符，相应地，将i指向主串对应的字符<code>n</code>。</p>
<table>
<thead>
<tr>
<th>W</th>
<th>h</th>
<th>a</th>
<th>t</th>
<th></th>
<th>a</th>
<th></th>
<th>n</th>
<th>i</th>
<th>c</th>
<th>e</th>
<th></th>
<th>a</th>
<th>l</th>
<th>g</th>
<th>o</th>
<th>r</th>
<th>i</th>
<th>t</th>
<th>h</th>
<th>m</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>i</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>n</td>
<td>i</td>
<td>c</td>
<td>e</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>j</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>此时找到匹配的字符串，算法结束。</p>
<h3 id="Sunday算法代码"><a href="#Sunday算法代码" class="headerlink" title="Sunday算法代码"></a>Sunday算法代码</h3><p>java代码如下：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> strStr(<span class="keyword">String</span> <span class="built_in">text</span>, <span class="keyword">String</span> pattern) &#123;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="keyword">null</span> || <span class="built_in">text</span> == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 如果模式串为空，认为第0位已经匹配</span></span><br><span class="line">    <span class="built_in">int</span> tlen = <span class="built_in">text</span>.length(), plen = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k;  <span class="comment">// 分别记录text索引，pattern索引和模式串计数索引</span></span><br><span class="line">    <span class="built_in">int</span> index;  <span class="comment">// 记录不匹配时字符（m所在位置）的索引</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; tlen &amp;&amp; j &lt; plen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">text</span>.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index = result + plen;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = plen - <span class="number">1</span>; k &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">text</span>.charAt(index) != pattern.charAt(k); k--);</span><br><span class="line">        i = result;</span><br><span class="line">        i += plen - k;</span><br><span class="line">        result = i;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (result + plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果匹配长度超过主串，匹配失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &lt;= tlen? result: <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需要注意的测试用例"><a href="#需要注意的测试用例" class="headerlink" title="需要注意的测试用例"></a>需要注意的测试用例</h3><ul>
<li>“”, “”</li>
<li>null, “a”</li>
<li>“tartarget”, “target”</li>
<li>“source”, “rced”</li>
</ul>
<h3 id="相关题目地址"><a href="#相关题目地址" class="headerlink" title="相关题目地址"></a>相关题目地址</h3><p>Leetcode:<br><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">Implement strStr()</a></p>
<p>Lintcode:<br><a href="http://www.lintcode.com/en/problem/strstr/" target="_blank" rel="noopener">strStr</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA和gradle搭建Spring MVC和MyBatis开发环境</title>
    <url>/2016/04/12/2016-04-12-idea-gradle-ssm/</url>
    <content><![CDATA[<blockquote>
<p>“IDEA是jetbrains公司开发的Java开发IDE，功能齐全。使用IDEA搭建SSM开发环境简单有效。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="http://gradle.org/" target="_blank" rel="noopener">Gradle</a>是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。<br>它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。</p>
<p><a href="http://spring.io/" target="_blank" rel="noopener">Spring MVC</a>属于SpringFrameWork的后续产品，已经融合<br>在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</p>
<p><a href="http://blog.mybatis.org/" target="_blank" rel="noopener">MyBatis</a>本是apache的一个开源项目iBatis, 2010年这个项目<br>由apache software foundation 迁移到了google code，并且改名为MyBatis 。<br>2013年11月迁移到Github。</p>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.安装mysql，并完成相应数据库的建立</p>
<p>2.安装IDEA完整版</p>
<p>3.下载tomcat或其他服务器</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>打开<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA</a>软件，选择Create New Project：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/start.png" alt></p>
<p>选择创建基于gradle的java web项目：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/selectGradle.png" alt></p>
<p>输入GroupId和ArtifactId：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/groupAndArtifact.png" alt></p>
<p>选择gradle的来源，可以用自己下载的gradle，也可以使用IDEA内建的gradle版本：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/gradleSource.png" alt></p>
<p>选择项目的目录：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/projectLocation.png" alt></p>
<p>点击完成，会生成一个最基本的java web目录，增加文件夹和相应文件，将其目录结构改为以下结构：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/projectDirectory.png" alt></p>
<p>其中resources目录中的config文件夹中的文件和WEB-INF文件夹下的web.xml，<br>以及build.gradle都是自己进行配置的。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span></span><br><span class="line"><span class="xml">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="xml">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jarDirection&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;driverClass&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span></span></span><br><span class="line"><span class="xml">                        connectionURL="$</span><span class="template-variable">&#123;connectionURL&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">                        userId="$</span><span class="template-variable">&#123;userId&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">                        password="$</span><span class="template-variable">&#123;password&#125;</span><span class="xml">"&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">javaModelGenerator</span></span></span></span><br><span class="line"><span class="xml">        targetPackage="$</span><span class="template-variable">&#123;modelPackage&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">        targetProject="$</span><span class="template-variable">&#123;src_main_java&#125;</span><span class="xml">"&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span></span></span></span><br><span class="line"><span class="xml">        targetPackage="$</span><span class="template-variable">&#123;sqlMapperPackage&#125;</span><span class="xml">"  </span></span><br><span class="line"><span class="xml">        targetProject="$</span><span class="template-variable">&#123;src_main_java&#125;</span><span class="xml">"&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span></span><br><span class="line"><span class="xml">        targetPackage="$</span><span class="template-variable">&#123;mapperPackage&#125;</span><span class="xml">"  </span></span><br><span class="line"><span class="xml">        targetProject="$</span><span class="template-variable">&#123;src_main_java&#125;</span><span class="xml">"&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 每一个数据库表都需要建立一个对应的table字段 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"test"</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;property name="useActualColumnNames" value="true"/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">sqlStatement</span>=<span class="string">"DB2"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"DATE_FIELD"</span> <span class="attr">property</span>=<span class="string">"startDate"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">"FRED"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"LONG_VARCHAR_FIELD"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span> --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h5><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成的model类所在包</span></span><br><span class="line"><span class="attr">modelPackage</span>=cn.edu.bupt.wen.model</span><br><span class="line"><span class="comment"># 生成的mapper接口类所在包</span></span><br><span class="line"><span class="attr">mapperPackage</span>=cn.edu.bupt.wen.mapper</span><br><span class="line"><span class="comment"># 生成的mapper xml文件所在包</span></span><br><span class="line"><span class="attr">sqlMapperPackage</span>=cn.edu.bupt.wen.mybatis_mapper</span><br></pre></td></tr></table></figure>
<h5 id="jdbc-mysql-properties"><a href="#jdbc-mysql-properties" class="headerlink" title="jdbc-mysql.properties"></a>jdbc-mysql.properties</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jdbc.jarDirection后的内容更改为gradle下载的</span></span><br><span class="line"><span class="comment"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示</span></span><br><span class="line">jdbc.<span class="attribute">jarDirection</span>=/Users/wenzhiquan/.gradle/caches/modules-2/files-2.1/mysql</span><br><span class="line">/mysql-connector-java/5.1.38/dbbd7cd309ce167ec8367de4e41c63c2c8593cc5</span><br><span class="line">/mysql-connector-java-5.1.38.jar</span><br><span class="line">jdbc.<span class="attribute">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/bookbest</span><br><span class="line">jdbc.<span class="attribute">user</span>=root</span><br><span class="line">jdbc.<span class="attribute">pass</span>=root</span><br></pre></td></tr></table></figure>
<h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.edu.bupt.wen"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/statics/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="string">'cn.edu.bupt.wen'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'war'</span></span><br><span class="line">apply plugin: <span class="string">'idea'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">    mybatisGenerator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取config文件夹中对应的配置文件</span></span><br><span class="line">ext&#123;</span><br><span class="line">    <span class="keyword">def</span> prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">file</span>(<span class="string">"src/main/resources/config/mybatis/jdbc-mysql.properties"</span>)</span><br><span class="line">    .withInputStream &#123;</span><br><span class="line">        prop.load(it)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">file</span>(<span class="string">"src/main/resources/config/mybatis/gradle.properties"</span>)</span><br><span class="line">    .withInputStream &#123;</span><br><span class="line">        prop.load(it)</span><br><span class="line">    &#125;</span><br><span class="line">    prop.<span class="keyword">each</span> &#123;</span><br><span class="line">        <span class="keyword">project</span>.extensions.add(<span class="string">"$it.key"</span>,it.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置gradle的依赖项</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.codehaus.groovy:groovy-all:2.3.11'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'jstl:jstl:1.2'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-aop:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-context:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-beans:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-web:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-webmvc:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-tx:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-jdbc:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-test:4.2.4.RELEASE'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'mysql:mysql-connector-java:5.1.38'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.mybatis.generator:mybatis-generator-core:1.3.2'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.mybatis:mybatis-spring:1.2.3'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.mybatis:mybatis:3.3.0'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'junit:junit:4.12'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mybatisGenerator <span class="string">'org.mybatis.generator:mybatis-generator-core:1.3.2'</span></span><br><span class="line">    mybatisGenerator <span class="string">'mysql:mysql-connector-java:5.1.38'</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用ant创建一个自动生成MyBatis目录文件的task</span></span><br><span class="line"><span class="keyword">task</span> mybatisGenerate &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'targetProject'</span>] = projectDir.path</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'jarDirection'</span>] = <span class="keyword">project</span>[<span class="string">'jdbc.jarDirection'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'driverClass'</span>] = <span class="keyword">project</span>[<span class="string">'jdbc.driverClassName'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'connectionURL'</span>] = <span class="keyword">project</span>[<span class="string">'jdbc.url'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'userId'</span>] = <span class="keyword">project</span>[<span class="string">'jdbc.user'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'password'</span>] = <span class="keyword">project</span>[<span class="string">'jdbc.pass'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'src_main_java'</span>] = <span class="keyword">sourceSets</span>.main.java.srcDirs[<span class="number">0</span>].path</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'src_main_resources'</span>] = <span class="keyword">sourceSets</span>.main.resources.srcDirs[<span class="number">0</span>].path</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'modelPackage'</span>] = <span class="keyword">project</span>[<span class="string">'modelPackage'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'mapperPackage'</span>] = <span class="keyword">project</span>[<span class="string">'mapperPackage'</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">'sqlMapperPackage'</span>] = <span class="keyword">project</span>[<span class="string">'sqlMapperPackage'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ant</span>.taskdef(</span><br><span class="line">            name: <span class="string">'mbgenerator'</span>,</span><br><span class="line">            classname: <span class="string">'org.mybatis.generator.ant.GeneratorAntTask'</span>,</span><br><span class="line">            <span class="keyword">classpath</span>: <span class="keyword">configurations</span>.mybatisGenerator.asPath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ant</span>.mbgenerator(overwrite: <span class="keyword">true</span>,</span><br><span class="line">            configfile: <span class="string">'src/main/resources/config/mybatis/generatorConfig.xml'</span>,</span><br><span class="line">            verbose: <span class="keyword">true</span>) &#123;</span><br><span class="line">        propertyset &#123;</span><br><span class="line">            propertyref(name: <span class="string">'targetProject'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'jarDirection'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'userId'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'driverClass'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'connectionURL'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'password'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'src_main_java'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'src_main_resources'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'modelPackage'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'mapperPackage'</span>)</span><br><span class="line">            propertyref(name: <span class="string">'sqlMapperPackage'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="下载gradle依赖包"><a href="#下载gradle依赖包" class="headerlink" title="下载gradle依赖包"></a>下载gradle依赖包</h4><p>至此，基本的配置就完成了，接下来就需要运行gradle下载相应的依赖包了，<br>操作如下：打开<code>IDEA &gt; View &gt; Tool Windows &gt; gradle</code>:</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/runGradle.png" alt></p>
<p>点击图中的按钮，IDEA就会自动下载依赖包了。</p>
<p>下载完成后，目录下的<code>External Libraries</code>文件夹会生成相应的目录：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/gradleDownload.png" alt></p>
<p>下载完依赖包之后，整体的配置基本上就完成了。</p>
<h3 id="部署到Tomcat服务器"><a href="#部署到Tomcat服务器" class="headerlink" title="部署到Tomcat服务器"></a>部署到Tomcat服务器</h3><p>打开<code>IDEA &gt; Run &gt; Edit Configurations...</code></p>
<p><img src="/uploads/in-post/idea_gradle_ssm/tomcatConf.png" alt></p>
<p>点击tomcat server的local选项，点击右上角的<code>configure...</code>，<br>在弹出的对话框中选中下载的Tomcat根目录：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/tomcatHome.png" alt></p>
<p>然后将配置好的tomcat添加到运行库当中：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/addTomcat.png" alt></p>
<h3 id="编写代码并运行"><a href="#编写代码并运行" class="headerlink" title="编写代码并运行"></a>编写代码并运行</h3><h4 id="编写controller代码"><a href="#编写controller代码" class="headerlink" title="编写controller代码"></a>编写controller代码</h4><p>在controller文件夹中创建<code>IndexController</code>文件，将代码修改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">cn</span><span class="selector-class">.edu</span><span class="selector-class">.bupt</span><span class="selector-class">.wen</span><span class="selector-class">.controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Controller</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author wenzhiquan</span></span><br><span class="line"><span class="comment"> * Created on 16/4/12 下午12:25</span></span><br><span class="line"><span class="comment"> * File name: IndexController.java</span></span><br><span class="line"><span class="comment"> * Description: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@Controller</span></span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@RequestMapping</span>("/")</span><br><span class="line">    public String index()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> "<span class="selector-tag">index</span>";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改index-jsp"><a href="#修改index-jsp" class="headerlink" title="修改index.jsp"></a>修改index.jsp</h4><p>将index.jsp文件修改为自己想要的样式：</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby">-</span></span><br><span class="line"><span class="ruby">  Created by IntelliJ IDEA.</span></span><br><span class="line"><span class="ruby">  <span class="symbol">User:</span> wenzhiquan</span></span><br><span class="line"><span class="ruby">  <span class="symbol">Date:</span> <span class="number">16</span>/<span class="number">4</span>/<span class="number">12</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">Time:</span> 下午<span class="number">12</span><span class="symbol">:</span><span class="number">23</span></span></span><br><span class="line"><span class="ruby">  To change this template use File <span class="params">| Settings |</span> File Templates.</span></span><br><span class="line"><span class="ruby">-</span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  Hello World!</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="运行Tomcat"><a href="#运行Tomcat" class="headerlink" title="运行Tomcat"></a>运行Tomcat</h4><p><img src="/uploads/in-post/idea_gradle_ssm/runTomcat.png" alt></p>
<p>点击运行按钮，服务器启动后会自动启动浏览器进入主界面：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/indexJsp.png" alt></p>
<p>至此，hello world程序已经完成。</p>
<h3 id="自动生成mybatis相关文件"><a href="#自动生成mybatis相关文件" class="headerlink" title="自动生成mybatis相关文件"></a>自动生成mybatis相关文件</h3><p>进入<code>gradle</code>的view，点击创建<code>gradle</code>任务：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/mybatisGen.png" alt></p>
<p>创建一个mybatisGenerate任务：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/mybatisGenRun.png" alt></p>
<p>点击OK，会在<code>model</code>，<code>mapper</code>和<code>mybatis_mapper</code>文件夹中自动生成相应的文件：</p>
<p><img src="/uploads/in-post/idea_gradle_ssm/afterMybatisGen.png" alt></p>
<p>至此，Spring MVC + MyBatis的Java Web开发环境配置完成。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（3）—— Binary Search</title>
    <url>/2016/06/26/2016-06-26-interview-algorithm-binary-search/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–Binary Search相关”</p>
</blockquote>
<a id="more"></a>
<h3 id="Sqrt-x-easy"><a href="#Sqrt-x-easy" class="headerlink" title="Sqrt(x) - easy"></a>Sqrt(x) - easy</h3><p>题目</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Implement int sqrt(int x).</span><br><span class="line"></span><br><span class="line">Compute and return the square root of x.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">3</span>)</span></span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">4</span>)</span></span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">5</span>)</span></span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">10</span>)</span></span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> v = x;  </span><br><span class="line">    <span class="keyword">while</span>(v * v &gt; x)</span><br><span class="line">        v = (v + (x / v)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/sqrtx/" target="_blank" rel="noopener">Sqrt(x)</a></p>
<h3 id="Search-Insert-Position-easy"><a href="#Search-Insert-Position-easy" class="headerlink" title="Search Insert Position - easy"></a>Search Insert Position - easy</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Given a sorted array and a target value, return the index if the target is found.</span><br><span class="line">If not, return the index where it would be if it were inserted in order.</span><br><span class="line"></span><br><span class="line">You may assume NO duplicates in the array.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">5</span> → <span class="number">2</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">2</span> → <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">7</span> → <span class="number">4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">0</span> → <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> searchInsert(<span class="built_in">int</span>[] A, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="literal">null</span> &amp;&amp; A.length &lt; <span class="number">1</span>) return <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, high = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">mid</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="built_in">mid</span> = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="built_in">mid</span>] == target) return <span class="built_in">mid</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[<span class="built_in">mid</span>] &lt; target) low = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> high = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return high - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/search-insert-position/" target="_blank" rel="noopener">Search Insert Position</a></p>
<h3 id="Search-a-2D-Matrix-easy"><a href="#Search-a-2D-Matrix-easy" class="headerlink" title="Search a 2D Matrix - easy"></a>Search a 2D Matrix - easy</h3><p>题目</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Write an efficient algorithm that searches <span class="keyword">for</span> a value <span class="keyword">in</span> an m x n <span class="built_in">matrix</span>.</span><br><span class="line"></span><br><span class="line">This <span class="built_in">matrix</span> has the following <span class="built_in">properties</span>:</span><br><span class="line"></span><br><span class="line">Integers <span class="keyword">in</span> each <span class="built_in">row</span> are sorted from left to right.</span><br><span class="line">The <span class="built_in">first</span> <span class="built_in">integer</span> of each <span class="built_in">row</span> <span class="built_in">is</span> greater than the <span class="built_in">last</span> <span class="built_in">integer</span> of the previous <span class="built_in">row</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Consider the following <span class="built_in">matrix</span>:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line">    [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]</span><br><span class="line">]</span><br><span class="line">Given target = <span class="number">3</span>, <span class="built_in">return</span> <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight stan"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public boolean searchMatrix(<span class="keyword">int</span>[][] <span class="keyword">matrix</span>, <span class="keyword">int</span> <span class="built_in">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">matrix</span> == null || <span class="keyword">matrix</span>.length &lt; <span class="number">1</span>) <span class="keyword">return</span> false;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">row</span> = <span class="keyword">matrix</span>.length;</span><br><span class="line">    <span class="keyword">int</span> column = <span class="keyword">matrix</span>[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">row</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">matrix</span>[i][column] == <span class="built_in">target</span>) <span class="keyword">return</span> true;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">matrix</span>[i][column] &lt; <span class="built_in">target</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> binarySearch(<span class="keyword">matrix</span>[i], <span class="built_in">target</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean binarySearch(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> <span class="built_in">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == null || arr.length &lt; <span class="number">1</span>) <span class="keyword">return</span> false;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == <span class="built_in">target</span>) <span class="keyword">return</span> true;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; <span class="built_in">target</span>) low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/search-a-2d-matrix/" target="_blank" rel="noopener">Search a 2D Matrix</a></p>
<h3 id="First-Position-of-Target-easy"><a href="#First-Position-of-Target-easy" class="headerlink" title="First Position of Target - easy"></a>First Position of Target - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">For a given sorted<span class="built_in"> array </span>(ascending order)<span class="built_in"> and </span>a target number, find the first</span><br><span class="line">index of this number in O(log n) time complexity.</span><br><span class="line"></span><br><span class="line">If the target number does<span class="built_in"> not </span>exist in the array,<span class="built_in"> return </span>-1.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">If the<span class="built_in"> array </span>is [1, 2, 3, 3, 4, 5, 10], for given target 3,<span class="built_in"> return </span>2.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> binarySearch(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == null &amp;&amp; nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= <span class="keyword">target</span>) high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[high - <span class="number">1</span>] == <span class="keyword">target</span>)</span><br><span class="line">        <span class="keyword">return</span> high - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/first-position-of-target/" target="_blank" rel="noopener">First Position of Target</a></p>
<h3 id="Wood-Cut-medium"><a href="#Wood-Cut-medium" class="headerlink" title="Wood Cut - medium"></a>Wood Cut - medium</h3><p>题目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Given n pieces of wood <span class="keyword">with</span> <span class="keyword">length</span> L[i] (<span class="built_in">integer</span> <span class="built_in">array</span>). Cut them <span class="keyword">into</span> small pieces</span><br><span class="line"><span class="keyword">to</span> <span class="keyword">guarantee</span> you could have equal <span class="keyword">or</span> more <span class="keyword">than</span> k pieces <span class="keyword">with</span> the same length.</span><br><span class="line">What <span class="keyword">is</span> the longest <span class="keyword">length</span> you can <span class="keyword">get</span> <span class="keyword">from</span> the n pieces <span class="keyword">of</span> wood? Given L &amp; k,</span><br><span class="line"><span class="keyword">return</span> the maximum <span class="keyword">length</span> <span class="keyword">of</span> the small pieces.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="keyword">For</span> L=[<span class="number">232</span>, <span class="number">124</span>, <span class="number">456</span>], k=<span class="number">7</span>, <span class="keyword">return</span> <span class="number">114.</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> woodCut(<span class="built_in">int</span>[] L, <span class="built_in">int</span> k) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>, L[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">1</span>, high = <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">while</span> (low <span class="number">1</span> &lt; high) &#123;</span><br><span class="line">        <span class="built_in">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">count</span>(L, mid) &gt;= k) low = mid;</span><br><span class="line">        <span class="keyword">else</span> high = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">count</span>(L, high) &gt;= k) <span class="keyword">return</span> high;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">count</span>(L, low) &gt;= k) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">count</span>(<span class="built_in">int</span>[] L, <span class="built_in">int</span> length) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="built_in">sum</span> += L[i] / length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/wood-cut/" target="_blank" rel="noopener">Wood Cut</a></p>
<h3 id="Find-Minimum-in-Rotated-Sorted-Array-medium"><a href="#Find-Minimum-in-Rotated-Sorted-Array-medium" class="headerlink" title="Find Minimum in Rotated Sorted Array - medium"></a>Find Minimum in Rotated Sorted Array - medium</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Suppose a sorted array is rotated at some pivot unknown to you beforehand.</span><br><span class="line"></span><br><span class="line">(i.e., <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> might become <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>).</span><br><span class="line"></span><br><span class="line">Find the minimum element.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>] return <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public <span class="built_in">int</span> findMin(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="keyword">null</span> || <span class="built_in">num</span>.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = <span class="built_in">num</span>.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">num</span>[mid] &gt; <span class="built_in">num</span>[high]) low = mid <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span>[mid] &lt; <span class="built_in">num</span>[high]) high = mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num</span>[high];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener">Find Minimum in Rotated Sorted Array</a></p>
<h3 id="Find-Peak-Element-medium"><a href="#Find-Peak-Element-medium" class="headerlink" title="Find Peak Element - medium"></a>Find Peak Element - medium</h3><p>题目</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">There is an integer array which has the following features:</span></span><br><span class="line"></span><br><span class="line"><span class="string">The</span> <span class="string">numbers</span> <span class="string">in</span> <span class="string">adjacent</span> <span class="string">positions</span> <span class="string">are</span> <span class="string">different.</span></span><br><span class="line"><span class="string">A[0]</span> <span class="string">&lt;</span> <span class="string">A[1]</span> <span class="string">&amp;&amp;</span> <span class="string">A[A.length</span> <span class="bullet">-</span> <span class="number">2</span><span class="string">]</span> <span class="string">&gt;</span> <span class="string">A[A.length</span> <span class="bullet">-</span> <span class="number">1</span><span class="string">].</span></span><br><span class="line"><span class="attr">We define a position P is a peek if:</span></span><br><span class="line"></span><br><span class="line"><span class="string">A[P]</span> <span class="string">&gt;</span> <span class="string">A[P-1]</span> <span class="string">&amp;&amp;</span> <span class="string">A[P]</span> <span class="string">&gt;</span> <span class="string">A[P+1]</span></span><br><span class="line"><span class="string">Find</span> <span class="string">a</span> <span class="string">peak</span> <span class="string">element</span> <span class="string">in</span> <span class="string">this</span> <span class="string">array.</span> <span class="string">Return</span> <span class="string">the</span> <span class="string">index</span> <span class="string">of</span> <span class="string">the</span> <span class="string">peak.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Example</span></span><br><span class="line"><span class="string">Given</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">1</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">6</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="string">Return</span> <span class="string">index</span> <span class="number">1</span> <span class="string">(which</span> <span class="string">is</span> <span class="string">number</span> <span class="number">2</span><span class="string">)</span> <span class="string">or</span> <span class="number">6</span> <span class="string">(which</span> <span class="string">is</span> <span class="string">number</span> <span class="number">7</span><span class="string">)</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeak</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span>(nums == null || nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">end</span> = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start <span class="number">1</span> &lt; <span class="built_in">end</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = start + (<span class="built_in">end</span> - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; nums[mid<span class="number">-1</span>]) &#123;</span><br><span class="line">            <span class="built_in">end</span> = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[start] &gt;= nums[<span class="built_in">end</span>] ? start : <span class="built_in">end</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/find-peak-element/" target="_blank" rel="noopener">Find Peak Element</a></p>
<h3 id="First-Bad-Version-medium"><a href="#First-Bad-Version-medium" class="headerlink" title="First Bad Version - medium"></a>First Bad Version - medium</h3><p>题目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">The code base version is an integer <span class="keyword">start</span> <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> n. One <span class="keyword">day</span>, someone committed</span><br><span class="line">a bad <span class="keyword">version</span> <span class="keyword">in</span> the code <span class="keyword">case</span>, so it caused this <span class="keyword">version</span> <span class="keyword">and</span> the <span class="keyword">following</span> <span class="keyword">versions</span></span><br><span class="line"><span class="keyword">are</span> <span class="keyword">all</span> <span class="keyword">failed</span> <span class="keyword">in</span> the unit tests. Find the <span class="keyword">first</span> bad version.</span><br><span class="line"></span><br><span class="line">You can <span class="keyword">call</span> isBadVersion <span class="keyword">to</span> <span class="keyword">help</span> you determine which <span class="keyword">version</span> <span class="keyword">is</span> the <span class="keyword">first</span> bad one.</span><br><span class="line">The details <span class="keyword">interface</span> can be <span class="keyword">found</span> <span class="keyword">in</span> the code<span class="string">'s annotation part.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Notice</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please read the annotation in code area to get the correct way to call</span></span><br><span class="line"><span class="string">isBadVersion in different language. For example, Java is SVNRepo.isBadVersion(v)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example</span></span><br><span class="line"><span class="string">Given n = 5:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">isBadVersion(3) -&gt; false</span></span><br><span class="line"><span class="string">isBadVersion(5) -&gt; true</span></span><br><span class="line"><span class="string">isBadVersion(4) -&gt; true</span></span><br><span class="line"><span class="string">Here we are 100% sure that the 4th version is the first bad version.</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">Ja<span class="symbol">va:</span></span><br><span class="line"></span><br><span class="line">public <span class="built_in">int</span> findFirstBadVersion(<span class="built_in">int</span> <span class="built_in">n</span>) &#123;</span><br><span class="line">    <span class="built_in">if</span> (<span class="built_in">n</span> &lt; <span class="number">1</span>) return <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, <span class="built_in">mid</span> = <span class="number">0</span>, high = <span class="built_in">n</span>;</span><br><span class="line">    while (low &lt; high) &#123;</span><br><span class="line">        <span class="built_in">mid</span> = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">if</span> (SVNRepo.isBadVersion(<span class="built_in">mid</span>)) high = <span class="built_in">mid</span>;</span><br><span class="line">        else low = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/first-bad-version/" target="_blank" rel="noopener">First Bad Version</a></p>
<h3 id="Search-in-Rotated-Sorted-Array-medium"><a href="#Search-in-Rotated-Sorted-Array-medium" class="headerlink" title="Search in Rotated Sorted Array - medium"></a>Search in Rotated Sorted Array - medium</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Suppose a sorted array is rotated at some pivot unknown to you beforehand.</span><br><span class="line"></span><br><span class="line">(i.e., <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> might become <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>).</span><br><span class="line"></span><br><span class="line">You are given a target value to search. If found in the array return its index,</span><br><span class="line">otherwise return <span class="number">-1.</span></span><br><span class="line"></span><br><span class="line">You may assume no duplicate exists in the array.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] and target=<span class="number">1</span>, return <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">For [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] and target=<span class="number">0</span>, return <span class="number">-1.</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> search(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == null || A.length &lt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] == <span class="keyword">target</span>) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &lt; A[high]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[high] &gt;= <span class="keyword">target</span> &amp;&amp; <span class="keyword">target</span> &gt;= A[mid]) low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[low] &lt;= <span class="keyword">target</span> &amp;&amp; <span class="keyword">target</span> &lt;= A[mid]) high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[low] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[high] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/search-in-rotated-sorted-array/" target="_blank" rel="noopener">Search in Rotated Sorted Array</a></p>
<h3 id="Search-for-a-Range-medium"><a href="#Search-for-a-Range-medium" class="headerlink" title="Search for a Range - medium"></a>Search for a Range - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given a sorted<span class="built_in"> array </span>of n integers, find the starting<span class="built_in"> and </span>ending position of a</span><br><span class="line">given target value.</span><br><span class="line"></span><br><span class="line">If the target is<span class="built_in"> not </span>found in the array,<span class="built_in"> return </span>[-1, -1].</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [5, 7, 7, 8, 8, 10]<span class="built_in"> and </span>target value 8,</span><br><span class="line">return [3, 4].</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] searchRange(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> new <span class="built_in">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> start, <span class="keyword">end</span>, mid;</span><br><span class="line">    <span class="built_in">int</span>[] bound = new <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    // search for left bound</span><br><span class="line">    start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start <span class="number">1</span> &lt; <span class="keyword">end</span>) &#123;</span><br><span class="line">        mid = start + (<span class="keyword">end</span> - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] &gt;= <span class="keyword">target</span>) &#123;</span><br><span class="line">            <span class="keyword">end</span> = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &lt; <span class="keyword">target</span>) &#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[start] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[<span class="keyword">end</span>] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = <span class="keyword">end</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = bound[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> bound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // search for right bound</span><br><span class="line">    start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start <span class="number">1</span> &lt; <span class="keyword">end</span>) &#123;</span><br><span class="line">        mid = start + (<span class="keyword">end</span> - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] &lt;= <span class="keyword">target</span>) &#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">end</span> = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[<span class="keyword">end</span>] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">1</span>] = <span class="keyword">end</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[start] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">1</span>] = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = bound[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> bound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/search-for-a-range/" target="_blank" rel="noopener">Search for a Range</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统常用命令</title>
    <url>/2016/06/05/2016-06-05-linux-frequently-used-order/</url>
    <content><![CDATA[<blockquote>
<p>“Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>UNIX</code>的两个重要分支：<code>System V</code>和<code>BSD UNIX</code>，<code>Linux</code>属于<code>BSD</code>分支。</p>
<p><code>Linux</code>版本号的命名规则：<code>Linux</code>的内核版本由3部分组成。版本号的第二位数字，可以确定Linux内核版本的类型，第二位数字是偶数的为稳定版本。</p>
<p><code>Linux</code>里一切皆文件。</p>
<a id="more"></a>
<h3 id="档案与目录管理"><a href="#档案与目录管理" class="headerlink" title="档案与目录管理"></a>档案与目录管理</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span>　　                   显示文件或目录</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">l</span>                      列出文件详细信息<span class="keyword">l</span>(<span class="keyword">list</span>)</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">a</span>                      列出当前目录下所有文件及目录，包括隐藏的<span class="keyword">a</span>(<span class="keyword">all</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span>                   创建目录</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">p</span>                      创建目录，若无父目录，则创建<span class="keyword">p</span>(parent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> dir                  切换目录，如果不加dir会切换到用户根目录</span><br><span class="line"></span><br><span class="line">touch filename          创建空文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> content &gt; filename 创建带有内容的文件，如果文件存在，会发生覆盖</span><br><span class="line"></span><br><span class="line"><span class="keyword">cat</span> filename            查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">cp</span> <span class="keyword">source</span> dest          拷贝</span><br><span class="line"></span><br><span class="line">mv <span class="keyword">source</span> dest          移动或重命名</span><br><span class="line"></span><br><span class="line">rm                      删除文件</span><br><span class="line"></span><br><span class="line">    -i                     删除前进行确认</span><br><span class="line"></span><br><span class="line">    -r                     递归删除，可删除子目录及文件</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">f</span>                     强制删除</span><br><span class="line"></span><br><span class="line"><span class="keyword">find</span> dir -name <span class="built_in">exp</span>      在文件系统中搜索某文件，content可以是正则表达式</span><br><span class="line"></span><br><span class="line">    | xargs <span class="keyword">grep</span> content   查找内容为content的文件</span><br><span class="line"></span><br><span class="line">wc                      统计文本中行数、字数、字符数</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">c</span>                      统计文本中byte数量</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">l</span>                      统计文本中字符行数</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">m</span>                      统计文本中字符数</span><br><span class="line"></span><br><span class="line">    -<span class="keyword">w</span>                      统计文本中单词个数</span><br><span class="line"></span><br><span class="line"><span class="keyword">grep</span> <span class="built_in">exp</span> filename       在文本文件中查找某个字符串</span><br><span class="line"></span><br><span class="line">rmdir dir               删除空目录</span><br><span class="line"></span><br><span class="line">tree dir                树形结构显示目录，需要安装tree包</span><br><span class="line"></span><br><span class="line"><span class="keyword">pwd</span>                     显示当前目录</span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> <span class="keyword">source</span> dest          创建链接文件</span><br><span class="line"></span><br><span class="line">more, less              分页显示文本文件内容，more在当前页面显示，less会跳转到另一个页面进行显示</span><br><span class="line"></span><br><span class="line">head, tail              显示文件头、尾内容</span><br><span class="line"></span><br><span class="line">    -n <span class="built_in">count</span>                显示指定行数</span><br><span class="line"></span><br><span class="line">chmod perm <span class="keyword">file</span>         更改文件访问权限</span><br><span class="line"></span><br><span class="line">chown username[:groupname] <span class="keyword">file</span> 更改文件所有者</span><br><span class="line"></span><br><span class="line">chgrp groupname <span class="keyword">file</span>    更改文件所在组</span><br><span class="line"></span><br><span class="line">du                      查看目录或文件大小</span><br><span class="line"></span><br><span class="line">    -h                      带有单位显示目录信息</span><br><span class="line"></span><br><span class="line">df                      查看磁盘使用情况</span><br><span class="line"></span><br><span class="line">    -h                      带有单位显示磁盘信息</span><br></pre></td></tr></table></figure>
<h3 id="系统常用命令"><a href="#系统常用命令" class="headerlink" title="系统常用命令"></a>系统常用命令</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">man order               查看某个命令的帮助文档</span><br><span class="line"></span><br><span class="line">stat                    显示指定文件的详细信息，比ls更详细</span><br><span class="line"></span><br><span class="line">who                     显示在线登陆用户</span><br><span class="line"></span><br><span class="line">whoami                  显示当前操作用户</span><br><span class="line"></span><br><span class="line">hostname                显示主机名</span><br><span class="line"></span><br><span class="line">uname                   显示系统信息</span><br><span class="line"></span><br><span class="line">top                     动态显示当前耗费资源最多进程信息</span><br><span class="line"></span><br><span class="line">ps                      显示瞬间进程状态 ps -aux</span><br><span class="line"></span><br><span class="line">ifconfig                查看网络情况</span><br><span class="line"></span><br><span class="line">ping                    测试网络连通</span><br><span class="line"></span><br><span class="line">netstat                 显示网络状态信息</span><br><span class="line"></span><br><span class="line">clear                   清屏</span><br><span class="line"></span><br><span class="line">alias                   对命令重命名</span><br><span class="line"></span><br><span class="line">unalias                 删除重命名命令</span><br><span class="line"></span><br><span class="line">kill -sig PID           杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</span><br><span class="line"></span><br><span class="line">    -1                      HUP (hang up)</span><br><span class="line"></span><br><span class="line">    -2                      INT (interrupt)</span><br><span class="line"></span><br><span class="line">    -3                      QUIT (quit)</span><br><span class="line"></span><br><span class="line">    -6                      ABRT (abort)</span><br><span class="line"></span><br><span class="line">    -9                      KILL (non-catchable, non-ignorable kill)</span><br><span class="line"></span><br><span class="line">    -14                     ALRM (alarm clock)</span><br><span class="line"></span><br><span class="line">    -15                     TERM (software termination signal)</span><br></pre></td></tr></table></figure>
<h3 id="登入与登出（开关机）"><a href="#登入与登出（开关机）" class="headerlink" title="登入与登出（开关机）"></a>登入与登出（开关机）</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">telnet ip               远程登录</span><br><span class="line"></span><br><span class="line">login                   本机登录</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span>                    退出登录</span><br><span class="line"></span><br><span class="line">shutdown                关闭计算机</span><br><span class="line"></span><br><span class="line">    -r time                 在某时间关机重启</span><br><span class="line"></span><br><span class="line">    -h time                 在某时间关闭电源</span><br><span class="line"></span><br><span class="line">    now                     立刻关机</span><br><span class="line"></span><br><span class="line">reboot                  重启</span><br></pre></td></tr></table></figure>
<h3 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">compress filename       将文件压缩成.Z格式</span><br><span class="line"></span><br><span class="line">gzip filename           将文件压缩成.gz格式</span><br><span class="line"></span><br><span class="line">bzip2 filename          将文件压缩成.bz2格式</span><br><span class="line"></span><br><span class="line">以上三个命令 -d           将相应的文件解压缩</span><br><span class="line"></span><br><span class="line">tar dest source         打包压缩</span><br><span class="line"></span><br><span class="line">    -<span class="ruby">c                      归档文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -x                      压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -z                      gzip压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -j                      bzip2压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -v                      显示压缩或解压缩过程 v(view)</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -f                      使用档名</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<p>tar -cvf /local/test.tar /local/test          只打包，不压缩</p>
<p>tar -zcvf /local/test.tar.gz /local/test      打包，并用gzip压缩</p>
<p>tar -jcvf /local/test.tar.bz2 /local/test     打包，并用bzip2压缩</p>
<p>tar -xvf /local/test.tar /local/test          只拆包</p>
<p>tar -zxvf /local/test.tar.gz /local/test      用gzip解压缩，并拆包</p>
<p>tar -jxvf /local/test.tar.bz2 /local/test     用bzip2解压缩，并拆包</p>
<h3 id="后台运行与恢复，时间相关"><a href="#后台运行与恢复，时间相关" class="headerlink" title="后台运行与恢复，时间相关"></a>后台运行与恢复，时间相关</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&amp; <span class="keyword">or</span> [Ctrl]+[z]         将命令置于后台运行</span><br><span class="line"></span><br><span class="line">fg                      将后台执行的命令置于前台</span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span>                    获取当前系统时间</span><br><span class="line"></span><br><span class="line">cal [<span class="built_in">month</span>] <span class="built_in">year</span>        获取某年（某月）日历</span><br></pre></td></tr></table></figure>
<h3 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/etc/passwd             存储用户账号的文件</span><br><span class="line"></span><br><span class="line">/etc<span class="built_in">/group </span>             存储组账号的文件</span><br><span class="line"></span><br><span class="line">useradd username        增加用户，只创建用户名，不创建相应目录</span><br><span class="line"></span><br><span class="line">adduser username        增加用户，并创建相应目录</span><br><span class="line"></span><br><span class="line">userdel username        删除用户</span><br><span class="line"></span><br><span class="line">    -r                  删除用户目录</span><br><span class="line"></span><br><span class="line">groupadd groupname      增加组</span><br><span class="line"></span><br><span class="line">groupdel groupname      删除组</span><br><span class="line"></span><br><span class="line">usermod -g 组名 用户名    修改用户所在组，会覆盖当前组</span><br><span class="line"></span><br><span class="line">usermod -G 组名,组名<span class="built_in">..</span>. 用户名 将用户加入多个组</span><br><span class="line"></span><br><span class="line">passwd username         给user设置密码</span><br><span class="line"></span><br><span class="line">/etc<span class="built_in">/profile </span>           系统环境变量</span><br><span class="line"></span><br><span class="line">.bashrc <span class="keyword">or</span> .zshrc       用户环境变量</span><br></pre></td></tr></table></figure>
<p>以上即为日常生活工作中常用到的Linux命令，更加高深的运维命令还需大家自己进行更加深入的了解和学习。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式基础</title>
    <url>/2016/06/28/2016-06-28-regex/</url>
    <content><![CDATA[<blockquote>
<p>“工具和灵感，都是利器。当来自不同的领域，不同类型的创造者的工具和灵感互相碰撞的时候，才会迸发出更多的可能性。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>正则表达式</code>，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</p>
<p>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在<code>Perl</code>中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由<code>UNIX</code>中的工具软件（例如<code>sed</code>和<code>grep</code>）普及开的。正则表达式通常缩写成“regex”，单数有 regexp、regex，复数有regexps、regexes、regexen。</p>
<p>在做文字处理或编写程序时，用到查找、替换等功能，使用正则表达式能够简单快捷的完成目标。简单而言，正则表达式通过一些特殊符号的帮助，使用户可以轻松快捷的完成查找、删除、替换等处理程序。例如<code>grep</code>, <code>expr</code>, <code>sed</code> , <code>awk</code>或 <code>vi</code> 中经常会使用到正则表达式，为了充分发挥<code>shell</code>编程的威力,需要精通正则表达式。正规表示法基本上是一种『表示法』， 只要工具程序支持这种表示法，那么该工具程序就可以用来作为正规表示法的字符串处理之用。</p>
<a id="more"></a>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列符合某个句法规则的字符串。</p>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p><code>|</code>竖直分隔符表示选择，例如”boy|girl”可以匹配”boy”或者”girl”。</p>
<h4 id="数量限定"><a href="#数量限定" class="headerlink" title="数量限定"></a>数量限定</h4><p>数量限定除了<code>*</code>,还有<code>+</code>加号,<code>?</code>问号,<code>.</code>点号，如果在一个模式中不加数量限定符则表示出现一次且仅出现一次：</p>
<p><code>+</code> 表示前面的字符必须出现至少一次(1次或多次)，例如，”goo+gle”,可以匹配”gooogle”,”goooogle”等；</p>
<p><code>?</code> 表示前面的字符最多出现一次(0次或1次)，例如，”colou?r”,可以匹配”color”或者”colour”;</p>
<p><code>*</code> 星号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，”0*42”可以匹配”42”、”042”、”0042”、”00042”等。</p>
<p><code>.</code> 匹配除“\n”之外的任何单个字符。例如，“0.42”可以匹配”0i42”、”0w42”、”0142”等。</p>
<h4 id="范围和优先级"><a href="#范围和优先级" class="headerlink" title="范围和优先级"></a>范围和优先级</h4><p><code>()</code>圆括号可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。例如，”gr(a|e)y”等价于”gray|grey”，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），”(grand)?father”匹配father和grandfather（这里体验了范围，?将圆括号内容作为一个整体匹配）。</p>
<h4 id="语法（部分）"><a href="#语法（部分）" class="headerlink" title="语法（部分）"></a>语法（部分）</h4><p>正则表达式有多种不同的风格，下面列举一些常用的作为<code>PCRE</code>子集的适用于<code>perl</code>和<code>python</code>编程语言及<code>grep</code>或<code>egrep</code>的正则表达式匹配规则</p>
<blockquote>
<p><code>PCRE</code>（Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式）是一个用<code>C语言</code>编写的正则表达式函数库，由菲利普.海泽(Philip Hazel)编写。<code>PCRE</code>是一个轻量级的函数库，比<code>Boost</code>之类的正则表达式库小得多。<code>PCRE</code>十分易用，同时功能也很强大，性能超过了<code>POSIX</code>正则表达式库和一些经典的正则表达式库。</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\”匹配“\”而“(”则匹配“(”。</td>
</tr>
<tr>
<td><code>^</code></td>
<td>匹配输入字符串的开始位置。</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配输入字符串的结束位置。</td>
</tr>
<tr>
<td><code>\&lt;</code></td>
<td>表示词首。 例如<code>\&lt;abc</code>表示以<code>abc</code>为首的词。</td>
</tr>
<tr>
<td><code>\&gt;</code></td>
<td>表示词尾。 例如<code>abc\&gt;</code>表示以<code>abc</code>结尾的词。</td>
</tr>
<tr>
<td><code>{n}</code></td>
<td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>
</tr>
<tr>
<td><code>{n,}</code></td>
<td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>
</tr>
<tr>
<td><code>{n,m}</code></td>
<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td><code>*</code></td>
<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“z”、“zo”以及“zoo”。`</em>`等价于{0,}。</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>当该字符紧跟在任何一个其他限制符（<code>*,+,?，{n}，{n,}，{n,m}</code>）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“(.｜\n)”的模式。</td>
</tr>
<tr>
<td><code>(pattern)</code></td>
<td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“(”或“)”。</td>
</tr>
<tr>
<td><code>x｜y</code></td>
<td>匹配x或y。例如，“z｜food”能匹配“z”或“food”。“(z｜f)ood”则匹配“zood”或“food”。</td>
</tr>
<tr>
<td><code>[xyz]</code></td>
<td>字符集合（character class）。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。其中特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。</td>
</tr>
<tr>
<td><code>[^xyz]</code></td>
<td>排除型（negate）字符集合。匹配未列出的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td>
</tr>
<tr>
<td><code>[^a-z]</code></td>
<td>排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
</tbody>
</table>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>优先级为从上到下从左到右，依次降低：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>转义符</td>
</tr>
<tr>
<td><code>(), (?:), (?=), []</code></td>
<td>括号和中括号</td>
</tr>
<tr>
<td><code>*、+、?、{n}、{n,}、{n,m}</code></td>
<td>限定符</td>
</tr>
<tr>
<td><code>^、$、\任何元字符</code></td>
<td>定位点和序列</td>
</tr>
<tr>
<td><code>｜</code></td>
<td>选择</td>
</tr>
</tbody>
</table>
<h4 id="正则表达式思维导图"><a href="#正则表达式思维导图" class="headerlink" title="正则表达式思维导图"></a>正则表达式思维导图</h4><p><img src="/uploads/in-post/linux_basic/RegularExpression.png" alt="regex"></p>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础学习</title>
    <url>/2016/06/20/2016-06-20-linux-basic/</url>
    <content><![CDATA[<blockquote>
<p>“Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。”</p>
</blockquote>
<h3 id="Linux系统简介"><a href="#Linux系统简介" class="headerlink" title="Linux系统简介"></a>Linux系统简介</h3><p>Linux是一个开源的免费操作系统，如下图所示，Linux就是<code>内核</code>与<code>系统调用</code>接口那两层。</p>
<p><img src="/uploads/in-post/linux_basic/os_level.png" alt="操作系统的角色"></p>
<p>而平常我们使用的应用程序一般都是运行在操作系统之上的，如qq，浏览器，文本编辑器等。</p>
<a id="more"></a>
<h4 id="Linux之前Unix的历史"><a href="#Linux之前Unix的历史" class="headerlink" title="Linux之前Unix的历史"></a>Linux之前Unix的历史</h4><p>早在Linux出现之前20年，就已经有一个相当稳定而成熟的操作系统<code>Unix</code>，那么<code>Unix</code>又是如何诞生的呢？</p>
<ul>
<li>1969年以前，Bell实验室、MIT、GE（通用电气公司）的<code>Multics</code>系统</li>
</ul>
<blockquote>
<p>当时的输入设备只有卡片阅读机，输出设备只有打印机，因此如果要测试某个程序，则需要将读卡纸插入卡片机，如果有错误，还需要重新来过。</p>
</blockquote>
<blockquote>
<p>在一个学校里，主机只有一台，如果有多人使用，就需要等待，20世纪60年代初，MIT开发了分时操作系统，让大型主机可以通过提供多个终端机（Terminal）以连入主机</p>
</blockquote>
<blockquote>
<p>1965年前后，Bell、MIT、GE共同发起了Multiplexed Information and Computing Service项目，以使大型主机可以同时提供300台以上的终端连接使用，但由于资金短缺，项目进度落后，造成了失败。</p>
</blockquote>
<ul>
<li>1969年，Ken Thompson的小型File Server System</li>
</ul>
<blockquote>
<p>仅仅用4个星期，他就以汇编语言写了一组内核程序， 同时包括一些内核工具程序，以及一个小的文件系统，这个系统就是Unix系统的原型。Thompson将Multics系统简化了不少，同实验室的朋友戏称这个系统为Unics。</p>
</blockquote>
<blockquote>
<p>这个文件系统有两个重要的概念：① 所有的程序或系统装置都是文件；② 不管构件编辑器还是附属文件，所写的程序只有一个目的，就是有效的完成目标。</p>
</blockquote>
<ul>
<li>1973年，Unix正式诞生，Ritchie等人以C语言写出第一个正式Unix内核</li>
</ul>
<blockquote>
<p>Thompson的操作系统由于其易用性，在贝尔实验室内部广为流传，但由于Unics是汇编语言写的，对于硬件有依赖性，所以他和Ritchie合作想将Unics用高级的程序语言来编写。当时现成的高级语言有B语言，但编译出来的内核性能不好。Ritchie和Thompson将B语言重新改写为C语言，再用C语言改写和编译Unics内核，发行出了Unix正式版本。而由于是C语言改写的内核，Unix很容易被移植到不同机器上。</p>
</blockquote>
<ul>
<li>1977年，重要的Unix分支——BSD诞生</li>
</ul>
<blockquote>
<p>1973年以后，Unix与学术界开始了合作开发，Berkeley大学的Bill Joy取得Unix内核源码后，将其改编，命名为Berkeley Software Distribution（即BSD），Bill Joy也是Sun公司的创办者</p>
</blockquote>
<ul>
<li>1979年，重要的System V架构与版权声明</li>
</ul>
<blockquote>
<p>早期的Unix只能与服务器（Server）或者大型工作站（Workstation）画上等号。而1979年AT&amp;T推出的System V第七版Unix，可以支持x86架构的个人计算机系统。但为了收回Unix版权，增加了”不可对学生提供源码”的严格限制。</p>
</blockquote>
<ul>
<li>1984年之一， x86架构的Minix操作系统诞生</li>
</ul>
<blockquote>
<p>Andrew Tanenbaum（谭宁邦）教授，完全不看Unix源码，自己动手写了Minix这个Unix Like的内核程序，专门用于教学。</p>
</blockquote>
<ul>
<li>1984年之二，GNU项目与FSF基金会成立</li>
</ul>
<blockquote>
<p>Richard Mathew Stallman在1984年发起GNU项目，目的是创建一个自由、开放的Unix操作系统（Free Unix）。他从开发Unix可运行的小程序开始，开发了GCC、Emacs、Bash Shell、GLIBC等软件，打开了GNU项目的知名度，并成立了自由软件基金会</p>
</blockquote>
<ul>
<li>1985 年，GNU的通用公共许可证</li>
</ul>
<blockquote>
<p>为了避免 GNU 开发的自由软件被其他人用作专利软件，因此创建了<code>通用公共许可证</code>（General Public License， GPL），并称呼他为CopyLeft。</p>
</blockquote>
<ul>
<li>1988年， 图形接口XFree86项目</li>
</ul>
<blockquote>
<p>由于GUI的需求日益增加，MIT和其他第三方发布了X Window System，并成立了XFree86这个组织。</p>
</blockquote>
<ul>
<li>1991年，芬兰大学生Linus Torvalds基于bash，gcc开发了Intel 386机器上的内核程序</li>
</ul>
<p>下面附上Unix系统的家族族谱</p>
<p><img src="/uploads/in-post/linux_basic/Unix_family.png" alt="Unix家族族谱"></p>
<h4 id="Linux的内核版本"><a href="#Linux的内核版本" class="headerlink" title="Linux的内核版本"></a>Linux的内核版本</h4><p>Linux的内核版本号类似于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">4<span class="selector-class">.3</span><span class="selector-class">.1-42</span><span class="selector-class">.e15</span></span><br><span class="line">主版本.次版本.释出版本<span class="selector-tag">-</span>修改版本</span><br></pre></td></tr></table></figure>
<p>由于Linux的内核开发者太多，Linux内核经常变动。所以托瓦茨将内核的开发趋势分为两股，并根据两个内核的开发分别给予不同的内核编号：</p>
<ul>
<li><code>主、次版本为奇数</code>：开发中版本（development）</li>
</ul>
<blockquote>
<p>如4.1.xx，这种内核版本主要用在测试与开发新功能，所以通常这种版本仅有内核开发工程师会使用</p>
</blockquote>
<ul>
<li><code>主、次版本为偶数</code>：稳定版本（stable）</li>
</ul>
<blockquote>
<p>如4.2.xx，等到内核功能开发成熟后会加到这类的版本中，主要用在一般家庭计算机及企业版本中。</p>
</blockquote>
<h4 id="Linux的特色"><a href="#Linux的特色" class="headerlink" title="Linux的特色"></a>Linux的特色</h4><ul>
<li><p>自由与开放的使用与学习环境</p>
</li>
<li><p>配置需求低廉</p>
</li>
<li><p>内核功能强大而稳定</p>
</li>
<li><p>独立作业</p>
</li>
</ul>
<h4 id="Linux的优缺点"><a href="#Linux的优缺点" class="headerlink" title="Linux的优缺点"></a>Linux的优缺点</h4><p><strong>优点</strong>：</p>
<ul>
<li><p>稳定的系统</p>
</li>
<li><p>免费或少许费用</p>
</li>
<li><p>安全性、漏洞的快速修补</p>
</li>
<li><p>多任务、多用户</p>
</li>
<li><p>用户与用户组的规划</p>
</li>
<li><p>相对比较不耗资源的系统</p>
</li>
<li><p>适合需要小内核程序的嵌入式系统</p>
</li>
<li><p>整合度佳且多样的图形用户界面</p>
</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li><p>没有特定的支持厂商</p>
</li>
<li><p>游戏的支持度不足</p>
</li>
<li><p>专业软件的支持度不足</p>
</li>
</ul>
<h3 id="基本概念及操作"><a href="#基本概念及操作" class="headerlink" title="基本概念及操作"></a>基本概念及操作</h3><h4 id="Linux桌面环境介绍"><a href="#Linux桌面环境介绍" class="headerlink" title="Linux桌面环境介绍"></a>Linux桌面环境介绍</h4><p>相对于现在的<code>Windows</code>系统，<code>Unix/Linux</code>本身是没有图形界面的，我们通常在<code>Unix/Linux</code>发行版上看到的图形界面实际都只是运行在Linux系统之上的软件。大家熟知的桌面环境有KDE，GNOME，XFCE，LXDE等，用户可以根据自己的需要安装喜欢的桌面环境，甚至定制桌面。</p>
<p><img src="/uploads/in-post/linux_basic/linux_GUI.png" alt="Unix/Linux的GUI架构"></p>
<h4 id="终端（Terminal）"><a href="#终端（Terminal）" class="headerlink" title="终端（Terminal）"></a>终端（Terminal）</h4><p>在使用<code>Linux</code>系统时，我们并不是直接与计算机系统进行交互，而是通过一个叫做<code>Shell</code>的中间程序来完成。<code>Shell</code>的中文含义是<code>壳</code>，可以理解为包裹在计算机内核外的软件，隐藏了操作系统底层的实现细节，他可以解析我们的命令，并将其转化为计算机可以看懂的字段，将命令交给计算机运行。在<code>Unix/Linux</code>中比较流行的常见的<code>Shell</code>有<code>bash</code>，<code>zsh</code>，<code>ksh</code>，<code>csh</code>等。为了提供一个可以接受用户输入并能够显示输出的窗口，Linux系统在图形界面下提供了一个叫做终端模拟器（Terminal）的程序。在MAC系统上推荐使用的Terminal为<code>iTerm</code>，Linux系统上推荐使用的Terminal为<code>Guake</code>。</p>
<h4 id="Terminal命令行"><a href="#Terminal命令行" class="headerlink" title="Terminal命令行"></a>Terminal命令行</h4><h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><ul>
<li><p>[Tab] 使用<code>Tab</code>键可以对命令进行快速补全</p>
</li>
<li><p>[Ctrl+c] 使用<code>Ctrl+c</code>可以强行终止当前运行的程序</p>
</li>
<li><p>[Ctrl+a] 使用<code>Ctrl+a</code>可以将光标移至输入行的头部，相当于<code>Home</code>键</p>
</li>
<li><p>[Ctrl+e] 使用<code>Ctrl+e</code>可以将光标移至输入行的尾部，相当于<code>End</code>键</p>
</li>
<li><p>[Ctrl+k] 使用<code>Ctrl+k</code>可以删除从光标所在位置到行尾的所有字符</p>
</li>
</ul>
<h5 id="历史输入命令"><a href="#历史输入命令" class="headerlink" title="历史输入命令"></a>历史输入命令</h5><ul>
<li><p>⬆️  方向键的<code>上</code>键，可以快速查阅输入过的上一条命令</p>
</li>
<li><p>⬇️  方向键的<code>下</code>键，可以与<code>上</code>键在输入过的命令间进行切换</p>
</li>
<li><p>order + ⬆️  输入部分命令后按<code>上</code>键，可以调出上一个包含该order字符的命令</p>
</li>
</ul>
<h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><ul>
<li><p>*  匹配 0 或多个字符</p>
</li>
<li><p>?  匹配任意一个字符</p>
</li>
<li><p>[list]  匹配<code>list</code>中的任意单一字符，如[abc]，意为匹配a或b或c</p>
</li>
<li><p>[!list]  匹配除<code>list</code>中的任意单一字符以外的字符，如[!abc]，意为不匹配a或b或c</p>
</li>
<li><p>[c1-c2]  匹配<code>c1-c2</code>中的任意单一字符 如[0-9]，意为匹配数字0到9任意数字</p>
</li>
<li><p>{s1,s2,…}  匹配<code>s1</code>或<code>s2</code>(或更多)其一字符串</p>
</li>
<li><p>{c1..c2}  匹配<code>c1-c2</code>中全部字符 如{1..10}</p>
</li>
</ul>
<h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3><p><code>Linux</code>是一个可以实现多用户登陆的操作系统，比如“admin”和“visitor”都可以同时登陆同一台主机，他们共享一些主机的资源，但他们也分别有自己的用户空间，用于存放各自的文件。但实际上他们的文件都是放在同一个物理磁盘上的甚至同一个逻辑分区或者目录里，但是由于<code>Linux</code>的<code>用户管理</code>和<code>权限机制</code>，不同用户不可以轻易地查看、修改彼此的文件。</p>
<h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><p>打开终端，输入命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">who am i</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/who_am_i.png" alt="who am i"></p>
<p>可以看到，输入的第一列表示当前伪终端的用户的用户名（要查看当前登录用户的用户名，去掉空格直接使用<code>whoami</code>即可），第二列的<code>pts/0</code>中<code>pts</code>表示伪终端，所谓伪是相对于<code>/dev/tty</code>设备而言的，<code>pts/0</code>后面那个数字就表示打开的伪终端序号，第三列则表示当前伪终端的启动时间。</p>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p><code>Linux</code>系统中，<code>root</code>账户拥有整个系统最高的权限，可以对所有账户进行操作。</p>
<blockquote>
<p><code>root</code>权限，系统权限的一种，与<code>SYSTEM</code>权限可以理解成一个概念，但高于<code>Administrator</code>权限，<code>root</code>是<code>Linux</code>和<code>Unix</code>系统中的超级管理员用户帐户，该帐户拥有整个系统至高无上的权力，所有对象他都可以操作，所以很多黑客在入侵系统的时候，都要把权限提升到<code>root</code>权限，获得<code>root</code>权限之后就意味着已经获得了手机的最高权限，这时候你可以对手机中的任何文件（包括系统文件）执行所有增、删、改、查的操作</p>
</blockquote>
<p>一般登录系统时都是以普通账户的身份登录的，创建用户需要用到<code>root</code>权限，使用<code>root</code>权限有两种方式，一种是用<code>root</code>用户登录进行操作，另一种是使用<code>sudo</code>命令。</p>
<p><strong>su，su - 与 sudo</strong></p>
<p><code>su &lt;user&gt;</code>可以切换到用户user，执行时需要输入目标用户的密码，<code>sudo &lt;cmd&gt;</code>可以以特权权限运行cmd命令，需要当前用户属于<code>sudo</code>组，且需要输入当前用户密码。<code>su - &lt;user&gt;</code>命令也是切换用户，同时环境变量也会跟着改变成目标用户的环境变量。</p>
<p>利用<code>sudo</code>命令创建一个名为<code>visitor</code>的用户：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sudo</span> <span class="keyword">adduser </span>visitor</span><br></pre></td></tr></table></figure>
<p>系统会创建用户，并生成相应的<code>home</code>目录，如果不想生成目录，请使用<code>useradd</code>命令。</p>
<p>使用命令<code>su -l visitor</code>可以切换到<code>visitor</code>用户并将目录切换到其根目录。</p>
<p><img src="/uploads/in-post/linux_basic/add_user.png" alt="add user"></p>
<p>退出当前用户使用命令<code>exit</code>或者使用快捷键<code>Ctrl+d</code>。</p>
<h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p>在<code>Linux</code>中每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。</p>
<p><strong>查看自己所在用户组</strong></p>
<ul>
<li>使用<code>groups</code>命令</li>
</ul>
<p><img src="/uploads/in-post/linux_basic/groups_visitor.png" alt="groups"></p>
<p>其中冒号之前表示用户，后面表示该用户所属的用户组。这里可以看到<code>visitor</code>用户属于<code>visitor</code>用户组，每次新建用户如果不指定用户组的话，默认会自动创建一个与用户名相同的用户组（差不多就相当于家长的意思，或者说是老总）。默认情况下在sudo用户组里的可以使用sudo命令获得root权限。</p>
<ul>
<li>查看<code>/etc/group</code>文件</li>
</ul>
<p><img src="/uploads/in-post/linux_basic/etc_group.png" alt="groups"></p>
<p><code>/etc/group</code>的内容包括用户组:用户组口令:GID:该用户组所包含的用户，每个用户组一条记录。格式如下：</p>
<blockquote>
<p>group_name:password:GID:user_list</p>
</blockquote>
<p><code>password</code>字段为一个<code>x</code>，表示密码不可见。</p>
<p><strong>将其他用户加入sudo组</strong></p>
<p>默认情况下新创建的用户是不具有<code>root</code>权限的，也不在<code>sudo</code>用户组，可以让其加入<code>sudo</code>用户组从而获取<code>root</code>权限。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">su</span> - <span class="keyword">l</span> visitor</span><br><span class="line">sudo <span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/not_in_sudo.png" alt="not in sudo list"></p>
<p>如上述提示，<code>visitor</code>用户不在<code>sudoers</code>文件中，如果想让<code>visitor</code>具有s<code>udo</code>权限，需要将其添加到<code>sudo</code>用户组</p>
<p>使用<code>usermod</code>命令可以为用户添加用户组，同样使用该命令你必需有<code>root</code>权限，你可以直接使用<code>root</code>用户为其它用户添加用户组，或者用其它已经在<code>sudo</code>用户组的用户使用<code>sudo</code>命令获取权限来执行该命令。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo usermod -G sudo visitor</span></span><br></pre></td></tr></table></figure>
<p>上述命令将<code>visitor</code>用户添加到了<code>sudo</code>组中，可以使用<code>sudo</code>命令获取<code>root</code>权限。</p>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>想要删除用户，需要使用命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo userdel -rf visitor</span></span><br></pre></td></tr></table></figure>
<h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><h4 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h4><p>使用<code>ls -l</code>命令列出文件。</p>
<p><img src="/uploads/in-post/linux_basic/ls_l.png" alt="ls"></p>
<p>每个文件名之前都有一段参数，这些参数的含义如下图：</p>
<p><img src="/uploads/in-post/linux_basic/ls_desc.png" alt="ls desc"></p>
<ul>
<li>文件类型</li>
</ul>
<p>文件类型，分为<code>设备文件</code>（/dev目录下有各种设备文件）<code>socket</code>（网络套接字），<code>pipe</code>(管道)，<code>软链接文件</code>，<code>普通文件</code>和<code>目录</code>这几种。</p>
<ul>
<li>文件权限</li>
</ul>
<p>读权限，表示你可以使用<code>tail &lt;file name&gt;</code>之类的命令来读取某个文件的内容，用<code>r</code>表示。</p>
<p>写权限，表示你可以编辑和修改某个文件，用<code>w</code>表示。</p>
<p>执行权限，通常指可以运行的二进制程序文件或者脚本文件，用<code>x</code>表示。</p>
<p>文件类型和权限由<code>10</code>位构成，第一位表示文件的类型，后九位表示文件权限，2-4位表示拥有者权限，5-7位表示用户组权限，8-10位表示其他用户权限，<code>rwx</code>表示可读可写可执行，<code>---</code>表示不可读不可写不可执行，拥有那某个字母表示拥有该字母对应的权限。</p>
<p><img src="/uploads/in-post/linux_basic/ls_type.png" alt="ls type"></p>
<p>拥有者权限表示文件创建者对该文件拥有的权限，用户组权限表示本组用户对该文件所拥有的权限，其他用户权限则表示非创建者和用户组的所有其他用户对该文件拥有的权限。</p>
<ul>
<li>链接数</li>
</ul>
<p>链接到该文件所在的<code>inode</code>结点的文件名数目。</p>
<ul>
<li>文件大小</li>
</ul>
<p>以<code>inode</code>结点大小为单位来表示的文件大小，可以使用<code>ls -lh</code>来更直观的查看文件的大小。</p>
<p><img src="/uploads/in-post/linux_basic/ls_lh.png" alt="ls lh"></p>
<h4 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h4><p>用<code>visitor</code>用户创建一个文件。</p>
<p><img src="/uploads/in-post/linux_basic/chown_ls.png" alt="chown ls"></p>
<p>然后切换回<code>root</code>用户修改文件所有者。</p>
<p><img src="/uploads/in-post/linux_basic/chown.png" alt="chown"></p>
<p>发现文件的所有者变成了<code>root</code>用户。</p>
<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p>如果想让自己创建的文件不能被其他用户读、写、执行，需要修改文件的相应权限。共有两种方法进行修改：</p>
<ul>
<li>二进制数字表示</li>
</ul>
<p>如4.1.所述，文件权限由后9位表示，每3位为一组，表示不同类型用户拥有的权限，可以将<code>rwx</code>转化为对应的二进制数字：</p>
<p><img src="/uploads/in-post/linux_basic/binary_present.png" alt="binary present"></p>
<p>简单来说，<code>r</code>对应数字<code>4</code>，<code>w</code>对应数字<code>2</code>，<code>x</code>对应数字<code>1</code>。</p>
<p><code>rwx</code>对应数字为4+2+1 = 7，<code>rw-</code>对应数字为4+2+0 = 6，以此类推。</p>
<p>修改文件权限，需要使用<code>chmod</code>命令：</p>
<p><img src="/uploads/in-post/linux_basic/chmod.png" alt="chmod"></p>
<p>修改权限后，其他用户就不能读取该文件了：</p>
<p><img src="/uploads/in-post/linux_basic/chmod_can_not_read.png" alt="chmod can not read"></p>
<ul>
<li><code>+-</code>符号表示</li>
</ul>
<p>利用下面的命令，可以达到上述同样的效果</p>
<p><img src="/uploads/in-post/linux_basic/chmod_rwx.png" alt="chmod rwx"></p>
<p><code>g</code>，<code>o</code>，<code>u</code>分别表示<code>group</code>，<code>others</code>，<code>user</code>。</p>
<p><code>+</code>，<code>-</code>分别表示增加或者删除相应的权限。</p>
<h3 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h3><p><code>Unix</code>是以目录为主的，<code>Linux</code>也继承了这一优良特性。<code>Linux</code>是以树形目录结构的形式来构建整个系统的，可以理解为一个用户可操作系统的骨架。虽然本质上无论是目录结构还是操作系统内核都是存储在磁盘上的，但从逻辑上来说<code>Linux</code>的磁盘是挂载在目录上的，每一个目录不仅能使用本地磁盘分区的文件系统，也可以使用网络上的文件系统。</p>
<h4 id="FHS标准"><a href="#FHS标准" class="headerlink" title="FHS标准"></a>FHS标准</h4><p>在早期的<code>Unix</code>系统中，各个厂家各自定义了自己的<code>Unix</code>系统的文件系统构成，比较混乱，而<code>Linux</code>为了避免这个问题，对文件系统进行了标准化的活动，推出了<code>FHS</code>标准，2004年1月19日发行了最新版本<a href="http://refspecs.linuxfoundation.org/FHS_2.3/fhs-2.3.pdf" target="_blank" rel="noopener">FHS标准2.3</a>。</p>
<blockquote>
<p><code>FHS</code>（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数<code>Linux</code>版本采用这种文件组织形式，<code>FHS</code>定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。</p>
</blockquote>
<p><code>FHS</code>定义了两层规范，第一层是，<code>/</code>下面的各个目录应该要放什么文件数据，例如<code>/etc</code>应该要放置设置文件，<code>/bin</code>与<code>/sbin</code>则应该要放置可执行文件等等。</p>
<p>第二层则是针对<code>/usr</code>及<code>/var</code>这两个目录的子目录来定义。例如<code>/var/log</code>放置系统登录文件、<code>/usr/share</code>放置共享数据等等。</p>
<p><code>FHS</code>依据文件系统使用的频繁与否以及是否允许用户随意改动，将目录定义为四种交互作用的形态:</p>
<p><img src="/uploads/in-post/linux_basic/FHS.png" alt></p>
<p><strong><code>根目录</code>（/）含义*</strong>：</p>
<p>根目录是整个系统最重要的目录，因为不但所有的目录都是由根目录衍生出来的，同时，根目录也与开机、还原、系统修复等操作有关。</p>
<p><code>FHS</code>建议：根目录所在的分区越小，系统性能就越好，根目录所在的文件系统也较不容易发生问题</p>
<p>以下是重要目录放置的文件内容：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置文件内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>/bin</td>
<td>放置一些在<span style="COLOR: #ff0000"><strong>单用户维护模式下还能被操作的命令</strong></span>，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等命令</td>
</tr>
<tr>
<td>/boot</td>
<td>放置开机会使用到的文件，包括<span style="COLOR: #ff0000"><strong>Linux内核文件以及开机菜单与开机所需配置文件</strong></span>等</td>
</tr>
<tr>
<td>/dev</td>
<td>以文件形式存放<strong><span style="COLOR: #ff0000">任何设备与接口设备</span></strong>，比较重要的文件：/dev/null, /dev/zero, /dev/tty, /dev/lp*, /dev/hd*, /dev/sd*等</td>
</tr>
<tr>
<td>/etc</td>
<td>系统主要的配置文件<strong><span style="COLOR: #ff0000">几乎</span></strong>都放置在这个目录内。FHS建议：不要将可执行文件放到这个目录，比较重要的文件：/etc/inittab, /etc/init.d, /etc/modprobe.conf, /etc/X11, /etc/sysconfig等</td>
</tr>
<tr>
<td>/home</td>
<td>系统默认的用户主文件夹，～代表当前用户主文件夹</td>
</tr>
<tr>
<td>/lib</td>
<td>放置在开机时会用到的<strong><span style="COLOR: #ff0000">函数库</span></strong>，以及在/bin或/sbin下面的命令会调用的函数库，/lib/modules这个目录放置的驱动程序文件，尤其重要</td>
</tr>
<tr>
<td>/media</td>
<td>此目录下的文件都是可删除的设备，常见文件名：/media/cdrom</td>
</tr>
<tr>
<td>/mnt</td>
<td>用来暂时挂载某些额外设备</td>
</tr>
<tr>
<td>/opt</td>
<td>第三方软件放置的目录</td>
</tr>
<tr>
<td>/root</td>
<td>系统管理员的主文件夹，/root应该和根目录放在同一个分区中</td>
</tr>
<tr>
<td>/srv</td>
<td>存放网络服务所需取用的数据，如：www服务需要的网页数据就可以放置在/srv/www里面</td>
</tr>
<tr>
<td>/tmp</td>
<td>任何人都可以访问这个目录，这是用于暂时放置文件的地方，重要的数据<strong>都不可以</strong>放到这个目录里面，FHS建议：每次开机时都清空一下这个目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>放置了开机过程所需的命令，包括<strong><span style="COLOR: #ff0000">开机、修复、还原系统所需的命令</span></strong></td></tr></tbody></table>



<p>注意：</p>
<p>开机过程中，只有根目录会被挂载，其他分区则是在开机完成后才会持续进行挂载，所以在根目录下与开机相关的目录都<code>不能</code>与根目录放到<code>不同的分区</code>中。</p>
<p>从上表可以轻易得出，下列五个目录一定不可与根目录分开：</p>
<p>/etc—-配置文件</p>
<p>/bin—-重要执行文件</p>
<p>/dev—-所需要的设备文件</p>
<p>/lib—-执行文件所需要的函数库与内核所需的模块</p>
<p>/sbin—-重要的系统执行文件</p>
<h4 id="目录路径"><a href="#目录路径" class="headerlink" title="目录路径"></a>目录路径</h4><p><code>路径</code>是指某个目录或文件所在的位置，分为<code>绝对路径</code>和<code>相对路径</code>两种：</p>
<ul>
<li>绝对路径</li>
</ul>
<p>是以<code>根&quot;/&quot;</code>目录为起点的完整路径，以你所要到的目录为终点，表现形式如：<code>/usr/local</code>，表示根目录下的<code>usr</code>目录中的<code>local</code>目录。</p>
<ul>
<li>相对路径</li>
</ul>
<p>相对路径，是相对于当前目录的路径，相对路径是以当前目录<code>.</code>为起点，以所要到的目录为终点，表现形式如：<code>local/bin</code>。因为这个目录为 当前目录下的子目录，是可以省略这个<code>.</code>的；如果是当前目录的上一级目录，则需要使用<code>..</code>，比如你当前目录为<code>home</code>目录，根目录就应该表示为<code>../</code> ,表示当前目录（<code>home</code>目录）的上一级目录（<code>/</code>目录）。</p>
<p>使用<code>cd</code>命令可以切换目录，在<code>Linux</code>中，<code>.</code>表示当前目录，<code>..</code>表示上一级目录, <code>-</code>表示上一次所在目录，<code>～</code>通常表示当前用户的<code>home</code>目录。使用<code>pwd</code>命令可以获取当前所在路径（绝对路径）。</p>
<p>进入上一级目录：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">cd</span></span> ..</span><br></pre></td></tr></table></figure>
<p>进入本用户<code>home</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<p>使用<code>pwd</code>获取当前路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/cd.png" alt="cd"></p>
<p>提示：在进行目录切换的过程中请多使用<code>Tab</code>键自动补全，可避免输入错误，连续按两次<code>Tab</code>可以显示全部候选结果。</p>
<h3 id="Linux文件的基本操作"><a href="#Linux文件的基本操作" class="headerlink" title="Linux文件的基本操作"></a>Linux文件的基本操作</h3><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><ul>
<li>新建空白文件</li>
</ul>
<p>使用<code>touch</code>命令创建空白文件，可以创建一个不会覆盖已有同名文件的空白文件。</p>
<ul>
<li>新建有预定内容的文件</li>
</ul>
<p>使用<code>echo &quot;content&quot; &gt; filename</code>命令，可以创建一个拥有<code>content</code>内容的名为<code>filename</code>的文件。</p>
<ul>
<li>新建目录</li>
</ul>
<p>使用<code>mkdir</code>命令可以创建一个空白目录，使用<code>-p</code>参数可以同时创建父目录。</p>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul>
<li>复制文件</li>
</ul>
<p>使用<code>cp</code>命令可以复制一个文件到指定目录。</p>
<ul>
<li>复制目录</li>
</ul>
<p>使用<code>cp -r</code>或<code>cp -R</code>命令，可以递归复制目录及其中的文件到指定目录。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>删除文件</li>
</ul>
<p>使用<code>rm</code>命令，可以删除一个文件。使用参数<code>-f</code>可以强制删除文件。</p>
<ul>
<li>删除目录</li>
</ul>
<p>使用<code>rm -r</code>命令，可以删除一个目录。</p>
<h4 id="移动文件与文件重命名"><a href="#移动文件与文件重命名" class="headerlink" title="移动文件与文件重命名"></a>移动文件与文件重命名</h4><ul>
<li>移动文件</li>
</ul>
<p>使用<code>mv</code>命令可以移动文件，使用方法为<code>mv 源文件 目的目录</code>。</p>
<ul>
<li>重命名文件</li>
</ul>
<p>使用<code>mv</code>命令还可以重命名文件，使用方法为<code>mv 旧文件名 新文件名</code>。</p>
<ul>
<li>批量重命名</li>
</ul>
<p>使用<code>rename</code>命令可以通过<code>perl</code>正则表达式进行批量重命名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用通配符批量创建 5 个文件</span></span><br><span class="line">touch file&#123;1.<span class="string">.5</span>&#125;<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件</span></span><br><span class="line">rename 's/\<span class="string">.txt/</span>\<span class="string">.c/</span>' *<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个文件，文件名改为大写</span></span><br><span class="line">rename 'y/a-z/A-Z/' *<span class="string">.c</span></span><br></pre></td></tr></table></figure>
<p><code>rename</code>是先使用第二个参数的通配符匹配所有后缀为<code>.txt</code>的文件，然后使用第一个参数提供的正则表达式将匹配的这些文件的<code>.txt</code>后缀替换为<code>.c</code>。</p>
<h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ul>
<li>使用<code>cat</code>，<code>tac</code>和<code>nl</code>命令查看文件</li>
</ul>
<p>这三个命令都是用来打印文件内容到标准输出,其中<code>cat</code>为正序显示，<code>tac</code>倒序显示，<code>nl</code>添加行号并打印。</p>
<blockquote>
<p>标准输入输出：当我们执行一个<code>shell</code>命令行时通常会自动打开三个标准文件，即标准输入文件<code>stdin</code>，默认对应终端的键盘；标准输出文件<code>stdout</code>和标准错误输出文件<code>stderr</code>，这两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。</p>
</blockquote>
<p>比如我们要查看<code>/local</code>文件夹下的<code>test.txt</code>文件：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>
<p>可以加上参数<code>-n</code>显示行号：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> -<span class="keyword">n</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/cat.png" alt="cat"></p>
<p><code>nl</code>命令，添加行号并打印，是比<code>cat -n</code>更专业的行号打印命令。他有以下几个常用参数：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">-<span class="string">b :</span> 指定添加行号的方式，主要有两种：</span><br><span class="line">    -b <span class="string">a:</span>表示无论是否为空行，同样列出行号(<span class="string">"cat -n"</span>就是这种方式)</span><br><span class="line">    -b <span class="string">t:</span>只列出非空行的编号并列出（默认为这种方式）</span><br><span class="line">-<span class="string">n :</span> 设置行号的样式，主要有三种：</span><br><span class="line">    -n <span class="string">ln:</span>在行号字段最左端显示</span><br><span class="line">    -n <span class="string">rn:</span>在行号字段最右边显示，且不加 <span class="number">0</span></span><br><span class="line">    -n <span class="string">rz:</span>在行号字段最右边显示，且加 <span class="number">0</span></span><br><span class="line">-<span class="string">w :</span> 行号字段占用的位数(默认为<span class="number">6</span>位)</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/nl.png" alt="nl"></p>
<p>以上三个命令都是在当前窗口显示文本，一屏显示不完文本的内容，需要用鼠标拖动滚动条或者滑动滚轮才能继续往下翻页，如果能够用键盘直接进行翻页操作的话会更加方便，这就需要使用下面的几个命令。</p>
<ul>
<li>使用<code>more</code>和<code>less</code>命令分页查看文件</li>
</ul>
<p>这两个命令都能够实现用键盘向下翻页的操作，其中<code>more</code>命令翻页到最后一行时会自动退出命令，而<code>less</code>的功能更加强大，他是基于<code>more</code>和<code>vi</code>开发的，会新打开一个页面显示文本内容，只要不按<code>q</code>推出，可以随意翻页。</p>
<p>比如我们要使用<code>more</code>命令查看一个单页放不下的<code>test.txt</code>文件：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">more</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/more.png" alt="more"></p>
<p>打开后默认只显示一屏内容，终端底部显示当前阅读的进度(百分比)，翻到尾行时命令会自动退出。可以使用<code>Enter</code>键向下滚动一行，使用<code>Space</code>键向下滚动一屏，按下<code>h</code>显示帮助，<code>q</code>退出。</p>
<p>如果我们使用<code>less</code>命令查看单页放不下德 <code>test.txt</code>：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">less</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/less.png" alt="less"></p>
<p>可以看到，翻到尾行时命令不会退出，而是显示<code>End</code>，表示已经到达了尾行。</p>
<ul>
<li>使用<code>head</code>和<code>tail</code>命令查看文件</li>
</ul>
<p>正如命令的名称，<code>head</code>命令只查看文件的头几行（默认为10行，不足10行则显示全部），<code>tail</code>命令只查看文件的尾几行。</p>
<p>两个命令的输入方式如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">head <span class="keyword">test</span>.txt</span><br><span class="line">head -n <span class="number">1</span> <span class="keyword">test</span>.txt</span><br><span class="line">tail <span class="keyword">test</span>.txt</span><br><span class="line">tail -n <span class="number">1</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/head_tail.png" alt="head tail"></p>
<p>关于<code>tail</code>命令，还有一个很实用的参数<code>-f</code>，这个参数可以实现不停地读取某个文件的内容并显示。让我们可以动态查看日志，起到实时监视的作用。</p>
<h4 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h4><p>我们可以使用<code>file</code>命令查看文件的类型：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/file.png" alt="file"></p>
<p>这表示<code>test.txt</code>是一个由ASCII编码的文本文件。</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>要了解<code>环境变量</code>，首先要了解<code>Shell变量</code>，所谓<code>变量</code>就是计算机中用于记录一个值（不一定是数值，也可以是字符或字符串）的符号，而这些符号将用于不同的运算处理中。通常变量与值是一对一的关系，可以通过表达式读取它的值赋值给其它变量，也可以直接指定数值赋值给任意变量。为了便于运算和处理，大部分的编程语言会区分变量的类型，用于分别记录数值、字符或者字符串等等数据类型。<code>Shell</code>中的变量也基本如此，有不同类型（但不用专门指定类型名），可以参与运算，有作用域限定。</p>
<blockquote>
<p>变量的作用域即变量的有效范围（比如一个函数中、一个源文件中或者全局范围），在该范围内只能有一个同名变量。一旦离开则该变量无效，如同不存在这个变量一般。</p>
</blockquote>
<ul>
<li>创建变量</li>
</ul>
<p>使用<code>declare</code>命令可以创建一个变量：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> tmp</span><br></pre></td></tr></table></figure>
<p>其实也可以不用<code>declare</code>预声明一个变量，直接用的时候创建即可。</p>
<p>使用<code>=</code>符号（不要加空格）赋值运算符可以为变量<code>tmp</code>赋值：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tmp</span>=nihao</span><br></pre></td></tr></table></figure>
<p>读取变量的值，使用<code>echo</code>命令和<code>$</code>符号（一定要加<code>$</code>符号，不然输出的是变量名而不是他的值）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$tmp</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/declare.png" alt="declare"></p>
<p>注意:关于变量名，并不是任何形式的变量名都是可用的，变量名只能是英文字母,数字或者下划线，且不能以数字作为开头。</p>
<h4 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h4><p><code>环境变量</code>就是作用域比自定义变量要大，如<code>Shell</code>的环境变量作用于自身和它的子进程。在所有的<code>Unix</code>和类<code>Unix</code>系统中，每个进程都有其各自的环境变量设置，且默认情况下，当一个进程被创建时，处理创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。<code>Shell</code>程序也作为一个进程运行在操作系统之上，而我们在<code>Shell</code>中运行的大部分命令都将以<code>Shell</code>的子进程的方式运行。</p>
<p><img src="/uploads/in-post/linux_basic/shell_env.png" alt="shell env"></p>
<p>通常我们会涉及到的环境变量有三种：</p>
<ul>
<li><p>当前<code>Shell</code>进程私有用户自定义变量，如上面我们创建的<code>tmp</code>变量，只在当前<code>Shell</code>中有效。</p>
</li>
<li><p><code>Shell</code>本身内建的变量。</p>
</li>
<li><p>从自定义变量导出的环境变量。</p>
</li>
</ul>
<p>也有三个与上述三种环境变量相关的命令，<code>set</code>，<code>env</code>，<code>export</code>。这三个命令很相似，都可以用于打印相关环境变量,区别在于涉及的是不同范围的环境变量，详见下表：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>set</code></td>
<td>显示当前<code>Shell</code>所有环境变量，包括其内建环境变量（与<code>Shell</code>外观等相关），用户自定义变量及导出的环境变量</td>
</tr>
<tr>
<td><code>env</code></td>
<td>显示与当前用户相关的环境变量，还可以让命令在指定环境中运行</td>
</tr>
<tr>
<td><code>export</code></td>
<td>显示从<code>Shell</code>中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量</td>
</tr>
</tbody>
</table>
<p><img src="/uploads/in-post/linux_basic/set_env.png" alt="set env"></p>
<p>关于环境变量，可以简单的理解成在当前进程的子进程是否有效，有效则为环境变量，否则不是。</p>
<p>注意：为了与普通变量区分，通常我们习惯将环境变量名设为大写。</p>
<h4 id="命令的查找路径与顺序"><a href="#命令的查找路径与顺序" class="headerlink" title="命令的查找路径与顺序"></a>命令的查找路径与顺序</h4><p>我们在<code>Shell</code>中输入一个命令，他是怎么找到相应的命令并执行的呢？答案是通过环境变量<code>PATH</code>来进行搜索的。</p>
<p>查看<code>PATH</code>环境变量的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/path.png" alt="path"></p>
<p>上面这些目录中放的都是可执行文件，当我们在<code>Shell</code>中执行一个命令时，系统就会按照<code>PATH</code>中设定的路径按照顺序依次到目录中去查找，如果存在同名的命令，则执行先找到的那个。</p>
<h4 id="添加自定义路径到PATH环境变量"><a href="#添加自定义路径到PATH环境变量" class="headerlink" title="添加自定义路径到PATH环境变量"></a>添加自定义路径到<code>PATH</code>环境变量</h4><p><code>PATH</code>环境变量中是以<code>:</code>作为路径的分隔符，我们可以这样添加自定义路径：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">PATH = <span class="variable">$PATH</span><span class="symbol">:/home/wen/bin</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>PATH</code>路径一定要使用绝对路径</p>
<p>但是给<code>PATH</code>环境变量追加了一个路径，它也只是在当前<code>Shell</code>有效，一旦退出终端，再打开就会发现失效了。有没有方法让添加的环境变量全局有效？或者每次启动<code>Shell</code>时自动执行上面添加自定义路径到<code>PATH</code>的命令？</p>
<p>在每个用户的<code>home</code>目录中有一个<code>Shell</code>每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。<code>zsh</code>的配置文件是<code>.zshrc</code>，相应<code>Bash</code>的配置文件为<code>.bashrc</code>。它们在<code>etc</code>下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。</p>
<p>我们可以简单的使用下面命令直接添加内容到.zshrc中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"PATH=<span class="variable">$PATH</span>:/home/wen/bin"</span> &gt;&gt; .zshrc</span><br></pre></td></tr></table></figure>
<p>上述命令中<code>&gt;&gt;</code>表示将标准输出以追加的方式重定向到一个文件中，注意前面用到的<code>&gt;</code>是以覆盖的方式重定向到一个文件中，使用的时候一定要注意分辨。在指定文件不存在的情况下都会创建新的文件。</p>
<p>或者使用<code>vi</code>或<code>vim</code>或其他文本编辑器打开<code>.zshrc</code>文件，找到<code>PATH</code>行，将内容添加进<code>PATH</code>的配置中。</p>
<h4 id="修改和删除已有变量"><a href="#修改和删除已有变量" class="headerlink" title="修改和删除已有变量"></a>修改和删除已有变量</h4><ul>
<li>变量修改</li>
</ul>
<p>变量的修改有以下几种方式：</p>
<table>
<thead>
<tr>
<th>变量设置方式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>${变量名#匹配字串}</code></td>
<td>从头向后开始匹配，删除符合匹配字串的最短数据</td>
</tr>
<tr>
<td><code>${变量名##匹配字串}</code></td>
<td>从头向后开始匹配，删除符合匹配字串的最长数据</td>
</tr>
<tr>
<td><code>${变量名%匹配字串}</code></td>
<td>从尾向前开始匹配，删除符合匹配字串的最短数据</td>
</tr>
<tr>
<td><code>${变量名%%匹配字串}</code></td>
<td>从尾向前开始匹配，删除符合匹配字串的最长数据</td>
</tr>
<tr>
<td><code>${变量名/旧的字串/新的字串}</code></td>
<td>将符合旧字串的第一个字串替换为新的字串</td>
</tr>
<tr>
<td><code>${变量名//旧的字串/新的字串}</code></td>
<td>将符合旧字串的全部字串替换为新的字串</td>
</tr>
</tbody>
</table>
<p>比如要修改我们前面添加到<code>PATH</code>的环境变量。为了避免操作失误导致命令找不到，我们先将<code>PATH</code>赋值给一个新的自定义变量<code>path</code>：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ path=$PATH</span><br><span class="line">$ echo $path</span><br><span class="line">$ path=$&#123;path<span class="string">%/home/</span>wen/bin&#125;</span><br><span class="line"><span class="comment"># 或使用通配符,*表示任意多个任意字符</span></span><br><span class="line">$ path=$&#123;path%*<span class="regexp">/bin&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>变量删除</li>
</ul>
<p>可以使用<code>unset</code>命令删除一个环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> tmp</span><br></pre></td></tr></table></figure>
<h4 id="如何让环境变量立即生效"><a href="#如何让环境变量立即生效" class="headerlink" title="如何让环境变量立即生效"></a>如何让环境变量立即生效</h4><p>我们在<code>Shell</code>中修改了一个配置脚本文件之后（比如<code>zsh</code>的配置文件<code>home</code>目录下的<code>.zshrc</code>），需要退出终端重新打开甚至重启主机之后其才能生效，我们可以使用<code>source</code>命令来让其立即生效，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>
<p><code>source</code>命令还有一个别名就是<code>.</code>，但后面的文件必须指定完整的绝对或相对路径名：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">. </span>./.zshrc</span><br></pre></td></tr></table></figure>
<p>第一个<code>.</code>表示<code>source</code>命令，第二个<code>.</code>表示当前目录。</p>
<h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><p>与搜索相关的命令常用的有如下几个<code>whereis</code>，<code>locate</code>，<code>which</code>，<code>find</code>。</p>
<h4 id="whereis简单快速"><a href="#whereis简单快速" class="headerlink" title="whereis简单快速"></a><code>whereis</code>简单快速</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/whereis.png" alt="whereis"></p>
<p><code>whereis</code>只能搜索<code>二进制文件</code>(-b)，<code>man帮助文件</code>(-m)和<code>源代码文件</code>(-s)。和<code>find</code>相比，<code>whereis</code>查找的速度非常快，这是因为<code>Linux</code>系统会将 系统内的所有文件都记录在一个数据库文件中，当使用<code>whereis</code>和下面即将介绍的<code>locate</code>时，会从数据库中查找数据，而不是像<code>find</code>命令那样，通过遍历硬盘来查找，效率自然会很高。但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用<code>whereis</code>和<code>locate</code>查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p>
<h4 id="locate快而全"><a href="#locate快而全" class="headerlink" title="locate快而全"></a><code>locate</code>快而全</h4><p><code>locate</code>让使用者可以很快速的搜寻档案系统内是否有指定的档案。其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。<code>locate</code>通过<code>/var/lib/mlocate/mlocate.db</code>数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行<code>updatedb</code>命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次<code>updatedb</code>命令。</p>
<p>它可以用来查找指定目录下的不同文件类型，如查找<code>/usr</code>下所有以<code>src</code>开头的文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">locate <span class="regexp">/usr/</span>src</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/locate.png" alt="locate"></p>
<p>注意：它不只是在<code>usr</code>目录下查找，还会自动递归子目录进行查找。</p>
<p>查找<code>/usr/share/</code>下所有<code>jpg</code>文件：</p>
<p><img src="/uploads/in-post/linux_basic/locate_jpg.png" alt="locate jpg"></p>
<p>注意：<code>*</code>号前面要添加反斜杠(<code>\</code>)转义，否则会无法找到。</p>
<p>如果想只统计数目可以加上<code>-c</code>参数，<code>-i</code>参数可以忽略大小写进行查找，<code>whereis</code>的<code>-b</code>,<code>-m</code>，<code>-s</code>同样可以使用。</p>
<h4 id="which小而精"><a href="#which小而精" class="headerlink" title="which小而精"></a><code>which</code>小而精</h4><p><code>which</code>本身是<code>Shell</code>内建的一个命令，我们通常使用<code>which</code>来确定是否安装了某个指定的软件，因为它只从<code>PATH</code>环境变量中执行的路径中去搜索命令。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">which</span> <span class="keyword">man</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/which.png" alt="which"></p>
<h4 id="find精而细"><a href="#find精而细" class="headerlink" title="find精而细"></a><code>find</code>精而细</h4><p><code>Linux</code>下<code>find</code>命令在目录结构中搜索文件，并执行指定的操作。<code>Linux</code>下<code>find</code>命令提供了相当多的查找条件，功能很强大。由于<code>find</code>具有强大的功能，所以它的选项也很多。即使系统中含有网络文件系统(NFS)，<code>find</code>命令在该文件系统中同样有效，只要你具有相应的权限。</p>
<p>在指定目录下搜索指定文件名的文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name <span class="string">'test.txt'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/find.png" alt="find"></p>
<p><code>find</code>命令的路径是作为第一个参数的， 基本命令格式为<code>find [path] [option] [action]</code>。</p>
<p>基本命令选项：</p>
<ul>
<li><code>-name</code>   按照文件名查找文件。</li>
<li><code>-perm</code>   按照文件权限来查找文件。</li>
<li><code>-prune</code>  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。</li>
<li><code>-user</code>   按照文件属主来查找文件。</li>
<li><code>-group</code>  按照文件所属的组来查找文件。</li>
<li><code>-nogroup</code>    查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。</li>
<li><code>-nouser</code>     查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。</li>
<li><code>-newer file1 ! file2</code>    查找更改时间比文件file1新但比文件file2旧的文件。</li>
<li><code>-type</code>   查找某一类型的文件，诸如：<ul>
<li><code>b</code> - 块设备文件。</li>
<li><code>d</code> - 目录。</li>
<li><code>c</code> - 字符设备文件。</li>
<li><code>p</code> - 管道文件。</li>
<li><code>l</code> - 符号链接文件。</li>
<li><code>f</code> - 普通文件。</li>
</ul>
</li>
</ul>
<p>与时间相关的命令参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-amin n</code></td>
<td>查找系统中最后N分钟访问的文件</td>
</tr>
<tr>
<td><code>-atime n</code></td>
<td>查找系统中最后n*24小时访问的文件</td>
</tr>
<tr>
<td><code>-cmin n</code></td>
<td>查找系统中最后N分钟被改变文件状态的文件</td>
</tr>
<tr>
<td><code>-ctime n</code></td>
<td>查找系统中最后n*24小时被改变文件状态的文件</td>
</tr>
<tr>
<td><code>-mmin n</code></td>
<td>查找系统中最后N分钟被改变文件数据的文件</td>
</tr>
<tr>
<td><code>-mtime n</code></td>
<td>查找系统中最后n*24小时被改变文件数据的文件</td>
</tr>
</tbody>
</table>
<p>下面以<code>-mtime</code>参数举例：</p>
<ul>
<li><code>-mtime n</code>: n为数字，表示为在n天之前的”一天之内“修改过的文件</li>
<li><code>-mtime +n</code>: 列出在n天之前（不包含n天本身）被修改过的文件</li>
<li><code>-mtime -n</code>: 列出在n天之前（包含n天本身）被修改过的文件</li>
</ul>
<p><img src="/uploads/in-post/linux_basic/find_time.png" alt="find time"></p>
<p>实例：</p>
<ul>
<li>查找指定时间内修改过的文件</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> -mtime -2</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/find_mtime.png" alt="find mtime"></p>
<p>查找<code>2 * 24</code>小时之内被修改过的文件。</p>
<ul>
<li>根据关键字查找</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> . -name <span class="string">"test.txt"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/find_name.png" alt="find name"></p>
<p>在当前目录查找文件名为<code>test.txt</code>的文件。</p>
<ul>
<li>按照目录或文件的权限查找文件</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> . -perm 765</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/find_perm.png" alt="find perm"></p>
<p>查找当前目录下权限为<code>765</code>的文件。</p>
<ul>
<li>按照类型查找</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> . -<span class="built_in">type</span> f -<span class="built_in">name</span> <span class="string">"*.xml"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/find_type.png" alt="find type"></p>
<p>查找当前目录下以<code>xml</code>结尾的普通文件。</p>
<ul>
<li>按照文件内容查找</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find</span> . -name <span class="string">"*.txt"</span> | xargs <span class="keyword">grep</span> <span class="string">"test*"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/find_grep.png" alt="find grep"></p>
<p>查找当前目录下含有<code>test</code>开头的所有<code>txt</code>文件。</p>
<h3 id="文件打包和解压缩"><a href="#文件打包和解压缩" class="headerlink" title="文件打包和解压缩"></a>文件打包和解压缩</h3><p>在<code>Linux</code>上常用的是<code>tar</code>工具，常用的压缩命令还有<code>compress</code>，<code>gzip</code>和<code>bzip2</code>等。</p>
<p>常用的命令如下：</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">compress filename       将文件压缩成.Z格式</span><br><span class="line"></span><br><span class="line">gzip filename           将文件压缩成.gz格式</span><br><span class="line"></span><br><span class="line">bzip2 filename          将文件压缩成.bz2格式</span><br><span class="line"></span><br><span class="line">以上三个命令 -d           将相应的文件解压缩</span><br><span class="line"></span><br><span class="line">tar dest source         打包压缩</span><br><span class="line"></span><br><span class="line">    -<span class="ruby">c                      归档文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -x                      压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -z                      gzip压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -j                      bzip2压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -v                      显示压缩或解压缩过程 v(view)</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">    -f                      使用档名</span></span><br></pre></td></tr></table></figure>
<p>实例：</p>
<p>tar -cvf /local/test.tar /local/test          只打包，不压缩</p>
<p>tar -zcvf /local/test.tar.gz /local/test      打包，并用gzip压缩</p>
<p>tar -jcvf /local/test.tar.bz2 /local/test     打包，并用bzip2压缩</p>
<p>tar -xvf /local/test.tar /local/test          只拆包</p>
<p>tar -zxvf /local/test.tar.gz /local/test      用gzip解压缩，并拆包</p>
<p>tar -jxvf /local/test.tar.bz2 /local/test     用bzip2解压缩，并拆包</p>
<h3 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h3><h4 id="查看磁盘和目录的容量"><a href="#查看磁盘和目录的容量" class="headerlink" title="查看磁盘和目录的容量"></a>查看磁盘和目录的容量</h4><ul>
<li>使用<code>df</code>命令查看磁盘的容量</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">df</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/df.png" alt="df"></p>
<p>一般使用情况下，我们更多只是关心<code>/dev/sda1</code>的内容。</p>
<p>物理主机上的<code>/dev/sda1</code>是对应着主机硬盘的分区，后面的数字表示分区号，数字前面的字母<code>a</code>表示第几块硬盘（也可能是可移动磁盘），你如果主机上有多块硬盘则可能还会出现<code>/dev/sdb</code>，<code>/dev/sdc</code>这些磁盘设备都会在<code>/dev</code>目录下以文件的存在形式。</p>
<p>我们还可以看到<code>1k-块</code>(1k-blocks)这个陌生的名词，它表示以磁盘块大小的方式显示容量，后面为相应的以块大小表示的已用和可用容量。</p>
<p>可以用参数<code>-h</code>转化为更为直观的方式：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">df -h</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/df_h.png" alt="df h"></p>
<ul>
<li>使用<code>du</code>命令查看目录的容量</li>
</ul>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 默认同样以 blocks 的大小展示</span></span><br><span class="line">du</span><br><span class="line"><span class="meta"># 加上`-h`参数，以更易读的方式展示</span></span><br><span class="line">du -h</span><br></pre></td></tr></table></figure>
<p><code>-d</code>参数指定查看目录的深度</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 只查看<span class="number">1</span>级目录的信息</span><br><span class="line">du -h -d <span class="number">0</span> ~</span><br><span class="line"># 查看<span class="number">2</span>级</span><br><span class="line">du -h -d <span class="number">1</span> ~</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/du.png" alt="du"></p>
<h3 id="命令执行顺序的控制"><a href="#命令执行顺序的控制" class="headerlink" title="命令执行顺序的控制"></a>命令执行顺序的控制</h3><h4 id="顺序执行多条命令"><a href="#顺序执行多条命令" class="headerlink" title="顺序执行多条命令"></a>顺序执行多条命令</h4><p>通常情况下，我们每次只能在终端输入一条命令，按下回车执行，执行完成后，我们再输入第二条命令，然后再按回车执行……</p>
<p>但是我们可能会遇到如下使用场景：我们需要使用<code>apt-get</code>安装一个软件，然后安装完成后立即运行安装的软件（或命令工具），又恰巧你的主机没有更新软件列表,那么你可能会有如下一系列操作：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line"><span class="comment"># 等待——————————然后输入下面的命令</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install software</span><br><span class="line"><span class="comment"># 等待——————————然后输入下面的命令</span></span><br><span class="line">software</span><br></pre></td></tr></table></figure>
<p>这样的输入方式比较浪费我们的时间，我们可能想要一次性输入完命令，并让系统自动运行。</p>
<p>简单的顺序执行可以使用<code>;</code>来完成：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update;sudo apt-<span class="builtin-name">get</span> install software;software</span><br><span class="line"><span class="comment"># 让它自己运行</span></span><br></pre></td></tr></table></figure>
<h4 id="有选择的执行命令"><a href="#有选择的执行命令" class="headerlink" title="有选择的执行命令"></a>有选择的执行命令</h4><p>如果自动顺序执行命令时，前面的命令执行不成功，而后面的命令又依赖于上一条命令的结果，那么就会造成花了时间，最终却得到一个错误的结果，而且有时候无法判断结果是否正确。此时我们需要能够有选择性的执行命令，比如上一条命令执行成功才继续下一条：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">which cowsay &amp;&amp; cowsay <span class="operator">-f</span> head<span class="operator">-in</span> ohch~</span><br></pre></td></tr></table></figure>
<p>如果没有安装<code>cowsay</code>，执行一次上述命令，会发现什么也没发生，如果安装了<code>cowsay</code>，会出现以下效果：</p>
<p><img src="/uploads/in-post/linux_basic/cowsay.png" alt="cowsay"></p>
<p>上面的<code>&amp;&amp;</code>就是用来实现选择性执行的，它表示如果前面的命令执行结果返回<code>0</code>则执行后面的，否则不执行，你可以从<code>$?</code>环境变量获取上一次命令的返回结果：</p>
<p><img src="/uploads/in-post/linux_basic/cowsay_echo.png" alt="cowsay echo"></p>
<p><code>&amp;&amp;</code>表示逻辑与，<code>||</code>表示逻辑或，<code>shell</code>可以用两个符号实现命令执行顺序的简单控制。<code>||</code>在这里就是与<code>&amp;&amp;</code>相反的控制效果，即当上一条命令执行结果为<code>≠0($?≠0)</code>时则执行它后面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> cowsay || <span class="built_in">echo</span> <span class="string">"cowsay not found"</span></span><br></pre></td></tr></table></figure>
<p>同时我们可以将<code>&amp;&amp;</code>命令和<code>||</code>命令综合起来进行使用，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> cowsay &amp;&amp; <span class="built_in">echo</span> <span class="string">"exist"</span> || <span class="built_in">echo</span> <span class="string">"not exist"</span></span><br></pre></td></tr></table></figure>
<p>上面命令运行的流程如下：</p>
<p><img src="/uploads/in-post/linux_basic/order_control.png" alt="order control"></p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p><code>管道</code>是一种通信机制，通常用于<code>进程</code>间的通信（也可通过socket进行网络通信），它表现出来的形式就是将前面每一个进程的输出(stdout)直接作为下一个进程的输入(stdin)。</p>
<p><code>管道</code>又分为<code>匿名管道</code>和<code>具名管道</code>。<code>具名管道</code>简单的说就是有名字的管道，通常只会在源程序中用到具名管道。我们在使用一些过滤程序时经常会用到的就是<code>匿名管道</code>，在命令行中由<code>|</code>分隔符表示。</p>
<h4 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h4><p>输入命令：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -al <span class="string">/etc</span></span><br></pre></td></tr></table></figure>
<p>上述命令结果很多，屏幕不能完全显示，可以使用管道命令：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -al <span class="string">/etc</span> | less</span><br></pre></td></tr></table></figure>
<p>会将前一个命令<code>ls</code>的输出传递给下一个命令<code>less</code>，然后可以进行<code>less</code>命令的操作。</p>
<h4 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h4><p><code>cut</code>命令可以将文件进行处理后输出：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出每行前五个字符（包含第五个）</span></span><br><span class="line">cut <span class="regexp">/etc/</span>passwd -c -<span class="number">5</span></span><br><span class="line"><span class="comment"># 输出每行前五个之后的字符（包含第五个）</span></span><br><span class="line">cut <span class="regexp">/etc/</span>passwd -c <span class="number">5</span>-</span><br><span class="line"><span class="comment"># 输出每行第五个字符</span></span><br><span class="line">cut <span class="regexp">/etc/</span>passwd -c <span class="number">5</span></span><br><span class="line"><span class="comment"># 输出每行2到5之间的字符（包含第五个）</span></span><br><span class="line">cut <span class="regexp">/etc/</span>passwd -c <span class="number">2</span>-<span class="number">5</span></span><br><span class="line"><span class="comment"># 将分隔符变为:分割出不同的field，并输出第1个和第2个field</span></span><br><span class="line">cut <span class="regexp">/etc/</span>passwd -d <span class="string">':'</span> -f <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="comment"># 将分隔符变为:分割出不同的field，并输出第1个到第4个field</span></span><br><span class="line">cut <span class="regexp">/etc/</span>passwd -d <span class="string">':'</span> -f <span class="number">1</span>-<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p><code>grep</code>命令是很强大的，也是相当常用的一个命令，它结合正则表达式可以实现很复杂却很高效的匹配和查找。</p>
<p><code>grep</code>命令的一般形式为：<code>grep</code> <code>[命令选项]</code> <code>用于匹配的表达式</code> <code>[文件]</code></p>
<p>例如，搜索当前目录下所有包含<code>test</code>的所有文件，并显示出现在文本中的行号：</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">grep -rnI <span class="string">"test"</span> .</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/grep.png" alt="grep"></p>
<p><code>-r</code>参数表示递归搜索子目录中的文件,<code>-n</code>表示打印匹配项行号，<code>-I</code>表示忽略二进制文件。</p>
<p>也可以在匹配字段中使用正则表达式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看环境变量中以<span class="string">"bin"</span>结尾的字符串</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> | grep <span class="string">".*bin$"</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/grep_export.png" alt="grep export"></p>
<h4 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h4><p><code>wc</code>命令用于统计并输出一个文件中行、单词和字节的数目：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wc <span class="regexp">/etc/</span>passwd</span><br><span class="line"><span class="comment"># 行数</span></span><br><span class="line">wc -l <span class="regexp">/etc/</span>passwd</span><br><span class="line"><span class="comment"># 单词数</span></span><br><span class="line">wc -w <span class="regexp">/etc/</span>passwd</span><br><span class="line"><span class="comment"># 字节数</span></span><br><span class="line">wc -c <span class="regexp">/etc/</span>passwd</span><br><span class="line"><span class="comment"># 字符数</span></span><br><span class="line">wc -m <span class="regexp">/etc/</span>passwd</span><br><span class="line"><span class="comment"># 最长行字节数</span></span><br><span class="line">wc -L <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/wc.png" alt="wc"></p>
<p>注意：对于西文字符来说，一个字符就是一个字节，但对于中文字符一个汉字是大于2个字节的，具体数目是由字符编码决定的。</p>
<p>结合管道来操作一下，下面统计<code>/etc</code>下面所有目录数：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -dl <span class="string">/etc/</span>*/ | wc -l</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/wc_ls.png" alt="wc ls"></p>
<h4 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令"></a>sort命令</h4><p>功能是将输入按照一定方式排序，然后再输出,它支持的排序有按字典排序,数字排序，按月份排序，随机排序，反转排序，指定特定字段进行排序等等。</p>
<p>默认为字典排序：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passswd | <span class="keyword">sort</span></span><br></pre></td></tr></table></figure>
<p>反转排序：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passwd | <span class="keyword">sort</span> -r</span><br></pre></td></tr></table></figure>
<p>按特定字段排序：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passwd | <span class="keyword">sort</span> -t<span class="string">':'</span> -k <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>上面的<code>-t</code>参数用于指定字段的分隔符，这里是以<code>:</code>作为分隔符；<code>-k</code>字段号用于指定对哪一个字段进行排序。这里<code>/etc/passwd</code>文件的第三个字段为数字，默认情况下是一字典序排序的，如果要按照数字排序就要加上<code>-n</code>参数：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ cat <span class="regexp">/etc/</span>passwd | <span class="keyword">sort</span> -t<span class="string">':'</span> -k <span class="number">3</span> -n</span><br></pre></td></tr></table></figure>
<h4 id="uniq命令"><a href="#uniq命令" class="headerlink" title="uniq命令"></a>uniq命令</h4><p><code>uniq</code>命令可以用于过滤或者输出重复行。</p>
<ul>
<li>过滤重复行</li>
</ul>
<p>我们可以使用<code>history</code>命令查看最近执行过的命令，不过你可能只想查看使用了那个命令而不需要知道具体干了什么，那么你可能就会要想去掉命令后面的参数然后去掉重复的命令：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">history | <span class="type">cut</span> -c <span class="number">8</span>- | <span class="type">cut</span> -d ' ' -f <span class="number">1</span> | <span class="type">uniq</span></span><br></pre></td></tr></table></figure>
<p>由于<code>uniq</code>命令只能去连续重复的行，不是全文去重，所以要达到全文去重效果，我们需要先排序：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">history | <span class="type">cut</span> -c <span class="number">8</span>- | <span class="type">cut</span> -d ' ' -f <span class="number">1</span> | <span class="type">sort</span> | <span class="type">uniq</span></span><br><span class="line"># 或者$ history | <span class="type">cut</span> -c <span class="number">8</span>- | <span class="type">cut</span> -d ' ' -f <span class="number">1</span> | <span class="type">sort</span> -u</span><br></pre></td></tr></table></figure>
<ul>
<li>输出重复行</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出重复过的行（重复的只输出一个）及重复次数</span></span><br><span class="line">history |<span class="string"> cut -c 8- </span>|<span class="string"> cut -d ' ' -f 1 </span>|<span class="string"> sort </span>|<span class="string"> uniq -dc</span></span><br><span class="line"><span class="string"># 输出所有重复的行</span></span><br><span class="line"><span class="string">history </span>|<span class="string"> cut -c 8- </span>|<span class="string"> cut -d ' ' -f 1 </span>|<span class="string"> sort </span>|<span class="string"> uniq -D</span></span><br></pre></td></tr></table></figure>
<h3 id="常用文本处理命令"><a href="#常用文本处理命令" class="headerlink" title="常用文本处理命令"></a>常用文本处理命令</h3><h4 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h4><p><code>tr</code>命令可以用来删除一段文本信息中的某些文字。或者将其进行转换。</p>
<p>使用方式：<code>tr</code> <code>[option]</code>…<code>SET1</code> <code>[SET2]</code></p>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>删除和set1匹配的字符，注意不是全词匹配也不是按字符顺序匹配</td>
</tr>
<tr>
<td>-s</td>
<td>去除set1指定的在输入文本中连续并重复的字符</td>
</tr>
</tbody>
</table>
<p>操作举例：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 删除 <span class="string">"hello world"</span> 中所有的<span class="string">'o'</span>,<span class="string">'l'</span>,<span class="string">'h'</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello world'</span> | <span class="keyword">tr</span> -d <span class="string">'olh'</span></span><br><span class="line"># 将<span class="string">"hello"</span> 中的<span class="keyword">ll</span>,去重为一个<span class="keyword">l</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello'</span> | <span class="keyword">tr</span> -s <span class="string">'l'</span></span><br><span class="line"># 将输入文本，全部转换为大写或小写输出</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello world'</span> | <span class="keyword">tr</span> <span class="string">'[a-z]'</span> <span class="string">'[A-Z]'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/tr.png" alt="tr"></p>
<h4 id="col命令"><a href="#col命令" class="headerlink" title="col命令"></a>col命令</h4><p><code>col</code>命令可以将<code>Tab</code>换成对等数量的<code>空格建</code>，或反转这个操作。</p>
<p>使用方式：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">col</span><span class="meta"> [option]</span></span><br></pre></td></tr></table></figure>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-x</td>
<td>将Tab转换为空格</td>
</tr>
<tr>
<td>-h</td>
<td>将空格转换为Tab（默认选项）</td>
</tr>
</tbody>
</table>
<p>操作举例：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># 查看 /etc/protocols 中的不可见字符，可以看到很多 ^I ，这其实就是 <span class="keyword">Tab</span> 转义成可见字符的符号</span><br><span class="line"><span class="keyword">cat</span> -A /etc/protocols | tail -<span class="keyword">n</span> 5</span><br><span class="line"># 使用 col -x 将 /etc/protocols 中的 <span class="keyword">Tab</span> 转换为空格,然后再使用 <span class="keyword">cat</span> 查看，你发现 ^I 不见了</span><br><span class="line"><span class="keyword">cat</span> /etc/protocols | col -x | tail -<span class="keyword">n</span> 5</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/col.png" alt="col"></p>
<h4 id="join命令"><a href="#join命令" class="headerlink" title="join命令"></a>join命令</h4><p><code>join</code>命令用于将两个文件中包含相同内容的那一行合并在一起。</p>
<p>使用方式：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">join</span> [<span class="keyword">option</span>]... file1 file2</span><br></pre></td></tr></table></figure>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-t</td>
<td>指定分隔符，默认为空格</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写的差异</td>
</tr>
<tr>
<td>-1</td>
<td>指明第一个文件要用哪个字段来对比，，默认对比第一个字段</td>
</tr>
<tr>
<td>-2</td>
<td>指明第二个文件要用哪个字段来对比，，默认对比第一个字段</td>
</tr>
</tbody>
</table>
<p>操作举例：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 创建两个文件</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'haha 1:hello haha'</span> &gt; file1</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'haha 1:world hehe'</span> &gt; file2</span><br><span class="line"><span class="keyword">join</span> file1 file2</span><br><span class="line"># 将file1与file2两个文件合并，指定以<span class="string">':'</span>作为分隔符</span><br><span class="line">sudo <span class="keyword">join</span> -t<span class="string">':'</span> file1 file2</span><br><span class="line"># 将file1与file2两个文件合并，指定以<span class="string">':'</span>作为分隔符, 分别比对第<span class="number">1</span>和第<span class="number">1</span>个字段</span><br><span class="line">sudo <span class="keyword">join</span> -t<span class="string">':'</span> -<span class="number">1</span> <span class="number">1</span> file1 -<span class="number">2</span> <span class="number">1</span> file2</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/join.png" alt="join"></p>
<h4 id="paste命令"><a href="#paste命令" class="headerlink" title="paste命令"></a>paste命令</h4><p><code>paste</code>命令与<code>join</code>命令类似，它是在不对比数据的情况下，简单地将多个文件合并一起，以<code>Tab</code>隔开。</p>
<p>使用方式：<br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">paste [<span class="keyword">option</span>] <span class="keyword">file</span>...</span><br></pre></td></tr></table></figure></p>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>指定合并的分隔符，默认为Tab</td>
</tr>
<tr>
<td>-s</td>
<td>不合并到一行，每个文件为一行</td>
</tr>
</tbody>
</table>
<p>操作举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file1</span><br><span class="line"><span class="built_in">echo</span> world &gt; file2</span><br><span class="line"><span class="built_in">echo</span> wenzhiquan &gt; file3</span><br><span class="line">paste -d <span class="string">':'</span> file1 file2 file3</span><br><span class="line">paste -s file1 file2 file3</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/linux_basic/paste.png" alt="paste"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统重装后必备</title>
    <url>/2016/08/05/2016-08-05-mac-installed-todo/</url>
    <content><![CDATA[<blockquote>
<p>“Mac系统常用软件，可以提升工作效率”</p>
</blockquote>
<h3 id="程序员必备"><a href="#程序员必备" class="headerlink" title="程序员必备"></a>程序员必备</h3><h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><p>这个是最需要安装的软件，利用<code>homebrew</code>可以快速的安装和管理其他软件包，类似于<code>Fedora</code>系统中的<code>dnf</code>命令。</p>
<p>安装方法如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure>
<p>直接在命令行中输入上述命令即可快速安装<code>homebrew</code>了。</p>
<a id="more"></a>
<h4 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h4><p>Mac自带的终端感觉不是特别方便，可以安装<code>iTerm2</code>，并调整出<code>HotKey Window</code>，就可以快速的开关命令行啦。</p>
<p>直接在<a href="http://www.iterm2.com/" target="_blank" rel="noopener">官网</a>下载安装包安装即可。常用配置方法如下：</p>
<p><img src="/uploads/in-post/Mac/iterm_hotkey.png" alt="iterm hotkey"></p>
<p>开启<code>HotKey</code>，将打开的窗口选择为<code>Hotkey Window</code>。</p>
<p><img src="/uploads/in-post/Mac/iterm_setdefault.png" alt="iterm setdefault"></p>
<p>将<code>Hotkey Window</code>设置为默认打开窗口。</p>
<p><img src="/uploads/in-post/Mac/iterm_window.png" alt="iterm window"></p>
<p>勾选<code>Hide after opening</code>，这样打开<code>iTerm2</code>的时候默认窗口就会自动隐藏，不用每次都自己隐藏了。上面的红框调整的是窗口的透明度和模糊程度，根据自己的爱好调整即可。</p>
<h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>命令行必备文本编辑器，<code>brew install vim</code>安装。</p>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>相信有过多人协作开发经验的人对<code>git</code>一定不陌生，直接<code>brew install git</code>即可。</p>
<h4 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h4><p><code>bash</code>的功能感觉不够强大，个人觉得还是<code>zsh</code>更加好用一些。</p>
<p>打开命令行，输入命令：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh</span><br></pre></td></tr></table></figure>
<p>安装完成后，可以给刚刚安装的<code>zsh</code>安装主题，安装的前提是安装了<code>git</code>，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>
<p>静候安装完成，然后编辑配置文件：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span>  <span class="string">//</span> 切换到自己的根目录</span><br><span class="line">vim <span class="string">.zshrc</span></span><br></pre></td></tr></table></figure>
<p>将<code>ZSH_THEME</code>后面的变量改为自己喜欢的主题名称，地址在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">zsh主题</a>。</p>
<h4 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h4><p>一个非常方便的可以查找<code>API</code>的软件，直接在<a href="https://kapeli.com/dash" target="_blank" rel="noopener">官网</a>下载安装即可，需要购买。</p>
<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>想要写托管到<code>github</code>的博客并且想马上看到效果，需要安装这款软件，具体安装方法请见我的博客：<a href="https://wenzhiquan.github.io/2018/05/04/2018-05-04-move-to-hexo-blog/">迁移至Hexo博客</a>。</p>
<h3 id="加快效率的软件"><a href="#加快效率的软件" class="headerlink" title="加快效率的软件"></a>加快效率的软件</h3><table>
<thead>
<tr>
<th>软件名称</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>alfred</code></td>
<td>可以视为加强版Spotlight，可以安装各种workflow，极大提升查找效率</td>
</tr>
<tr>
<td><code>moom</code></td>
<td>预置了几种窗口位置，是对mac自带的最大化的加强</td>
</tr>
<tr>
<td><code>atom</code></td>
<td>很好用的文本编辑器，界面美观，插件很多</td>
</tr>
<tr>
<td><code>xmind</code></td>
<td>跨平台的思维导图软件，导师力荐的软件</td>
</tr>
<tr>
<td><code>远程桌面连接</code></td>
<td>想用Mac控制Windows操作系统必需的软件</td>
</tr>
<tr>
<td><code>Cyberduck</code></td>
<td>大家都在用的ftp客户端，操作简单</td>
</tr>
<tr>
<td><code>CleanMyMac</code></td>
<td>Mac版的电脑管家</td>
</tr>
<tr>
<td><code>lantern</code></td>
<td>科学上网的利器</td>
</tr>
<tr>
<td><code>keka</code></td>
<td>小巧精致的解压缩软件，可以解压各种格式的压缩包</td>
</tr>
<tr>
<td><code>chrome</code></td>
<td>这个就不用多说了</td>
</tr>
<tr>
<td><code>Karabiner</code></td>
<td>感觉自己的快捷键不够用了吗？使用这款软件吧</td>
</tr>
<tr>
<td><code>parallel desktop</code></td>
<td>Mac上的最强虚拟机软件</td>
</tr>
</tbody>
</table>
<h3 id="Mac截图小技巧"><a href="#Mac截图小技巧" class="headerlink" title="Mac截图小技巧"></a>Mac截图小技巧</h3><ul>
<li><p>基础快捷键（<code>+</code>表示同时操作、<code>-</code>表示分步操作）</p>
<ul>
<li><code>Cmd+Shift+3</code>：全屏截图；截取整个屏幕，保存截图至桌面。</li>
<li><code>Cmd+Shift+4</code>：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面。</li>
<li><code>Cmd+Shift+4 - 单击空格键 - 鼠标单击指定窗口</code>：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面。</li>
</ul>
</li>
<li><p>进阶快捷键</p>
<ul>
<li><code>Cmd+Shift+4 - 按住空格键拖动鼠标</code>：区域截图；选取区域范围后，按住空格键并拖到鼠标可移动选取范围，释放按键后保存截图至桌面文件夹。</li>
<li><code>Cmd+Shift+4 - 按住Shift - 上下/左右移动鼠标</code>：区域截图；选取区域范围后，按住 Shift 并上下/左右移动鼠标即可固定选取范围宽度/高度改变高度/宽度，释放按键后保存截图至桌面文件夹。</li>
<li><code>Cmd+Shift+4 - 按住Shift和Option</code>: 区域截图；选取区域范围后，按住 Shift 和 Option 键在上一快捷键功能的基础上自由切换高度宽度，释放按键后保存截图至桌面文件夹。</li>
<li><code>Cmd+Shift+4 - 按住Option</code>: 区域截图；选取区域范围后，按住 Option 键可按比例缩放选取范围，释放按键后保存截图至桌面文件夹。</li>
</ul>
</li>
</ul>
<p>PS：以上介绍的快捷键配合按住<code>Control</code>键即可将截图文件保存在剪切板，以供调用。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（2）—— Array</title>
    <url>/2016/06/15/2016-06-15-interview-algorithm-array/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–Array相关”</p>
</blockquote>
<a id="more"></a>
<h3 id="Remove-Element-easy"><a href="#Remove-Element-easy" class="headerlink" title="Remove Element - easy"></a>Remove Element - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>and a value, remove all occurrences of that value in place and</span><br><span class="line">return the<span class="built_in"> new </span>length.</span><br><span class="line"></span><br><span class="line">The order of elements can be changed,<span class="built_in"> and </span>the elements after the<span class="built_in"> new </span>length</span><br><span class="line">don't matter.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given an<span class="built_in"> array </span>[0,4,4,0,0,2,4,4], value=4</span><br><span class="line"></span><br><span class="line">return 4<span class="built_in"> and </span>front four elements of the<span class="built_in"> array </span>is [0,0,0,2]</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public <span class="type">int</span> removeElement(<span class="type">int</span>[] A, <span class="type">int</span> elem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == null || A.<span class="built_in">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == elem) &#123;</span><br><span class="line">            <span class="built_in">step</span>++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            A[i - <span class="built_in">step</span>] = A[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A.<span class="built_in">length</span> - <span class="built_in">step</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/remove-element/" target="_blank" rel="noopener">Remove Element</a></p>
<h3 id="Subarray-Sum-easy"><a href="#Subarray-Sum-easy" class="headerlink" title="Subarray Sum - easy"></a>Subarray Sum - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="keyword">an</span> <span class="keyword">integer</span> array, find <span class="keyword">a</span> subarray where <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> numbers is <span class="literal">zero</span>. Your</span><br><span class="line">code should <span class="literal">return</span> <span class="keyword">the</span> index <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">number</span> <span class="keyword">and</span> <span class="keyword">the</span> index <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="built_in">number</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [<span class="number">-3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>], <span class="literal">return</span> [<span class="number">0</span>, <span class="number">2</span>] <span class="keyword">or</span> [<span class="number">1</span>, <span class="number">3</span>].</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;<span class="keyword">Integer</span>&gt; subarraySum(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;<span class="keyword">Integer</span>&gt; ans = new ArrayList&lt;<span class="keyword">Integer</span>&gt;();</span><br><span class="line">    HashMap&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; map = new HashMap&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">sum</span> += nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(<span class="built_in">sum</span>)) &#123;</span><br><span class="line">            ans.add(map.get(<span class="built_in">sum</span>) <span class="number">1</span>);</span><br><span class="line">            ans.add(i);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.put(<span class="built_in">sum</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/subarray-sum/" target="_blank" rel="noopener">Subarray Sum</a></p>
<h3 id="Remove-Duplicates-from-Sorted-Array-easy"><a href="#Remove-Duplicates-from-Sorted-Array-easy" class="headerlink" title="Remove Duplicates from Sorted Array - easy"></a>Remove Duplicates from Sorted Array - easy</h3><p>题目</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Given a sorted <span class="keyword">array</span>, remove the duplicates <span class="keyword">in</span> place such that each element appear</span><br><span class="line">only once <span class="keyword">and</span> <span class="keyword">return</span> the <span class="keyword">new</span> length.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> allocate extra space <span class="keyword">for</span> another <span class="keyword">array</span>, you must <span class="keyword">do</span> this <span class="keyword">in</span> place <span class="keyword">with</span></span><br><span class="line"><span class="keyword">constant</span> memory.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given input <span class="keyword">array</span> A = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">Your <span class="keyword">function</span> <span class="title">should</span> <span class="keyword">return</span> <span class="type">length</span> = <span class="number">2</span>, <span class="keyword">and</span> A <span class="keyword">is</span> now [<span class="number">1</span>,<span class="number">2</span>].</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> removeDuplicates(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> k = <span class="number">1</span>;  <span class="comment">// k means the max appear times of the duplicates</span></span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">count</span> &lt; k) nums[start++] = nums[i];</span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">count</span> = <span class="number">1</span>;</span><br><span class="line">            nums[start++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array</a></p>
<h3 id="Merge-Sorted-Array-easy"><a href="#Merge-Sorted-Array-easy" class="headerlink" title="Merge Sorted Array - easy"></a>Merge Sorted Array - easy</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Given two sorted <span class="type">integer</span> arrays A and B, merge B into A as one sorted array.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, empty, empty], B = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">After merge, A will be filled as [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public void mergeSortedArray(int[] A, int m, int[] B, int n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    int <span class="built_in">i</span> = m - <span class="number">1</span>, <span class="built_in">j</span> = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">i</span> &gt;=<span class="number">0</span> &amp;&amp; <span class="built_in">j</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="built_in">i</span>] &lt; B[<span class="built_in">j</span>]) &#123;</span><br><span class="line">            A[<span class="built_in">i</span> + <span class="built_in">j</span> - <span class="number">1</span>] = B[<span class="built_in">j</span>--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            A[<span class="built_in">i</span> + <span class="built_in">j</span> - <span class="number">1</span>] = A[<span class="built_in">i</span>--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">j</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        A[<span class="built_in">i</span> + <span class="built_in">j</span> - <span class="number">1</span>] = B[<span class="built_in">j</span>--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/merge-sorted-array/" target="_blank" rel="noopener">Merge Sorted Array</a></p>
<h3 id="Product-of-Array-Exclude-Itself-easy"><a href="#Product-of-Array-Exclude-Itself-easy" class="headerlink" title="Product of Array Exclude Itself - easy"></a>Product of Array Exclude Itself - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an integers<span class="built_in"> array </span>A.</span><br><span class="line"></span><br><span class="line">Define B[i] = A[0] * ... * A[i-1] * A[i+1] * ... * A[n-1], calculate B WITHOUT</span><br><span class="line">divide operation.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For A = [1, 2, 3],<span class="built_in"> return </span>[6, 3, 2].</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Long&gt; <span class="title">productExcludeItself</span><span class="params">(ArrayList&lt;Integer&gt; A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code</span></span><br><span class="line">    <span class="keyword">int</span> length = A.<span class="built_in">size</span>();</span><br><span class="line">    ArrayList&lt;Long&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">1</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">long</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result.add(tmp);</span><br><span class="line">        tmp *= A.<span class="built_in">get</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        Long data = result.<span class="built_in">get</span>(i);</span><br><span class="line">        result.<span class="built_in">set</span>(i, data * tmp);</span><br><span class="line">        tmp *= A.<span class="built_in">get</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/product-of-array-exclude-itself/" target="_blank" rel="noopener">Product of Array Exclude Itself </a></p>
<h3 id="First-Missing-Positive-medium"><a href="#First-Missing-Positive-medium" class="headerlink" title="First Missing Positive - medium"></a>First Missing Positive - medium</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Given an unsorted <span class="type">integer</span> array, find the first missing positive <span class="type">integer</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>] return <span class="number">3</span>,</span><br><span class="line">and [<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">1</span>] return <span class="number">2.</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public <span class="type">int</span> firstMissingPositive(<span class="type">int</span>[] A) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">length</span> = A.<span class="built_in">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="built_in">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &gt;= <span class="number">0</span> &amp;&amp; A[i] &lt; <span class="built_in">length</span> &amp;&amp; A[A[i]] != A[i]) swap(A, i, A[i]);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; <span class="built_in">length</span> &amp;&amp; A[k] == k) k++;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">length</span> == <span class="number">0</span> || k &lt; <span class="built_in">length</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> A[<span class="number">0</span>] == k? k + <span class="number">1</span>: k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="type">void</span> swap(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">    <span class="type">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/first-missing-positive/" target="_blank" rel="noopener">First Missing Positive</a></p>
<h3 id="3Sum-Closest-medium"><a href="#3Sum-Closest-medium" class="headerlink" title="3Sum Closest - medium"></a>3Sum Closest - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>S of n integers, find three integers in S such that the sum is</span><br><span class="line">closest to a given number, target. Return the sum of the three integers.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For example, given<span class="built_in"> array </span>S = [-1 2 1 -4],<span class="built_in"> and </span>target = 1. The sum that is closest</span><br><span class="line">to the target is 2. (-1 2 1 = 2).</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> threeSumClosest(<span class="built_in">int</span>[] numbers, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    // <span class="built_in">write</span> your code here</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (numbers == null || numbers.length &lt; <span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">min</span> = <span class="keyword">Integer</span>.MAX_VALUE;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(numbers);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; numbers.length - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> j = i <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> k = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">sum</span> = numbers[i] numbers[j] numbers[k];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sum</span> == <span class="keyword">target</span>) <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sum</span> &lt; <span class="keyword">target</span>) <span class="keyword">while</span> (numbers[j] == numbers[++j] &amp;&amp; j &lt; k);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">while</span> (numbers[k] == numbers[--k] &amp;&amp; j &lt; k);</span><br><span class="line">            <span class="built_in">int</span> diff = Math.<span class="built_in">abs</span>(<span class="built_in">sum</span> - <span class="keyword">target</span>);</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">                <span class="built_in">min</span> = diff;</span><br><span class="line">                result = <span class="built_in">sum</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (numbers[i] == numbers[++i] &amp;&amp; i &lt; numbers.length - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/3sum-closest/" target="_blank" rel="noopener">3Sum Closest</a></p>
<h3 id="3Sum-medium"><a href="#3Sum-medium" class="headerlink" title="3Sum - medium"></a>3Sum - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>S of n integers, are there elements a, b, c in S such that</span><br><span class="line">a b c = 0? Find all unique triplets in the<span class="built_in"> array </span>which gives the sum of zero.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For example, given<span class="built_in"> array </span>S = &#123;-1 0 1 2 -1 -4&#125;, A solution set is:</span><br><span class="line"></span><br><span class="line">(-1, 0, 1)</span><br><span class="line">(-1, -1, 2)</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; threeSum(<span class="built_in">int</span>[] numbers) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length &lt; <span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">    Arrays.<span class="built_in">sort</span>(numbers);</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; numbers.length - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">int</span> j = i <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> k = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = numbers[i] numbers[j] numbers[k];</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                tmp.<span class="built_in">add</span>(numbers[i]);</span><br><span class="line">                tmp.<span class="built_in">add</span>(numbers[j]);</span><br><span class="line">                tmp.<span class="built_in">add</span>(numbers[k]);</span><br><span class="line">                result.<span class="built_in">add</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) <span class="keyword">while</span> (numbers[j] == numbers[++j] &amp;&amp; j &lt; k);</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= <span class="number">0</span>) <span class="keyword">while</span> (numbers[k] == numbers[--k] &amp;&amp; j &lt; k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (numbers[i] == numbers[++i] &amp;&amp; i &lt; numbers.length - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/3sum/" target="_blank" rel="noopener">3Sum</a></p>
<h3 id="Two-Sum-medium"><a href="#Two-Sum-medium" class="headerlink" title="Two Sum - medium"></a>Two Sum - medium</h3><p>题目</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Given an array of integers, <span class="builtin-name">find</span> two numbers such that they <span class="builtin-name">add</span> up <span class="keyword">to</span> a specific</span><br><span class="line">target number.</span><br><span class="line"></span><br><span class="line">The function twoSum should return indices of the two numbers such that they add</span><br><span class="line">up <span class="keyword">to</span> the target, where index1 must be less than index2. Please<span class="built_in"> note </span>that your</span><br><span class="line">returned answers (both index1 <span class="keyword">and</span> index2) are <span class="keyword">NOT</span> zero-based.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">numbers=[2, 7, 11, 15], <span class="attribute">target</span>=9</span><br><span class="line"></span><br><span class="line">return [1, 2]</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] twoSum(<span class="built_in">int</span>[] numbers, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (numbers == <span class="keyword">null</span> ||numbers.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">HashMap</span>&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">int</span> [] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">key</span> = target - numbers[i];</span><br><span class="line">        <span class="keyword">if</span> (hashMap.containsKey(<span class="built_in">key</span>)) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = hashMap.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">            result[<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap.put(numbers[i], i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/two-sum/" target="_blank" rel="noopener">Two Sum</a></p>
<h3 id="Partition-Array-medium"><a href="#Partition-Array-medium" class="headerlink" title="Partition Array - medium"></a>Partition Array - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>nums of integers<span class="built_in"> and </span>an<span class="built_in"> int </span>k, partition the array</span><br><span class="line">(i.e<span class="built_in"> move </span>the elements in <span class="string">"nums"</span>) such that:</span><br><span class="line"></span><br><span class="line">All elements &lt; k are moved to the left</span><br><span class="line">All elements &gt;= k are moved to the right</span><br><span class="line">Return the partitioning index, i.e the first index i nums[i] &gt;= k.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">If nums = [3,2,2,1]<span class="built_in"> and </span>k=2, a valid answer is 1.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partitionArray</span>(<span class="params"><span class="keyword">int</span>[] nums, <span class="keyword">int</span> k</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high &amp;&amp; nums[high] &gt;= k) high--;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high &amp;&amp; nums[low] &lt; k) low++;</span><br><span class="line">        <span class="keyword">if</span>(high &gt;= <span class="number">0</span> &amp;&amp; low &lt; high)&#123;</span><br><span class="line">            swap(nums, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> high + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/partition-array/" target="_blank" rel="noopener">Partition Array</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（4）—— Math &amp; Bit Manipulation</title>
    <url>/2016/07/04/2016-07-04-interview-algorithm-math-bit/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–Math &amp; Bit Manipulation相关”</p>
</blockquote>
<a id="more"></a>
<h3 id="Flip-Bits-easy"><a href="#Flip-Bits-easy" class="headerlink" title="Flip Bits - easy"></a>Flip Bits - easy</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Determine the number of bits required to flip if you want to convert <span class="type">integer</span> n</span><br><span class="line">to <span class="type">integer</span> m.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given</span><br><span class="line">n = <span class="number">31</span> (`<span class="number">1</span>`<span class="number">111</span>`<span class="number">1</span>`),</span><br><span class="line">m = <span class="number">14</span> (`<span class="number">0</span>`<span class="number">111</span>`<span class="number">0</span>`),</span><br><span class="line">return <span class="number">2.</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> bitSwapRequired(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = a ^ b; c != <span class="number">0</span>; c &gt;&gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">count</span> += c &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/flip-bits/" target="_blank" rel="noopener">Flip Bits</a></p>
<h3 id="O-1-Check-Power-of-2-easy"><a href="#O-1-Check-Power-of-2-easy" class="headerlink" title="O(1) Check Power of 2 - easy"></a>O(1) Check Power of 2 - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Using O(1) time to<span class="built_in"> check </span>whether an integer n is a power of 2.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For n=4,<span class="built_in"> return </span>true;</span><br><span class="line"></span><br><span class="line">For n=5,<span class="built_in"> return </span>false;</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPowerOf2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; (n<span class="number">-1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/o1-check-power-of-2/" target="_blank" rel="noopener">O(1) Check Power of 2</a></p>
<h3 id="Unique-Paths-easy"><a href="#Unique-Paths-easy" class="headerlink" title="Unique Paths - easy"></a>Unique Paths - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">A robot is located <span class="keyword">at</span> <span class="keyword">the</span> top-left corner <span class="keyword">of</span> <span class="keyword">a</span> m x n grid</span><br><span class="line">(marked <span class="string">'Start'</span> <span class="keyword">in</span> <span class="keyword">the</span> diagram below).</span><br><span class="line"></span><br><span class="line">The robot can only move either down <span class="keyword">or</span> <span class="literal">right</span> <span class="keyword">at</span> <span class="keyword">any</span> point <span class="keyword">in</span> <span class="built_in">time</span>. The robot is</span><br><span class="line">trying <span class="built_in">to</span> reach <span class="keyword">the</span> bottom-<span class="literal">right</span> corner <span class="keyword">of</span> <span class="keyword">the</span> grid(marked <span class="string">'Finish'</span> <span class="keyword">in</span> <span class="keyword">the</span> diagram</span><br><span class="line">below).</span><br><span class="line"></span><br><span class="line">How many possible unique paths are there?</span><br><span class="line"></span><br><span class="line">Example</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>1,1</th>
<th>1,2</th>
<th>1,3</th>
<th>1,4</th>
<th>1,5</th>
<th>1,6</th>
<th>1,7</th>
</tr>
</thead>
<tbody>
<tr>
<td>2,1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3,1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3,7</td>
</tr>
</tbody>
</table>
<p>代码</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">Ja<span class="symbol">va:</span></span><br><span class="line"></span><br><span class="line">// space O(<span class="built_in">n</span>)</span><br><span class="line">public <span class="built_in">int</span> uniquePaths(<span class="built_in">int</span> m, <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</span><br><span class="line">    <span class="built_in">if</span> (m &lt; <span class="number">1</span> || <span class="built_in">n</span> &lt; <span class="number">1</span>) return <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">if</span> (m == <span class="number">1</span> || <span class="built_in">n</span> == <span class="number">1</span>) return <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span>[] result = new <span class="built_in">int</span>[<span class="built_in">n</span>];</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) &#123;</span><br><span class="line">        result[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        for (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; <span class="built_in">n</span>; j++)</span><br><span class="line">            result[j] += result[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    return result[<span class="built_in">n</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/unique-paths/" target="_blank" rel="noopener">Unique Paths</a></p>
<h3 id="Trailing-Zeros-easy"><a href="#Trailing-Zeros-easy" class="headerlink" title="Trailing Zeros - easy"></a>Trailing Zeros - easy</h3><p>题目</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Write</span> an algorithm which computes the <span class="keyword">number</span> of trailing zeros <span class="keyword">in</span> n factorial.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="number">11</span><span class="comment">! = 39916800, so the out should be 2</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> trailingZeros(<span class="keyword">long</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">count</span> += n / <span class="number">5</span>;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/trailing-zeros/" target="_blank" rel="noopener">Trailing Zeros</a></p>
<h3 id="Update-Bits-medium"><a href="#Update-Bits-medium" class="headerlink" title="Update Bits - medium"></a>Update Bits - medium</h3><p>题目</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Given two <span class="number">32</span>-<span class="keyword">bit </span>numbers, N <span class="keyword">and </span>M, <span class="keyword">and </span>two <span class="keyword">bit </span>positions, i <span class="keyword">and </span><span class="keyword">j. </span>Write a method</span><br><span class="line">to set all <span class="keyword">bits </span><span class="keyword">between </span>i <span class="keyword">and </span><span class="keyword">j </span>in N equal to M (e g , M <span class="keyword">becomes </span>a <span class="keyword">substring </span>of N</span><br><span class="line">located <span class="built_in">at</span> i <span class="keyword">and </span>starting <span class="built_in">at</span> <span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">Clarification</span></span><br><span class="line"><span class="keyword">You </span>can assume that the <span class="keyword">bits </span><span class="keyword">j </span>through i have enough space to fit all of M. That is,</span><br><span class="line">if M=<span class="number">10011</span>， you can assume that there are <span class="built_in">at</span> least <span class="number">5</span> <span class="keyword">bits </span><span class="keyword">between </span><span class="keyword">j </span><span class="keyword">and </span>i.</span><br><span class="line">You would not, for example, have <span class="keyword">j=3 </span><span class="keyword">and </span>i=<span class="number">2</span>, <span class="keyword">because </span>M could not fully fit <span class="keyword">between</span></span><br><span class="line"><span class="keyword">bit </span><span class="number">3</span> <span class="keyword">and </span><span class="keyword">bit </span><span class="number">2</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given N=(<span class="number">10000000000</span>)<span class="number">2</span>, M=(<span class="number">10101</span>)<span class="number">2</span>, i=<span class="number">2</span>, <span class="keyword">j=6</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">return </span>N=(<span class="number">10001010100</span>)<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBits</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = ~<span class="number">0</span>; <span class="comment">/* All 1’s */</span></span><br><span class="line">    <span class="comment">// 1’s through position j, then 0’s</span></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">31</span>)</span><br><span class="line">        j = <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        j = (<span class="number">1</span> &lt;&lt; (j + <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="built_in">max</span> - j;</span><br><span class="line">    <span class="comment">// 1’s after position i</span></span><br><span class="line">    <span class="keyword">int</span> right = ((<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 1’s, with 0s between i and j</span></span><br><span class="line">    <span class="keyword">int</span> mask = left | right;</span><br><span class="line">    <span class="comment">// Clear i through j, then put m in there</span></span><br><span class="line">    <span class="keyword">return</span> ((n &amp; mask) | (m &lt;&lt; i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/update-bits/" target="_blank" rel="noopener">Update Bits</a></p>
<h3 id="Unique-Binary-Search-Trees-medium"><a href="#Unique-Binary-Search-Trees-medium" class="headerlink" title="Unique Binary Search Trees - medium"></a>Unique Binary Search Trees - medium</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Given n, how many structurally unique BSTs (binary search trees) that store</span><br><span class="line">values <span class="number">1.</span>..n?</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given n = <span class="number">3</span>, there are a total of <span class="number">5</span> unique BST's.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>           <span class="number">3</span>    <span class="number">3</span>       <span class="number">2</span>      <span class="number">1</span></span><br><span class="line"> \         /    /       / \      \</span><br><span class="line">  <span class="number">3</span>      <span class="number">2</span>     <span class="number">1</span>       <span class="number">1</span>   <span class="number">3</span>      <span class="number">2</span></span><br><span class="line"> /      /       \                  \</span><br><span class="line"><span class="number">2</span>     <span class="number">1</span>          <span class="number">2</span>                  <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public int numTrees(int n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    int[] dp = new int[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; <span class="built_in">i</span>; <span class="built_in">j</span>++) &#123;</span><br><span class="line">            dp[<span class="built_in">i</span>] += dp[<span class="built_in">j</span>] * dp[<span class="built_in">i</span> - <span class="built_in">j</span> - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/unique-binary-search-trees/" target="_blank" rel="noopener">Unique Binary Search Trees</a></p>
<h3 id="Fast-Power-medium"><a href="#Fast-Power-medium" class="headerlink" title="Fast Power - medium"></a>Fast Power - medium</h3><p>题目</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Calculate the power(a, n) % b where a, b and n are all <span class="number">32</span>bit integers.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For power(<span class="number">2</span>, <span class="number">31</span>) % <span class="number">3</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">For power(<span class="number">100</span>,<span class="number">1000</span>) % <span class="number">1000</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fastPower</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> ret = getPower(a, b, n);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getPower</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % b;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> a % b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> ret = getPower(a, b, n/<span class="number">2</span>);</span><br><span class="line">    ret *= ret;</span><br><span class="line">    ret %= b;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        ret = ret * (a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret % b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/fast-power/" target="_blank" rel="noopener">Fast Power</a></p>
<h3 id="Binary-Representation-hard"><a href="#Binary-Representation-hard" class="headerlink" title="Binary Representation - hard"></a>Binary Representation - hard</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="keyword">a</span> (decimal - e.g. <span class="number">3.72</span>) <span class="built_in">number</span> that is passed <span class="keyword">in</span> <span class="keyword">as</span> <span class="keyword">a</span> <span class="keyword">string</span>, <span class="literal">return</span> <span class="keyword">the</span></span><br><span class="line">binary representation that is passed <span class="keyword">in</span> <span class="keyword">as</span> <span class="keyword">a</span> <span class="keyword">string</span>. If <span class="keyword">the</span> fractional part <span class="keyword">of</span></span><br><span class="line"><span class="keyword">the</span> <span class="built_in">number</span> can <span class="keyword">not</span> be represented accurately <span class="keyword">in</span> binary <span class="keyword">with</span> <span class="keyword">at</span> most <span class="number">32</span> <span class="keyword">characters</span>,</span><br><span class="line"><span class="literal">return</span> ERROR.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For n = <span class="string">"3.72"</span>, <span class="literal">return</span> <span class="string">"ERROR"</span>.</span><br><span class="line"></span><br><span class="line">For n = <span class="string">"3.5"</span>, <span class="literal">return</span> <span class="string">"11.1"</span>.</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> binaryRepresentation(<span class="keyword">String</span> n) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (n.indexOf(<span class="string">'.'</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> parseInteger(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">String</span>[] params = n.<span class="built_in">split</span>(<span class="string">"\\."</span>);</span><br><span class="line">    <span class="keyword">String</span> flt = parseFloat(params[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (flt == <span class="string">"ERROR"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> flt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flt.equals(<span class="string">"0"</span>) || flt.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> parseInteger(params[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parseInteger(params[<span class="number">0</span>]) <span class="string">"."</span> flt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> parseInteger(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> n = Integer.parseInt(<span class="built_in">str</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span>.equals(<span class="string">""</span>) || <span class="built_in">str</span>.equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">binary</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">binary</span> = Integer.toString(n % <span class="number">2</span>) <span class="built_in">binary</span>;</span><br><span class="line">        n = n / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">binary</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> parseFloat(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="keyword">double</span> d = Double.parseDouble(<span class="string">"0."</span> <span class="built_in">str</span>);</span><br><span class="line">    StringBuilder <span class="built_in">binary</span> = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    HashSet&lt;Double&gt; <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;Double&gt;();</span><br><span class="line">    <span class="keyword">while</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">binary</span>.length() &gt; <span class="number">32</span> || <span class="built_in">set</span>.contains(d)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ERROR"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">set</span>.<span class="built_in">add</span>(d);</span><br><span class="line">        d = d * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">binary</span>.<span class="built_in">append</span>(<span class="number">1</span>);</span><br><span class="line">            d = d - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">binary</span>.<span class="built_in">append</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">binary</span>.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题地址<br><a href="http://www.lintcode.com/en/problem/binary-representation/" target="_blank" rel="noopener">Binary Representation</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>grep模式匹配命令</title>
    <url>/2016/09/06/2016-09-06-grep/</url>
    <content><![CDATA[<blockquote>
<p>“grep是一种强大的文本搜索工具。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>grep</code>全称<code>Globally search a Regular Expression and Print</code>是一种强大的文本搜索工具。它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<p><code>grep</code>的工作方式是在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到屏幕，不影响原文件内容。<code>grep</code>可用于<code>shell</code>脚本，因为<code>grep</code>通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回<code>0</code>，如果搜索不成功，则返回<code>1</code>，如果搜索的文件不存在，则返回<code>2</code>。<code>grep</code>命令中允许指定的串语句是一个规则表达式，这是一种允许使用某些特殊键盘字符的指定字符串的方法，这种方法中的特殊键盘字符可以用于代表其他字符也可以进一步定义模式匹配工作方式。</p>
<a id="more"></a>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>grep</code>命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。<code>grep</code>支持三种正则表达式引擎，分别用三个参数指定：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-E</code></td>
<td>POSIX扩展正则表达式，<code>ERE</code></td>
</tr>
<tr>
<td><code>-G</code></td>
<td>POSIX基本正则表达式，<code>BRE</code></td>
</tr>
<tr>
<td><code>-P</code></td>
<td>Perl正则表达式，<code>PCRE</code></td>
</tr>
</tbody>
</table>
<p>在没学过<code>perl</code>语言的大多数情况下你将只会使用到<code>ERE</code>和<code>BRE</code>。</p>
<p>先介绍一下<code>grep</code>命令的常用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-b</code></td>
<td>将二进制文件作为文本来进行匹配</td>
</tr>
<tr>
<td><code>-c</code></td>
<td>统计以模式匹配的数目</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>忽略大小写</td>
</tr>
<tr>
<td><code>-n</code></td>
<td>显示匹配文本所在行的行号</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>反选，输出不匹配行的内容</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>递归匹配查找</td>
</tr>
<tr>
<td><code>-A n</code></td>
<td>n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行</td>
</tr>
<tr>
<td><code>-B n</code></td>
<td>n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行</td>
</tr>
<tr>
<td><code>--color=auto</code></td>
<td>将输出中的匹配项设置为自动颜色显示</td>
</tr>
</tbody>
</table>
<p>注：在大多数发行版中是默认设置了<code>grep</code>的颜色的，你可以通过参数指定或修改<code>GREP_COLOR</code>环境变量。</p>
<p><img src="/uploads/in-post/grep/grep_basic.png" alt="grep basic"></p>
<h3 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h3><h4 id="使用基本正则表达式，BRE"><a href="#使用基本正则表达式，BRE" class="headerlink" title="使用基本正则表达式，BRE"></a>使用基本正则表达式，BRE</h4><ul>
<li>位置</li>
</ul>
<p>查找<code>test</code>文件中以<code>wen</code>开头的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">'wen'</span> <span class="built_in">test</span></span><br><span class="line">grep <span class="string">'^wen'</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/grep/grep_head.png" alt="grep head"></p>
<ul>
<li>数量</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 将匹配以<span class="string">'h'</span>开头以<span class="string">'o'</span>结尾的所有字符串</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello\nho\nhio'</span> | <span class="keyword">grep</span> <span class="string">'h.*o'</span></span><br><span class="line"># 将匹配以<span class="string">'h'</span>开头以<span class="string">'o'</span>结尾，中间包含一个任意字符的字符串</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello\nho\nhio'</span> | <span class="keyword">grep</span> <span class="string">'h.o'</span></span><br><span class="line"># 将匹配以<span class="string">'h'</span>开头,以任意多个<span class="string">'o'</span>结尾的字符串</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello\nho\nhio'</span> | <span class="keyword">grep</span> <span class="string">'ho*'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/grep/grep_bre.png" alt="grep bre"></p>
<ul>
<li>选择</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep默认是区分大小写的，这里将匹配所有的小写字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[a-z]'</span></span><br><span class="line"><span class="comment"># 将匹配所有的数字</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[0-9]'</span></span><br><span class="line"><span class="comment"># 将匹配所有的数字</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[[:digit:]]'</span></span><br><span class="line"><span class="comment"># 将匹配所有的小写字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[[:lower:]]'</span></span><br><span class="line"><span class="comment"># 将匹配所有的大写字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[[:upper:]]'</span></span><br><span class="line"><span class="comment"># 将匹配所有的字母和数字，包括0-9,a-z,A-Z</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[[:alnum:]]'</span></span><br><span class="line"><span class="comment"># 将匹配所有的字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1234\nabcd\nABCD'</span> | grep <span class="string">'[[:alpha:]]'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/grep/grep_select.png" alt="grep select"></p>
<p>下面包含完整的特殊符号及说明：</p>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[:alnum:]</code></td>
<td>代表英文大小写字节及数字，亦即 0-9, A-Z, a-z</td>
</tr>
<tr>
<td><code>[:alpha:]</code></td>
<td>代表任何英文大小写字节，亦即 A-Z, a-z</td>
</tr>
<tr>
<td><code>[:blank:]</code></td>
<td>代表空白键与 [Tab] 按键两者</td>
</tr>
<tr>
<td><code>[:cntrl:]</code></td>
<td>代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等</td>
</tr>
<tr>
<td><code>[:digit:]</code></td>
<td>代表数字而已，亦即 0-9</td>
</tr>
<tr>
<td><code>[:graph:]</code></td>
<td>除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键</td>
</tr>
<tr>
<td><code>[:lower:]</code></td>
<td>代表小写字节，亦即 a-z</td>
</tr>
<tr>
<td><code>[:print:]</code></td>
<td>代表任何可以被列印出来的字节</td>
</tr>
<tr>
<td><code>[:punct:]</code></td>
<td>代表标点符号 (punctuation symbol)，亦即：” ‘ ? ! ; : # $…</td>
</tr>
<tr>
<td><code>[:upper:]</code></td>
<td>代表大写字节，亦即 A-Z</td>
</tr>
<tr>
<td><code>[:space:]</code></td>
<td>任何会产生空白的字节，包括空白键, [Tab], CR 等等</td>
</tr>
<tr>
<td><code>[:xdigit:]</code></td>
<td>代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节</td>
</tr>
</tbody>
</table>
<p>注意：之所以要使用特殊符号，是因为<code>[a-z]</code>不是在所有情况下都管用，这还与主机当前的语系有关，即设置在<code>LANG</code>环境变量的值，<code>zh_CN.UTF-8</code>的<code>[a-z]</code>即为所有小写字母，其它语系可能是大小写交替的如，<code>a A b B...z Z</code>，<code>[a-z]</code>中就可能包含大写字母。所以在使用<code>[a-z]</code>时请确保当前语系的影响，使用<code>[:lower:]</code>则不会有这个问题。</p>
<ul>
<li>排除字符</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'hello|aloha'</span> | <span class="keyword">grep</span> <span class="string">'[^o]'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/grep/grep_exclude.png" alt="grep exclude"></p>
<p>注意:当<code>^</code>放到中括号内为排除字符，否则表示行首。</p>
<h4 id="使用扩展正则表达式，ERE"><a href="#使用扩展正则表达式，ERE" class="headerlink" title="使用扩展正则表达式，ERE"></a>使用扩展正则表达式，ERE</h4><p>要通过<code>grep</code>使用扩展正则表达式需要加上<code>-E</code>参数，或使用<code>egrep</code>。</p>
<ul>
<li>数量</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 只匹配<span class="string">"zo"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> -E <span class="string">'zo&#123;1&#125;'</span></span><br><span class="line"># 匹配以<span class="string">"zo"</span>开头的所有单词</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> -E <span class="string">'zo&#123;1,&#125;'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/grep/grep_e.png" alt="grep e"></p>
<ul>
<li>选择</li>
</ul>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"># 匹配<span class="string">"www.baidu.com"</span>和<span class="string">"www.google.com"</span></span><br><span class="line">echo <span class="symbol">'www</span>.qq.com\nwww.baidu.com\nwww.google.com' | grep -<span class="type">E</span> <span class="symbol">'www</span>\.(baidu|google)\.com'</span><br><span class="line"># 或者匹配不包含<span class="string">"baidu"</span>的内容</span><br><span class="line">echo <span class="symbol">'www</span>.qq.com\nwww.baidu.com\nwww.google.com' | grep -<span class="type">Ev</span> <span class="symbol">'www</span>\.baidu\.com'</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/grep/grep_ev.png" alt="grep ev"></p>
<p>注意：因为<code>.</code>号有特殊含义，所以需要转义。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Grep</tag>
      </tags>
  </entry>
  <entry>
    <title>sed流编辑器</title>
    <url>/2016/10/15/2016-10-15-sed/</url>
    <content><![CDATA[<blockquote>
<p>“sed是用于过滤和转换文本的流编辑器。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>sed</code>，全称为<code>stream editor</code>，是一个非交互式的编辑器。</p>
<p><code>sed</code>命令是利用<code>script</code>来处理文本文件。<code>sed</code>可依照<code>script</code>的指令，来处理、编辑文本文件。</p>
<p><code>sed</code>主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>
<a id="more"></a>
<h3 id="sed基本知识点"><a href="#sed基本知识点" class="headerlink" title="sed基本知识点"></a>sed基本知识点</h3><h4 id="sed工作流程"><a href="#sed工作流程" class="headerlink" title="sed工作流程"></a>sed工作流程</h4><p><img src="/uploads/in-post/sed/sed.png" alt="sed"></p>
<p>前提：待操作文本是由至上而下的一行或N行组成。</p>
<ul>
<li><p>基本工作流程：</p>
<ul>
<li>当用<code>sed</code>命令对文本进行处理的时候，<code>sed</code>先读取对象的文本文件的第一行到模式空间中。</li>
<li>当有内容进入<code>模式空间</code>时，<code>sed</code>的编辑命令对模式空间中的内容进行<code>编辑操作</code>（修改，替换，删除，追加，显示等等）</li>
<li><code>模式空间</code>中的内容编辑处理完成之后，<code>sed</code>把此内容通过标准输出（默认为显示器）<code>打印</code>出来，并<code>删除</code>模式空间中的内容。</li>
<li>第一行处理结束。从新读取第二行的内容进行处理，直到最后一行。</li>
</ul>
</li>
</ul>
<p>注意：<code>持有空间</code>可以和<code>模式空间</code>的内容进行互相<code>追加、覆盖</code>等操作。</p>
<h4 id="sed命令执行位置"><a href="#sed命令执行位置" class="headerlink" title="sed命令执行位置"></a>sed命令执行位置</h4><p>几乎所有的<code>sed</code>命令都可以添加<code>[address[,address]]</code>来确定命令执行的位置，完整指令如下：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># !表示匹配成功后是否执行命令</span><br><span class="line">[address[,address]][!]&#123;cmd&#125;</span><br><span class="line"># 删除非第二行至尾行，即删除第一行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"2,$ ! d"</span></span><br><span class="line"># 删除第二行至尾行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"2,$ d"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/address.png" alt="address"></p>
<p>命令执行位置可以使用相对位置：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 匹配a并输出a和其后连续两行，+<span class="number">2</span>表示其后连续两行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>b<span class="subst">\n</span>c<span class="subst">\n</span>d<span class="subst">\n</span>e<span class="subst">\n</span>f"</span> | sed -n <span class="string">"/a/,+2 p"</span></span><br><span class="line"># 匹配a并输出其后连续两行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>b<span class="subst">\n</span>c<span class="subst">\n</span>d<span class="subst">\n</span>e<span class="subst">\n</span>f"</span> | sed -n <span class="string">"/a/,+2&#123;//n;p&#125;"</span></span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>b<span class="subst">\n</span>c<span class="subst">\n</span>d<span class="subst">\n</span>e<span class="subst">\n</span>f"</span> | sed -n <span class="string">"/a/,+2&#123;/a/n;p&#125;"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/relative_address.png" alt="relative address"></p>
<h4 id="sed命令打包"><a href="#sed命令打包" class="headerlink" title="sed命令打包"></a>sed命令打包</h4><p><code>sed</code>命令可以用大括号进行分组作为嵌套命令，表示外层命令执行完成后，再执行内层命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对3行到第4行，执行命令/I am/d</span></span><br><span class="line">sed <span class="string">'3,4 &#123;/I am/d&#125;'</span> <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 对1行到第4行，匹配/I am/成功后，再匹配/dog/，成功后执行d命令</span></span><br><span class="line">sed <span class="string">'3,6 &#123;/I am/&#123;/dog/d&#125;&#125;'</span> <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 从第一行到最后一行，如果匹配到空格，则去除空格</span></span><br><span class="line">sed <span class="string">'1,$&#123;s/ *//g&#125;'</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/group.png" alt="group"></p>
<h4 id="持有空间"><a href="#持有空间" class="headerlink" title="持有空间"></a>持有空间</h4><p>持有空间（Hold Space），可以存放模式空间中的内容，也可以取出内容追加或覆盖到模式空间中。</p>
<p>常用命令参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>g</code></td>
<td>将<code>hold space</code>中的内容拷贝到<code>pattern space</code>中，原来<code>pattern space</code>里的内容清除</td>
</tr>
<tr>
<td><code>G</code></td>
<td>将<code>hold space</code>中的内容<code>append</code>到<code>pattern space</code>后</td>
</tr>
<tr>
<td><code>h</code></td>
<td>将<code>pattern space</code>中的内容拷贝到<code>hold space</code>中，原来的<code>hold space</code>里的内容被清除</td>
</tr>
<tr>
<td><code>H</code></td>
<td>将<code>pattern space</code>中的内容<code>append</code>到<code>hold space</code>后</td>
</tr>
<tr>
<td><code>x</code></td>
<td>交换<code>pattern space</code>和<code>hold space</code>的内容</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 将模式空间内容追加到持有空间中</span></span><br><span class="line">echo <span class="string">"one\ntwo\nthree"</span> <span class="string">| sed "</span>H;g<span class="string">"</span></span><br><span class="line"><span class="meta"># 若只想看到结果，使用以下命令</span></span><br><span class="line">echo <span class="string">"one\ntwo\nthree"</span> <span class="string">| sed -n "</span>H;p<span class="string">"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/hold1.png" alt="hold1"></p>
<p>具体过程如下：</p>
<p><img src="/uploads/in-post/sed/hold1_proc.jpg" alt="hold1 proc"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件进行反序</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"one\ntwo\nthree"</span> | sed <span class="string">'1!G;h;$!d'</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/hold2.png" alt="hold2"></p>
<p>其中的 ‘1!G;h;$!d’ 可拆解为三个命令：</p>
<ul>
<li>1!G —— 只有第一行不执行G命令，将hold space中的内容append回到pattern space</li>
<li>h —— 每一行都执行h命令，将pattern space中的内容拷贝到hold space中</li>
<li>$!d —— 除了最后一行不执行d命令，其它行都执行d命令，删除当前行</li>
</ul>
<p>具体过程如下：</p>
<p><img src="/uploads/in-post/sed/hold2_proc.jpg" alt="hold2 proc"></p>
<h3 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h3><h4 id="常用参数介绍"><a href="#常用参数介绍" class="headerlink" title="常用参数介绍"></a>常用参数介绍</h4><p><code>sed</code>命令的语法为：<code>sed [参数]... [执行命令] [输入文件]...</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"1s/Hello/World/"</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/basic.png" alt="basic"></p>
<p>常用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-n</code></td>
<td>安静模式，只打印受影响的行，默认打印输入数据的全部内容</td>
</tr>
<tr>
<td><code>-e script</code></td>
<td>用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数</td>
</tr>
<tr>
<td><code>-f filename</code></td>
<td>指定执行filename文件中的命令</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>使用扩展正则表达式，默认为标准正则表达式</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>将直接修改输入文件内容，而不是打印到标准输出设备</td>
</tr>
</tbody>
</table>
<h4 id="sed编辑器的执行命令"><a href="#sed编辑器的执行命令" class="headerlink" title="sed编辑器的执行命令"></a>sed编辑器的执行命令</h4><p>sed的执行命令格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">n1</span>][<span class="symbol">,n2</span>]command</span><br><span class="line">[<span class="string">n1</span>][<span class="symbol">~step</span>]command</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具体命令如下：</span></span><br><span class="line">sed -n <span class="string">'2,5p'</span> <span class="built_in">test</span> <span class="comment"># 打印2到5行</span></span><br><span class="line">sed -n <span class="string">'1~2p'</span> <span class="built_in">test</span> <span class="comment"># 打印奇数行</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/n.png" alt="n"></p>
<p>其中<code>n1</code>，<code>n2</code>表示输入内容的行号，它们之间为,逗号则表示从<code>n1</code>到<code>n2</code>行，如果为<code>～</code>波浪号则表示从<code>n1</code>开始以<code>step</code>为步进的所有行；<code>command</code>为执行动作，下面为一些常用动作指令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>s</code></td>
<td>行内替换</td>
</tr>
<tr>
<td><code>c</code></td>
<td>整行替换</td>
</tr>
<tr>
<td><code>a</code></td>
<td>插入到指定行的后面</td>
</tr>
<tr>
<td><code>i</code></td>
<td>插入到指定行的前面</td>
</tr>
<tr>
<td><code>p</code></td>
<td>打印指定行，通常与-n参数配合使用</td>
</tr>
<tr>
<td><code>d</code></td>
<td>删除指定行</td>
</tr>
<tr>
<td><code>g</code></td>
<td>一行上替换所有匹配</td>
</tr>
</tbody>
</table>
<h4 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h4><ul>
<li>打印指定行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">'1,6p'</span> <span class="built_in">test</span> <span class="comment"># 打印1到6行</span></span><br><span class="line">sed -n <span class="string">'2~2p'</span> <span class="built_in">test</span> <span class="comment"># 打印偶数行</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/n2.png" alt="n2"></p>
<ul>
<li>行内替换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将所有wen替换为hi</span></span><br><span class="line">sed -n <span class="string">"s/wen/hi/gp"</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/replace.png" alt="replace"></p>
<ul>
<li>行间替换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将第五行替换为wonderful</span></span><br><span class="line">sed <span class="string">"5c\wonderful"</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/line.png" alt="line"></p>
<ul>
<li>行首插入字符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每行头部插入#+空格</span></span><br><span class="line">sed <span class="string">'s/^/# /g'</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/head.png" alt="head"></p>
<ul>
<li>行尾插入字符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每行行末插入空格+!</span></span><br><span class="line">sed <span class="string">'s/$/ !/g'</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/tail.png" alt="tail"></p>
<ul>
<li>行间插入字符</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 在第一行之前插入hello</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"1 i hello"</span></span><br><span class="line"># 在第一行之后插入hello</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"1 a hello"</span></span><br><span class="line"># 在匹配到的aaa之后插入hello</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"/aaa/a hello"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/aandi.png" alt="aandi"></p>
<ul>
<li>指定替换内容</li>
</ul>
<p>将数字<code>n</code>放在脚本头部表示匹配第<code>n</code>行：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 替换第<span class="number">3</span>行的所有a</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>"</span> | sed <span class="string">"3s/a/A/g"</span></span><br><span class="line"># 替换第<span class="number">3</span>到<span class="number">6</span>行的所有a</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>"</span> | sed <span class="string">"3,6s/a/A/g"</span></span><br><span class="line"># 替换奇数行的所有a</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>"</span> | sed <span class="string">"1~2s/a/A/g"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/number_head.png" alt="number head"></p>
<p>将数字<code>n</code>放在脚本尾部表示匹配每行的第<code>n</code>个字符：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 替换每一行的第<span class="number">2</span>个s</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>"</span> | sed <span class="string">"s/a/A/1"</span></span><br><span class="line"># 替换每一行的第<span class="number">3</span>个s</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>"</span> | sed <span class="string">"s/a/A/3"</span></span><br><span class="line"># 替换每一行的第<span class="number">2</span>个之后s</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>"</span> | sed <span class="string">"s/a/A/g2"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/number_tail.png" alt="number tail"></p>
<ul>
<li>多个匹配</li>
</ul>
<p>如果需要一次性匹配多个模式，可使用命令：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa"</span> | sed <span class="string">"1,3 s/a/A/g; 4,$ s/a/B/g"</span></span><br><span class="line"># 上面的命令等价于：</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa"</span> | sed -e <span class="string">"1,3 s/a/A/g"</span> -e <span class="string">"4,$ s/a/B/g"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/multi.png" alt="multi"></p>
<p>注意： <code>4,$ s/A/B/g</code>两个命令之间是有空格的。</p>
<ul>
<li>使用匹配的变量</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 每个aaa都用中括号圈起来</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa"</span> | sed <span class="string">"s/aaa/[&amp;]/g"</span></span><br><span class="line"># 复制每一个a</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa"</span> | sed <span class="string">"s/a/&amp;&amp;/g"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/variable.png" alt="variable"></p>
<ul>
<li>圆括号匹配</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line"># 匹配到aaa+任意字符串则将整个字符串划分为aa:a+任意字符串，<span class="symbol">\1</span>表示匹配第一个括号的内容，<span class="symbol">\2</span>同理</span><br><span class="line">echo "a<span class="symbol">\n</span>aa<span class="symbol">\n</span>aab<span class="symbol">\n</span>aaab<span class="symbol">\n</span>aaabb<span class="symbol">\n</span>aaabbb" | sed "s/<span class="symbol">\(</span>aa<span class="symbol">\)</span><span class="symbol">\(</span>a.*<span class="symbol">\)</span>/<span class="symbol">\1</span>:<span class="symbol">\2</span>/g"</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/bracket.png" alt="bracket"></p>
<ul>
<li>删除行</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 删除匹配aa的行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"/aa/d"</span></span><br><span class="line"># 删除第二行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"2d"</span></span><br><span class="line"># 删除第二行到尾行</span><br><span class="line">echo <span class="string">"a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb"</span> | sed <span class="string">"2,$ d"</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/in-post/sed/delete.png" alt="delete"></p>
<p><code>sed</code>的命令还有很多丰富的使用方法，可以参见<a href="http://www.gnu.org/software/sed/manual/sed.html" target="_blank" rel="noopener">官方手册</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Sed</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--简介</title>
    <url>/2018/02/25/2018-02-25-design-pattern-intro/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>所谓<code>模式</code>，就是在特定环境下人们对某类重复出现的问题提出的一套有效的解决方案。</p>
<p>而设计模式(<code>Design Pattern</code>)，则是针对软件设计过程中，可能遇到的重复问题的合理解决方案。</p>
<p>设计模式提出的根本目的就是解决现实生活中的问题，每种设计模式都有对应的现实问题及其解决方案，找到对应的问题便能够快速的利用设计模式进行解决。</p>
<p>设计模式一般包含模式名称、解决的问题，解决方案和应对效果等部分。</p>
<p>使用设计模式的目的是为了提高代码的可重用性；按照一定的规则编写代码，能够让自己的代码更加容易被其他编程人员所理解；同时，在一定的规则内编写代码，可以在一定程度上提升代码的可靠性。</p>
<a id="more"></a>
<h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>根据设计模式的参考书<code>Design Patterns - Elements of Reusable Object-Oriented Software</code>中所提到的，总共有 23 种设计模式。</p>
<p>常用设计模式一览：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>模式名称</th>
<th>使用频率</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建型模式</td>
<td><a href="/2018/06/15/2018-06-15-design-pattern-factory-method/">工厂方法模式 Factory Method Pattern</a></td>
<td>★★★★★</td>
</tr>
<tr>
<td>创建型模式</td>
<td><a href="/2018/06/25/2018-06-25-design-pattern-abstract-factory/">抽象工厂模式 Abstract Factory Pattern</a></td>
<td>★★★★★</td>
</tr>
<tr>
<td>创建型模式</td>
<td><a href="/2016/03/28/2016-03-28-singleton-eight-type/">单例模式 Singleton Pattern</a></td>
<td>★★★★☆</td>
</tr>
<tr>
<td>创建型模式</td>
<td><a href="/2018/06/16/2018-06-16-design-pattern-factory-method/">简单工厂模式 Simple Factory Pattern</a></td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>创建型模式</td>
<td>原型模式 Prototype Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>创建型模式</td>
<td>建造者模式 Builder Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>–</td>
<td>–</td>
<td>–</td>
</tr>
<tr>
<td>结构型模式</td>
<td>外观模式 Façade Pattern</td>
<td>★★★★★</td>
</tr>
<tr>
<td>结构型模式</td>
<td>代理模式 Proxy Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>适配器模式 Adapter Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>组合模式 Composite Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>桥接模式 Bridge Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>装饰模式 Decorator Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>享元模式 Flyweight Pattern</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>–</td>
<td>–</td>
<td>–</td>
</tr>
<tr>
<td>行为型模式</td>
<td>迭代器模式 Iterator Pattern</td>
<td>★★★★★</td>
</tr>
<tr>
<td>行为型模式</td>
<td><a href="/2018/06/26/2018-06-26-design-pattern-observer/">观察者模式 Observer Pattern</a></td>
<td>★★★★★</td>
</tr>
<tr>
<td>行为型模式</td>
<td><a href="/2018/06/27/2018-06-27-design-pattern-strategy/">策略模式 Strategy Pattern</a></td>
<td>★★★★☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>命令模式 Command Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>模板方法模式 Template Method Patter</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>状态模式 State Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>中介者模式 Mediator Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>备忘录模式 Memento Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>职责链模式 Chain of Responsibility Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>访问者模式 Visitor Pattern</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>解释器模式 Interpreter Pattern</td>
<td>★☆☆☆☆</td>
</tr>
</tbody>
</table>
<h3 id="面向对象设计的几大原则"><a href="#面向对象设计的几大原则" class="headerlink" title="面向对象设计的几大原则"></a>面向对象设计的几大原则</h3><h4 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h4><p>简单来说就是一个类只负责一个功能，这样一个类的职责就不会出现大量耦合，重用性也会更高。</p>
<h4 id="开闭原则（Open-Closed-Principle）"><a href="#开闭原则（Open-Closed-Principle）" class="headerlink" title="开闭原则（Open-Closed Principle）"></a>开闭原则（Open-Closed Principle）</h4><p>一个软件应当对扩展开放，而对修改关闭。即软件应当尽量在不修改原代码的基础上进行扩展。想要达到这个效果，需要使用接口和抽象类。</p>
<h4 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h4><p>任何可以使用基类的地方，其子类一定也能够被使用。按照里氏原则，子类必须实现父类的所有方法，当我们设计父类时，尽量把父类设计为抽象类或接口，这样运行时子类替换父类实例，可以很轻松的扩展系统功能。</p>
<h4 id="依赖倒置原则（Dependency-Inversion-Principle）"><a href="#依赖倒置原则（Dependency-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependency Inversion Principle）"></a>依赖倒置原则（Dependency Inversion Principle）</h4><p>抽象不应该依赖于细节，而细节应该依赖于抽象。即我们应该面向接口编程，而不是针对实现编程。一个具体类应当只实现接口或抽象类中声明过的方法，而不应给出多余的方法。</p>
<h4 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h4><p>使用多个隔离的接口，而不是使用单一的接口，即当一个接口太大时，我们应当将其分割为隔离的多个接口，可以减小类之间的耦合。</p>
<h4 id="合成复用原则（Composition-Aggregate-Reuse-Principle）"><a href="#合成复用原则（Composition-Aggregate-Reuse-Principle）" class="headerlink" title="合成复用原则（Composition/Aggregate Reuse Principle）"></a>合成复用原则（Composition/Aggregate Reuse Principle）</h4><p>尽量使用对象组合，而不是继承来达到复用的目的。</p>
<h4 id="迪米特法则（Law-of-Demeter）"><a href="#迪米特法则（Law-of-Demeter）" class="headerlink" title="迪米特法则（Law of Demeter）"></a>迪米特法则（Law of Demeter）</h4><p>一个软件的实体应当尽可能少的和其他实体发生相互作用，而成为一个独立的模块。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA和gradle创建超市管理系统（壹）-- 环境配置</title>
    <url>/2017/01/01/2017-01-01-idea-gradle-tssm-supermarket-manage-system-1/</url>
    <content><![CDATA[<blockquote>
<p>“IDEA是jetbrains公司开发的Java开发IDE，功能齐全。使用IDEA搭建SSM开发环境简单有效。本项目基于Spring，Spring MVC和MyBatis进行开发，模板引擎为Thymeleaf。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a>是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。</p>
<p><a href="http://spring.io/" target="_blank" rel="noopener">Spring MVC</a>属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建Web应用程序的全功能<code>MVC</code>模块。</p>
<p><a href="http://blog.mybatis.org/" target="_blank" rel="noopener">MyBatis</a>本是apache的一个开源项目<code>iBatis</code>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为<code>MyBatis</code> 。2013年11月迁移到<code>Github</code>。</p>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.安装<code>mysql</code>，并完成相应数据库的建立</p>
<p>2.安装<code>IDEA</code>完整版或社区版</p>
<p>3.下载tomcat或其他服务器</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>打开<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA</a>软件，选择Create New Project：</p>
<p><img src="/uploads/in-post/sms/start.png" alt></p>
<p>选择创建基于gradle的java web项目：</p>
<p><img src="/uploads/in-post/sms/selectGradle.png" alt></p>
<p>输入GroupId和ArtifactId：</p>
<p><img src="/uploads/in-post/sms/groupAndArtifact.png" alt></p>
<p>选择gradle的来源，可以用自己下载的gradle，也可以使用IDEA内建的gradle版本：</p>
<p><img src="/uploads/in-post/sms/gradleSource.png" alt></p>
<p>选择项目的目录：</p>
<p><img src="/uploads/in-post/sms/projectLocation.png" alt></p>
<p>点击完成，会生成一个最基本的java web目录，增加文件夹和相应文件，将其目录结构改为以下结构：</p>
<p><img src="/uploads/in-post/sms/projectDirectory.png" alt></p>
<p>其中resources目录中的config文件夹中的文件和WEB-INF文件夹下的web.xml，<br>以及build.gradle都是自己进行配置的。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.edu.bupt.wen"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态文件访问权限配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"statics/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mybatis.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-thymeleaf.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="jdbc-mysql-properties"><a href="#jdbc-mysql-properties" class="headerlink" title="jdbc-mysql.properties"></a>jdbc-mysql.properties</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jdbc.jarDirection后的内容更改为gradle下载的</span></span><br><span class="line"><span class="comment"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示</span></span><br><span class="line">jdbc.<span class="attribute">jarDirection</span>=/Users/wenzhiquan/.gradle/caches/modules-2/files-2.1/mysql\</span><br><span class="line">/mysql-connector-java/5.1.40/ef2a2ceab1735eaaae0b5d1cccf574fb7c6e1c52/\</span><br><span class="line">mysql-connector-java-5.1.40.jar</span><br><span class="line">jdbc.<span class="attribute">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/nowcoder?\</span><br><span class="line"><span class="attribute">useUnicode</span>=<span class="literal">true</span>&amp;characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="line">jdbc.<span class="attribute">username</span>=root</span><br><span class="line">jdbc.<span class="attribute">password</span>=root</span><br></pre></td></tr></table></figure>
<h5 id="spring-mybatis-xml"><a href="#spring-mybatis-xml" class="headerlink" title="spring-mybatis.xml"></a>spring-mybatis.xml</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 引入外部数据源配置信息 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:config/mybatis/jdbc-mysql.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driverClassName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置Session工厂 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 加载mybatis-config.xml文件 &amp;ndash;&amp;gt;--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--&lt;property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"&gt;&lt;/property&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.edu.bupt.wen.model"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"mapperLocations"</span>  <span class="attr">value</span>=<span class="string">"classpath:sqlMapper/*.xml"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 自动扫描所有的Mapper接口与文件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.edu.bupt.wen.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span></span></span></span><br><span class="line"><span class="xml">          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实体类,简称 -设置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"User"</span> <span class="attr">type</span>=<span class="string">"cn.edu.bupt.wen.model.User"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实体接口映射资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sqlMapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：在spring-mybatis.xml文件中配置session工厂时，如果配置了configLocation这一个property的话，需要指定mybatis配置文件的位置，如果配置了typeAliasesPackage和mapperLocations这两个property的话，就不再需要配置configLocation这个property了。</p>
<h5 id="spring-thymeleaf-xml"><a href="#spring-thymeleaf-xml" class="headerlink" title="spring-thymeleaf.xml"></a>spring-thymeleaf.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Thymeleaf View Resolver - implementation of Spring's ViewResolver interface --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 解决中文乱码问题 template resolver中需要同时加上这个参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Thymeleaf Template Engine (Spring4-specific version) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateResolvers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Thymeleaf Template Resolver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/templates/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--解决中文乱码问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">group <span class="string">'cn.edu.bupt.wen'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'groovy'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'idea'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter &#123;</span><br><span class="line">            url <span class="string">"http://jcenter.bintray.com/"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter &#123;</span><br><span class="line">            url <span class="string">"http://jcenter.bintray.com/"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置gradle的依赖项</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.codehaus.groovy'</span>, <span class="string">name:</span> <span class="string">'groovy-all'</span>, <span class="string">version:</span> <span class="string">'2.4.7'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'javax.servlet'</span>, <span class="string">name:</span> <span class="string">'jstl'</span>, <span class="string">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    <span class="comment">// Slf4j</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-api'</span>, <span class="string">version:</span> <span class="string">'1.7.22'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">name:</span> <span class="string">'slf4j-simple'</span>, <span class="string">version:</span> <span class="string">'1.7.22'</span></span><br><span class="line">    <span class="comment">//fastJson</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'com.alibaba'</span>, <span class="string">name:</span> <span class="string">'fastjson'</span>, <span class="string">version:</span> <span class="string">'1.2.23'</span></span><br><span class="line">    <span class="comment">//apache common lang</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.commons'</span>, <span class="string">name:</span> <span class="string">'commons-lang3'</span>, <span class="string">version:</span> <span class="string">'3.5'</span></span><br><span class="line">    <span class="comment">//java servlet api</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'javax.servlet'</span>, <span class="string">name:</span> <span class="string">'javax.servlet-api'</span>, <span class="string">version:</span> <span class="string">'4.0.0-b01'</span></span><br><span class="line">    <span class="comment">// thymeleaf</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.thymeleaf'</span>, <span class="string">name:</span> <span class="string">'thymeleaf'</span>, <span class="string">version:</span> <span class="string">'3.0.2.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.thymeleaf'</span>, <span class="string">name:</span> <span class="string">'thymeleaf-spring4'</span>, <span class="string">version:</span> <span class="string">'3.0.2.RELEASE'</span></span><br><span class="line">    <span class="comment">// Aspectj</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.aspectj'</span>, <span class="string">name:</span> <span class="string">'aspectjrt'</span>, <span class="string">version:</span> <span class="string">'1.8.9'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.aspectj'</span>, <span class="string">name:</span> <span class="string">'aspectjweaver'</span>, <span class="string">version:</span> <span class="string">'1.8.9'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.aspectj'</span>, <span class="string">name:</span> <span class="string">'aspectjtools'</span>, <span class="string">version:</span> <span class="string">'1.8.9'</span></span><br><span class="line">    <span class="comment">// Spring</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-core'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-web'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-webmvc'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-jdbc'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-aop'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-context'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-beans'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-test'</span>, <span class="string">version:</span> <span class="string">'4.3.4.RELEASE'</span></span><br><span class="line">    <span class="comment">// MyBatis</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.mybatis'</span>, <span class="string">name:</span> <span class="string">'mybatis'</span>, <span class="string">version:</span> <span class="string">'3.4.1'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.mybatis'</span>, <span class="string">name:</span> <span class="string">'mybatis-spring'</span>, <span class="string">version:</span> <span class="string">'1.3.0'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'mysql'</span>, <span class="string">name:</span> <span class="string">'mysql-connector-java'</span>, <span class="string">version:</span> <span class="string">'5.1.40'</span></span><br><span class="line">    <span class="comment">// junit</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="下载gradle依赖包"><a href="#下载gradle依赖包" class="headerlink" title="下载gradle依赖包"></a>下载gradle依赖包</h4><p>至此，基本的配置就完成了，接下来就需要运行gradle下载相应的依赖包了，<br>操作如下：打开<code>IDEA &gt; View &gt; Tool Windows &gt; gradle</code>:</p>
<p><img src="/uploads/in-post/sms/runGradle.png" alt></p>
<p>点击图中的按钮，IDEA就会自动下载依赖包了。</p>
<p>下载完成后，目录下的<code>External Libraries</code>文件夹会生成相应的目录：</p>
<p><img src="/uploads/in-post/sms/gradleDownload.png" alt></p>
<p>下载完依赖包之后，整体的配置基本上就完成了。</p>
<h3 id="部署到Tomcat服务器"><a href="#部署到Tomcat服务器" class="headerlink" title="部署到Tomcat服务器"></a>部署到Tomcat服务器</h3><p>打开<code>IDEA &gt; Run &gt; Edit Configurations...</code></p>
<p><img src="/uploads/in-post/sms/tomcatConf.png" alt></p>
<p>点击tomcat server的local选项，点击右上角的<code>configure...</code>，<br>在弹出的对话框中选中下载的Tomcat根目录：</p>
<p><img src="/uploads/in-post/sms/tomcatHome.png" alt></p>
<p>然后将配置好的tomcat添加到运行库当中：</p>
<p><img src="/uploads/in-post/sms/addTomcat.png" alt></p>
<p>然后在Deployment选项卡中添加项目即可：</p>
<p><img src="/uploads/in-post/sms/tomcatDeployment.png" alt></p>
<h3 id="编写代码并运行"><a href="#编写代码并运行" class="headerlink" title="编写代码并运行"></a>编写代码并运行</h3><h4 id="编写controller代码"><a href="#编写controller代码" class="headerlink" title="编写controller代码"></a>编写controller代码</h4><p>在controller文件夹中创建<code>IndexController</code>文件，将代码修改为：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package cn.edu.bupt.wen.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RequestMapping</span>;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RequestMethod</span>;</span><br><span class="line">/**</span><br><span class="line"> * Author wenzhiquan</span><br><span class="line"> * Created on <span class="number">16</span>/<span class="number">4</span>/<span class="number">12</span> 下午<span class="number">12</span>:<span class="number">25</span></span><br><span class="line"> * File <span class="symbol">name:</span> IndexController.java</span><br><span class="line"> * <span class="symbol">Description:</span> null</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@Controller</span></span><br><span class="line"><span class="regexp">public class IndexController &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   @RequestMapping(path = &#123;"/</span><span class="string">", "</span>/index<span class="string">"&#125;, method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="string">   public String index()&#123;</span></span><br><span class="line"><span class="string">       return "</span>index<span class="string">";</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改index-html"><a href="#修改index-html" class="headerlink" title="修改index.html"></a>修改index.html</h4><p>将index.html文件修改为自己想要的样式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="运行Tomcat"><a href="#运行Tomcat" class="headerlink" title="运行Tomcat"></a>运行Tomcat</h4><p><img src="/uploads/in-post/sms/runTomcat.png" alt></p>
<p>点击运行按钮，服务器启动后会自动启动浏览器进入主界面：</p>
<p><img src="/uploads/in-post/sms/index.png" alt></p>
<p>至此，<code>hello world</code>程序已经完成。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 简介</title>
    <url>/2018/04/15/2018-04-15-spring-introduction/</url>
    <content><![CDATA[<blockquote>
<p>“本章将从宏观的层面上介绍 Spring。”</p>
</blockquote>
<h3 id="简化-Java-开发"><a href="#简化-Java-开发" class="headerlink" title="简化 Java 开发"></a>简化 Java 开发</h3><p>Spring 采取 4 种关键策略简化 Java 开发：</p>
<ul>
<li>基于 POJO 的轻量级和最小侵入性编程</li>
<li>通过依赖注入和面向接口实现松耦合</li>
<li>基于切面和惯例进行声明式编程</li>
<li>通过切面和模板减少样板式代码</li>
</ul>
<a id="more"></a>
<h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><p>Spring 不强迫实现 Spring 规范的接口或继承 Spring 规范的类，最坏的场景是使用了 Sprin 的注解，但他依旧是 POJO。</p>
<p>Spring 赋予 POJO 魔力的方式是通过 DI 来装配他们。</p>
<h4 id="依赖注（Dependenc-Injection）"><a href="#依赖注（Dependenc-Injection）" class="headerlink" title="依赖注（Dependenc Injection）"></a>依赖注（Dependenc Injection）</h4><p>依赖注入又可以称为控制反转（IOC，Inversion of Control），通过使用 DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象时进行设定，对象无需自行创建或管理他们的依赖关系。</p>
<p>依赖注入有四种方式：</p>
<ol>
<li>构造器注入</li>
<li>setter 注入</li>
<li>静态工厂的方法注入</li>
<li>实例工厂的方法注入</li>
</ol>
<p>DI 带来的最大收益是 <strong>松耦合</strong>，创建应用组件之间的行为通常称为 <code>装配</code>（wiring），Spring 支持使用 XM 文件和 Java 文件来进行装配</p>
<p>Spring 通过应用上下文（Applicaiton Context）装载 bea 的定义并把它们组装起来。Spring 应用上下文全权负责对象的创建和组装。</p>
<h4 id="应用切面"><a href="#应用切面" class="headerlink" title="应用切面"></a>应用切面</h4><p>面向切面编程（Aspect-Oriented Programming) 允许你把遍布应用各处的功能分离出来形成可重用的组件，可以使服务模块化，并以声明的方式将他们应用到他们需要影响的组件中去。</p>
<p>定义方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"beanname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcutId"</span> <span class="attr">expression</span>=<span class="string">"execution(* *.functionName(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcutId"</span> <span class="attr">method</span>=<span class="string">"beforeMethodName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcutId"</span> <span class="attr">method</span>=<span class="string">"afterMethodName"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用模板消除样板式代码"><a href="#使用模板消除样板式代码" class="headerlink" title="使用模板消除样板式代码"></a>使用模板消除样板式代码</h4><p>Spring 的 JdbcTemplate 使得执行数据库操作时，避免传统的 JDBC 样板代码成为了可能。</p>
<h3 id="容纳你的-Bean"><a href="#容纳你的-Bean" class="headerlink" title="容纳你的 Bean"></a>容纳你的 Bean</h3><p>在基于 Spring 的应用中，应用对象生存在 Spring 容器中，Spring 容器负责创建对象，装配对象，配置对象管理他们的整个生命周期。</p>
<p>容器是 Spring 的核心，Spring 容器使用 DI 管理构成应用的组件，他会创建相互协作的组件之间的关联。</p>
<h4 id="使用应用上下文"><a href="#使用应用上下文" class="headerlink" title="使用应用上下文"></a>使用应用上下文</h4><p>Spring 自带多种类型的应用上下文，常用的有以下几种：</p>
<ul>
<li>AnnotationConfigApplicationContext：从一个或多个基于 Java 的配置类中加载 Spring 应用上下文</li>
<li>AnnotationConfigWebApplicationContext：从一个或多个基于 Java 的配置类中加载 Spring Web 应用上下文</li>
<li>ClassPathXmlApplicationContext：从类路径下的一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义文件作为类资源</li>
<li>FileSystemXmlApplicationContext：从文件系统下的一个或多个 XMl 配置文件中加载上下文定义</li>
<li>XmlWebApplicationContex：从 Web 应用的一个或多个 XML 配置文件中加载上下文定义</li>
</ul>
<h4 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h4><p>Spring 容器中的 Bean 生命周期比较复杂，如下图：</p>
<p><img src="/uploads/in-post/spring-introduciton/bean_lifecycle.png" alt></p>
<h5 id="实例化-Bean"><a href="#实例化-Bean" class="headerlink" title="实例化 Bean"></a>实例化 Bean</h5><p>当客户向容器请求一个尚未初始化的 Bean 时，或初始化 Bean 时需要注入另一个尚未初始化的依赖时，容器就会调用 createBean 方法进行实例化，实例化对象呗包装在 BeanWrapper 对象中，BeanWrapper 提供了设置对象属性的接口，这个步骤没有进行依赖注入。</p>
<h5 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h5><p>Spring 根据 BeanDefinition 中的信息，将值和 Bean 的引用通过 BeanWrapper 提供的设置属性的接口注入到 Bean 对应的属性中。</p>
<h5 id="调用-setBeanName-方法"><a href="#调用-setBeanName-方法" class="headerlink" title="调用 setBeanName() 方法"></a>调用 setBeanName() 方法</h5><p>如果 Bean 实现了 BeanNameAware 接口，Spring 将 Bean 的 ID 传递给 setBeanName(String beanId) 方法</p>
<h5 id="调用-setBeanFactory-方法"><a href="#调用-setBeanFactory-方法" class="headerlink" title="调用 setBeanFactory() 方法"></a>调用 setBeanFactory() 方法</h5><p>如果 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 setBeanFactory() 方法，传入 BeanFactory 容器。</p>
<h5 id="调用-setApplicationContext-方法"><a href="#调用-setApplicationContext-方法" class="headerlink" title="调用 setApplicationContext() 方法"></a>调用 setApplicationContext() 方法</h5><p>如果 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 setApplicationContext() 方法，传入 Bean 所在的应用上下文的引用。</p>
<h5 id="调用-BeanPostProcessor-接口的-postProcessBeforeInitialization-方法"><a href="#调用-BeanPostProcessor-接口的-postProcessBeforeInitialization-方法" class="headerlink" title="调用 BeanPostProcessor 接口的 postProcessBeforeInitialization() 方法"></a>调用 BeanPostProcessor 接口的 postProcessBeforeInitialization() 方法</h5><p>如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 postProcessBeforeInitialization() 方法，当前正在初始化的对象会被传递进来，我们就可以对这个 Bean 做任何处理，此函数会先于 InitializationBean 执行，因此称为前置处理，<code>所有 Aware 接口的注入</code> 就是在这一步完成的。</p>
<h5 id="调用-InitializingBean-接口的-afterPropertiesSet-方法"><a href="#调用-InitializingBean-接口的-afterPropertiesSet-方法" class="headerlink" title="调用 InitializingBean 接口的 afterPropertiesSet() 方法"></a>调用 InitializingBean 接口的 afterPropertiesSet() 方法</h5><p>当前置处理完成后进入本阶段，本阶段可以在 Bean 正式构建前增加我们自定义的逻辑，但是由于并没有把 Bean 对象传递进来，因此本阶段无法处理对象本身，只能增加一些额外的逻辑。</p>
<p>若要使用他，需要让 Bean 实现该接口，并把要增加的逻辑写入该函数当中，Spring 火灾前置处理完成后检测当前 Bean 是否实现了该接口，并执行该函数。</p>
<p>类似地，Spring 为 Bean 的配置提供了 init-method 属性，该属性指定了在本阶段需要执行的函数名，Spring 会在初始化阶段执行设置的函数。init-method 本质上也是使用了 InitializingBean 接口。</p>
<h5 id="调用-BeanPostProcessor-接口的-postProcessAfterInitialization-方法"><a href="#调用-BeanPostProcessor-接口的-postProcessAfterInitialization-方法" class="headerlink" title="调用 BeanPostProcessor 接口的 postProcessAfterInitialization() 方法"></a>调用 BeanPostProcessor 接口的 postProcessAfterInitialization() 方法</h5><p>如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 postProcessAfterInitialization() 方法，当前正在初始化的 Bean 对象会被传递进来，我们可以对这个对象做任何处理，这个函数回来 InitializingBean 完成后执行，因此成为后置处理。</p>
<h5 id="准备就绪"><a href="#准备就绪" class="headerlink" title="准备就绪"></a>准备就绪</h5><p>此时，Bean 已经准备就绪，可以被应用程序使用了，他们将一直驻留在应用上下文中，直到被该应用上下文销毁。</p>
<h5 id="调用-DisposableBean-接口的-destroy-方法"><a href="#调用-DisposableBean-接口的-destroy-方法" class="headerlink" title="调用 DisposableBean 接口的 destroy() 方法"></a>调用 DisposableBean 接口的 destroy() 方法</h5><p>如果 Bean 实现了 DisposableBean 接，Spring 将调它的 destroy()方法，可以在 Bean 销毁前执行指定的逻辑，类似的，通过给 destroy-method 属性指定函数，可以在 Bean 小回迁执行这个函数</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA和gradle创建超市管理系统（贰）-- 登录注册功能</title>
    <url>/2017/02/05/2017-02-05-idea-gradle-tssm-supermarket-manage-system-2/</url>
    <content><![CDATA[<blockquote>
<p>“IDEA是jetbrains公司开发的Java开发IDE，功能齐全。使用IDEA搭建SSM开发环境简单有效。本项目基于Spring，Spring MVC和MyBatis进行开发，模板引擎为Thymeleaf。”</p>
</blockquote>
<h3 id="主要功能概述"><a href="#主要功能概述" class="headerlink" title="主要功能概述"></a>主要功能概述</h3><p>因为是为超市定制的管理系统，所以只会有内部人员进行使用，这就意味着新用户是需要拥有权限的人来进行添加，故需要实现的功能主要包括以下两点：</p>
<ul>
<li>用户添加</li>
<li>用户登录</li>
</ul>
<p>这两点功能中又包含了一些更细小的功能，将在后续章节进行详细的介绍。</p>
<a id="more"></a>
<h3 id="后台前端模板"><a href="#后台前端模板" class="headerlink" title="后台前端模板"></a>后台前端模板</h3><p>由于本人不擅长前端页面的编写，故采用了开源的后台系统模板进行改造，后台系统模板的名称为<a href="https://colorlib.com/polygon/gentelella/index.html" target="_blank" rel="noopener">Gentallela</a>，下载地址是在作者的<a href="https://github.com/puikinsh/gentelella" target="_blank" rel="noopener">Github</a>，感兴趣的同学可以前往下载。</p>
<h3 id="用户添加功能"><a href="#用户添加功能" class="headerlink" title="用户添加功能"></a>用户添加功能</h3><p>用户添加功能分为以下几个步骤进行完成：</p>
<ul>
<li>添加数据库</li>
<li>编写对应的model</li>
<li>编写对应的mapper</li>
<li>编写对应的service</li>
<li>编写对应的controller</li>
<li>编写对应的js请求和前端页面</li>
</ul>
<h4 id="添加数据库"><a href="#添加数据库" class="headerlink" title="添加数据库"></a>添加数据库</h4><p>首先需要建立一个user表，用于存储用户信息。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) unsigned <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'用户ID'</span>,</span><br><span class="line">  `username` varchar(20) <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">''</span> COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `password` varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">''</span> COMMENT <span class="string">'用户密码'</span>,</span><br><span class="line">  `email` varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">'用户邮箱'</span>,</span><br><span class="line">  `salt` int(4) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">'盐'</span>,</span><br><span class="line">  `authority` int(2) <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">'0'</span> COMMENT <span class="string">'用户身份'</span>,</span><br><span class="line">  `status` int(1) <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">'1'</span> COMMENT <span class="string">'账户状态'</span>,</span><br><span class="line">  `created_time` datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `updated_time` datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=6<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
<p>其中<code>salt</code>的作用是和<code>password</code>一起作用生成一个不可破解的密码，加密方式用的是<code>MD5</code>加密。</p>
<h4 id="编写User类"><a href="#编写User类" class="headerlink" title="编写User类"></a>编写User类</h4><p>User类中的属性和数据库的字段是一一对应的。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> Date updatedTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要生成所有属性的get和set方法。</span></span><br></pre></td></tr></table></figure>
<h4 id="编写UserMapper接口和UserMapper-xml文件"><a href="#编写UserMapper接口和UserMapper-xml文件" class="headerlink" title="编写UserMapper接口和UserMapper.xml文件"></a>编写UserMapper接口和UserMapper.xml文件</h4><p>UserMapper接口为UserService提供可以调用的数据库操作接口。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    // 由于接口方法默认且必须是public的，所以无需添加此关键字</span><br><span class="line">    <span class="keyword">User</span> <span class="title">selectByName</span>(<span class="keyword">String</span> name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">User</span> <span class="title">selectByEmail</span>(<span class="keyword">String</span> name);</span><br><span class="line"></span><br><span class="line">    int addUser(<span class="keyword">User</span> <span class="title">user</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而UserMapper.xml用于实现具体的数据库调用方法。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org/DTD Mapper 3.0"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- namespace必须和UserMapper接口相对应 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.edu.bupt.wen.mapper.UserMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 自定义返回结果集 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 由于Mybatis无法自动将DateTime类型和java.util.Date类型进行自动映射，故需要手动配置 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"salt"</span> <span class="attr">column</span>=<span class="string">"salt"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"status"</span> <span class="attr">column</span>=<span class="string">"status"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createdTime"</span> <span class="attr">column</span>=<span class="string">"created_time"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span> <span class="attr">javaType</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"updatedTime"</span> <span class="attr">column</span>=<span class="string">"updated_time"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span> <span class="attr">javaType</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"tableName"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertFields"</span>&gt;</span>username, password, email, salt, status, created_time, updated_time<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectFields"</span>&gt;</span>id, <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertFields"</span>/&gt;</span><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 方法的id必须和UserMapper接口中定义的方法名相同 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- parameterType必须和传入的参数类型相同，若要传多个参数需要在Mapper接口中加@Param注解 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByName"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        SELECT</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectFields"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        FROM</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"tableName"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        WHERE username = #</span><span class="template-variable">&#123;username&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByEmail"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        SELECT</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectFields"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        FROM</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"tableName"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        WHERE email = #</span><span class="template-variable">&#123;email&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        INSERT INTO</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"tableName"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertFields"</span>/&gt;</span>)</span></span><br><span class="line"><span class="xml">        VALUES</span></span><br><span class="line"><span class="xml">        (#</span><span class="template-variable">&#123;username&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;password&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;email&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;salt&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;status&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;createdTime&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;updatedTime&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="编写UserService"><a href="#编写UserService" class="headerlink" title="编写UserService"></a>编写UserService</h4><p>UserService调用UserMapper的方法，并为UserController提供返回值。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> class UserService &#123;</span><br><span class="line">    <span class="comment">// 利用slf4j生成log信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserService.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User getUserByName(<span class="keyword">String</span> username) &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByName(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add a new user</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param username</span></span><br><span class="line"><span class="comment">     * @param email</span></span><br><span class="line"><span class="comment">     * @return map</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; addUser(<span class="keyword">String</span> username, <span class="keyword">String</span> email) &#123;</span><br><span class="line">        logger.info(<span class="string">"UserService addUser"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"username can not be empty"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userMapper.selectByName(username) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"username existed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(email)) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"email can not be empty"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userMapper.selectByEmail(email) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"email existed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 随机生成一个四位数的盐</span></span><br><span class="line">        <span class="built_in">int</span> salt = (<span class="built_in">int</span>)Math.<span class="built_in">random</span>() * <span class="number">8999</span> + <span class="number">1000</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.<span class="built_in">append</span>(MD5Util.md5(username + <span class="string">"123"</span>)).<span class="built_in">append</span>(<span class="keyword">String</span>.valueOf(salt));</span><br><span class="line">        <span class="keyword">String</span> password = MD5Util.md5(sb.toString());</span><br><span class="line">        <span class="built_in">int</span> status = Constant.Status.NEED_CHANGE_PWD.getIndex();</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        user.setEmail(email);</span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        user.setStatus(status);</span><br><span class="line">        user.setCreatedTime(date);</span><br><span class="line">        user.setUpdatedTime(date);</span><br><span class="line"></span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中使用的MD5Util为自己编写的MD5加密算法。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加密后的字符串</span></span><br><span class="line"><span class="comment">     * @param pw</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">md5</span><span class="params">(<span class="keyword">String</span> pw)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拿到一个MD5转换器（如果想要SHA1参数换成”SHA1”）</span></span><br><span class="line">            MessageDigest messageDigest =MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">// 输入的字符串转换成字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] inputByteArray = pw.getBytes();</span><br><span class="line">            <span class="comment">// inputByteArray是输入字符串转换得到的字节数组</span></span><br><span class="line">            messageDigest.update(inputByteArray);</span><br><span class="line">            <span class="comment">// 转换并返回结果，也是字节数组，包含16个元素</span></span><br><span class="line">            <span class="keyword">byte</span>[] resultByteArray = messageDigest.digest();</span><br><span class="line">            <span class="comment">// 字符数组转换成字符串返回</span></span><br><span class="line">            <span class="keyword">return</span> byteArrayToHex(resultByteArray);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">byteArrayToHex</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先初始化一个字符数组，用来存放每个16进制字符</span></span><br><span class="line">        <span class="keyword">char</span>[] hexDigits = &#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>, <span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span> &#125;;</span><br><span class="line">        <span class="comment">// new一个字符数组，这个就是用来组成结果字符串的（解释一下：一个byte是八位二进制，也就是2位十六进制字符（2的8次方等于16的2次方））</span></span><br><span class="line">        <span class="keyword">char</span>[] resultCharArray =<span class="keyword">new</span> <span class="keyword">char</span>[byteArray.length * <span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 遍历字节数组，通过位运算（位运算效率高），转换成字符放到字符数组中去</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : byteArray) &#123;</span><br><span class="line">            resultCharArray[index++] = hexDigits[b&gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">            resultCharArray[index++] = hexDigits[b&amp; <span class="number">0xf</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字符数组组合成字符串返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(resultCharArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Constant为自己编写的常量枚举魔法数</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Constant &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> <span class="keyword">Status</span> &#123;</span><br><span class="line">    AVAILABLE(<span class="string">"available"</span>, <span class="number">0</span>),</span><br><span class="line">    UNAVAILABLE(<span class="string">"unavailable"</span>, <span class="number">1</span>),</span><br><span class="line">    NEED_CHANGE_PWD(<span class="string">"need change password"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="keyword">name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">index</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Status</span>(String <span class="keyword">name</span>, <span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">        this.<span class="keyword">name</span> = <span class="keyword">name</span>;</span><br><span class="line">        this.<span class="built_in">index</span> = <span class="built_in">index</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getIndex() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">index</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static String getNameByIndex(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">        for (<span class="keyword">Status</span> c : <span class="keyword">Status</span>.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.getIndex() == <span class="built_in">index</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> c.<span class="keyword">name</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写UserController"><a href="#编写UserController" class="headerlink" title="编写UserController"></a>编写UserController</h4><p>UserController用于处理用户请求并返回数据。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(path = &#123;<span class="string">"/addUser"</span>&#125;, method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">addUser</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// model用于向view层返回数据</span></span><br><span class="line">    model.addAttribute(<span class="string">"title"</span>, <span class="string">"addUser"</span>);</span><br><span class="line">    <span class="comment">// 返回值为模板所在目录及其名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"user/addUser"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(path = &#123;<span class="string">"/addUser"</span>&#125;, method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">  @ResponseBody <span class="comment">// 加上此字段后表明返回的数据直接发送给浏览器而不经过模板引擎渲染</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">addUser</span><span class="params">(@RequestParam(<span class="string">"username"</span>) <span class="keyword">String</span> username,</span></span></span><br><span class="line"><span class="function"><span class="params">                        @RequestParam(<span class="string">"email"</span>) <span class="keyword">String</span> email,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = userService.addUser(username, email);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.containsKey(<span class="string">"msg"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonUtil.getJSONString(<span class="number">1</span>, <span class="built_in">map</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonUtil.getJSONString(<span class="number">0</span>, <span class="built_in">map</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"add user failed!"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"msg"</span>, <span class="string">"add user failed."</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonUtil.getJSONString(<span class="number">1</span>, <span class="built_in">map</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JsonUtil为自己编写的将数据转换为json字符串的工具类。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JsonUtil.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a json string with certain code</span></span><br><span class="line"><span class="comment">   * @author wenzhiquan</span></span><br><span class="line"><span class="comment">   * @param code</span></span><br><span class="line"><span class="comment">   * @return json String</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getJSONString</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">      JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">      json.<span class="built_in">put</span>(<span class="string">"code"</span>, code);</span><br><span class="line">      <span class="keyword">return</span> json.toJSONString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a json string with code and message</span></span><br><span class="line"><span class="comment">   * @author wenzhiquan</span></span><br><span class="line"><span class="comment">   * @param code</span></span><br><span class="line"><span class="comment">   * @param msg</span></span><br><span class="line"><span class="comment">   * @return json String</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getJSONString</span><span class="params">(<span class="keyword">int</span> code, <span class="keyword">String</span> msg)</span> </span>&#123;</span><br><span class="line">      JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">      json.<span class="built_in">put</span>(<span class="string">"code"</span>, code);</span><br><span class="line">      json.<span class="built_in">put</span>(<span class="string">"msg"</span>, msg);</span><br><span class="line">      <span class="keyword">return</span> json.toJSONString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a json string with code and map</span></span><br><span class="line"><span class="comment">   * @author wenzhiquan</span></span><br><span class="line"><span class="comment">   * @param code</span></span><br><span class="line"><span class="comment">   * @param map</span></span><br><span class="line"><span class="comment">   * @return json String</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getJSONString</span><span class="params">(<span class="keyword">int</span> code, Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line">      JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">      json.<span class="built_in">put</span>(<span class="string">"code"</span>, code);</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">String</span>, Object&gt; entry: <span class="built_in">map</span>.entrySet()) &#123;</span><br><span class="line">          json.<span class="built_in">put</span>(entry.<span class="built_in">getKey</span>(), entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> json.toJSONString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写对应的js请求和前端页面"><a href="#编写对应的js请求和前端页面" class="headerlink" title="编写对应的js请求和前端页面"></a>编写对应的js请求和前端页面</h4><p>前端页面分为base，nav和sidebar，和页面内容addUser四大部分。</p>
<p>nav:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/base::common_header(_)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- top navigation --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"top_nav"</span> <span class="attr">class</span>=<span class="string">"top_nav"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav_menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav toggle"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"menu_toggle"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bars"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"user-profile dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span></span></span></span><br><span class="line"><span class="xml">                       aria-expanded="false"&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/img.jpg"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/img/default.png&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">" fa fa-angle-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu dropdown-usermenu pull-right"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span> Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge bg-red pull-right"</span>&gt;</span>50%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>Help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-sign-out pull-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Log Out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- /top navigation --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>siderbar:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/base::common_header(_)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"sidebar"</span> <span class="attr">class</span>=<span class="string">"col-md-3 left_col"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_col scroll-view"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar nav_title"</span> <span class="attr">style</span>=<span class="string">"border: 0;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"site_title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-barcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>SMS<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- menu profile quick info --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile_pic"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/statics/img/img.jpg"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/img/default.png&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">"..."</span></span></span></span><br><span class="line"><span class="xml">                     class="img-circle profile_img"&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile_info"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Welcome,<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- /menu profile quick info --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- sidebar menu --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar-menu"</span> <span class="attr">class</span>=<span class="string">"main_menu_side hidden-print main_menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu_section"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>General<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav side-menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Home <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-chevron-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav child_menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-edit"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Authority <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-chevron-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav child_menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"form.html"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">addUser</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Add New User<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- /sidebar menu --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- menu footer buttons --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-footer hidden-small"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"top"</span> <span class="attr">title</span>=<span class="string">"Settings"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-cog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"top"</span> <span class="attr">title</span>=<span class="string">"FullScreen"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-fullscreen"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"top"</span> <span class="attr">title</span>=<span class="string">"Lock"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-eye-close"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"top"</span> <span class="attr">title</span>=<span class="string">"Logout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-off"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- /menu footer buttons --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>base:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"common_header(links)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Meta, title, CSS, favicons, etc. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;title&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Common styles and scripts --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/bootstrap/dist/css/bootstrap.min.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/font-awesome/css/font-awesome.min.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/css/custom.min.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/css/main.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--/* Per-page placeholder for additional links */--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:replace</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;links&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">th:fragment</span>=<span class="string">"common_body(content, scripts)"</span> <span class="attr">class</span>=<span class="string">"nav-md"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/sidebar::sidebar&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/nav::top_nav&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- page content --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right_col"</span> <span class="attr">role</span>=<span class="string">"main"</span> <span class="attr">th:include</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;content&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- /page content --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- footer content --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ©2017 All Rights Reserved</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hidden-xs"</span>&gt;</span>Powered By <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://wenzhiquan.github.io"</span></span></span></span><br><span class="line"><span class="xml">                                                      target="blank"&gt;Wen Zhiquan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- /footer content --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- jQuery --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vendors/jquery/dist/jquery.min.js"</span></span></span></span><br><span class="line"><span class="xml">        th:src="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/jquery/dist/jquery.min.js&#125;</span><span class="xml">"&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Bootstrap --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vendors/bootstrap/dist/js/bootstrap.min.js"</span></span></span></span><br><span class="line"><span class="xml">        th:src="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/bootstrap/dist/js/bootstrap.min.js&#125;</span><span class="xml">"&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Custom Theme Scripts --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/js/custom.min.js"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/js/custom.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--/* Per-page placeholder for additional links */--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:replace</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;scripts&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>addUser:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/base::common_header(~&#123;::link&#125;</span><span class="xml"><span class="tag"><span class="string">)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- iCheck --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../vendors/iCheck/skins/flat/green.css"</span></span></span></span><br><span class="line"><span class="xml">          th:href="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/iCheck/skins/flat/green.css&#125;</span><span class="xml">" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- bootstrap-wysiwyg --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../vendors/google-code-prettify/bin/prettify.min.css"</span></span></span></span><br><span class="line"><span class="xml">          th:href="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/google-code-prettify/bin/prettify.min.css&#125;</span><span class="xml">" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Select2 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../vendors/select2/dist/css/select2.min.css"</span></span></span></span><br><span class="line"><span class="xml">          th:href="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/select2/dist/css/select2.min.css&#125;</span><span class="xml">" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Switchery --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../vendors/switchery/dist/switchery.min.css"</span></span></span></span><br><span class="line"><span class="xml">          th:href="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/switchery/dist/switchery.min.css&#125;</span><span class="xml">" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- starrr --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../vendors/starrr/dist/starrr.css"</span></span></span></span><br><span class="line"><span class="xml">          th:href="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/starrr/dist/starrr.css&#125;</span><span class="xml">" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/base::common_body(~&#123;::content&#125;</span><span class="xml"><span class="tag"><span class="string">, ~</span></span></span><span class="template-variable">&#123;::script&#125;</span><span class="xml"><span class="tag"><span class="string">)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title_left"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Add new user<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12 col-sm-12 col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"x_panel"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"x_content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"add-user-form"</span> <span class="attr">data-parsley-validate</span></span></span></span><br><span class="line"><span class="xml">                              class="form-horizontal form-label-left"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label col-md-3 col-sm-3 col-xs-12"</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="xml">                                        class="required"&gt;*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-sm-6 col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control col-md-7 col-xs-12"</span></span></span></span><br><span class="line"><span class="xml">                                           name="username" placeholder="Enter the username" required="required"</span></span><br><span class="line"><span class="xml">                                           type="text"&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label col-md-3 col-sm-3 col-xs-12"</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="xml">                                        class="required"&gt;*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-sm-6 col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Enter the email"</span></span></span></span><br><span class="line"><span class="xml">                                           required="required" class="form-control col-md-7 col-xs-12"&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ln_solid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-sm-6 col-xs-12 col-md-offset-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">id</span>=<span class="string">"clear-btn"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"submit-btn"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"script"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- validator --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vendors/validator/validator.min.js"</span></span></span></span><br><span class="line"><span class="xml">            th:src="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/validator/validator.min.js&#125;</span><span class="xml">"&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/js/authority/addUser.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/layer/layer.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>addUser.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wenzhiquan on 16/7/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">"#username"</span>),</span><br><span class="line">        email = $(<span class="string">"#email"</span>),</span><br><span class="line">        clearBtn = $(<span class="string">"#clear-btn"</span>),</span><br><span class="line">        submitBtn = $(<span class="string">"#submit-btn"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize the validator function</span></span><br><span class="line">    validator.message.date = <span class="string">'not a real date'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate a field on "blur" event, a 'select' on 'change' event &amp; a '.reuired' classed multifield on 'keyup':</span></span><br><span class="line">    $(<span class="string">'form'</span>)</span><br><span class="line">        .on(<span class="string">'blur'</span>, <span class="string">'input[required], input.optional, select.required'</span>, validator.checkField)</span><br><span class="line">        .on(<span class="string">'change'</span>, <span class="string">'select.required'</span>, validator.checkField);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'.multi.required'</span>).on(<span class="string">'keyup blur'</span>, <span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        validator.checkField.apply($(<span class="keyword">this</span>).siblings().last()[<span class="number">0</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    submitBtn.click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> submit = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluate the form using generic validating</span></span><br><span class="line">        <span class="keyword">if</span> (!validator.checkAll($(<span class="string">'form'</span>))) &#123;</span><br><span class="line">            submit = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(submit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (submit) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'addUser'</span>,<span class="comment">// 跳转到 action</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    username: username.val(),</span><br><span class="line">                    email: email.val(),</span><br><span class="line">                &#125;,</span><br><span class="line">                type: <span class="string">'post'</span>,</span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                dataType: <span class="string">'json'</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.code == <span class="number">0</span>) &#123;</span><br><span class="line">                        layer.msg(<span class="string">'Success!'</span>, &#123;</span><br><span class="line">                            icon: <span class="number">1</span>,</span><br><span class="line">                            time: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.msg(<span class="string">'Failed!'</span>, &#123;</span><br><span class="line">                            icon: <span class="number">2</span>,</span><br><span class="line">                            time: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    layer.msg(<span class="string">'Error!'</span>, &#123;</span><br><span class="line">                        time: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    clearBtn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        username.val(<span class="string">""</span>);</span><br><span class="line">        email.val(<span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/uploads/in-post/sms/addUser.png" alt="addUser"></p>
<h3 id="用户登录功能"><a href="#用户登录功能" class="headerlink" title="用户登录功能"></a>用户登录功能</h3><p>因为已经添加过User表并完成了model和mapper的编写，用户登录功能分为以下几个步骤进行完成：</p>
<ul>
<li>添加Token数据库表及对应model和mapper</li>
<li>编写对应的service</li>
<li>编写对应的controller</li>
<li>编写对应的js请求和前端页面</li>
<li>编写登录拦截器</li>
</ul>
<h4 id="添加Token数据库表及Token-model和TokenMapper"><a href="#添加Token数据库表及Token-model和TokenMapper" class="headerlink" title="添加Token数据库表及Token model和TokenMapper"></a>添加Token数据库表及Token model和TokenMapper</h4><p>由于需要保持用户的登录状态，并且不能把用户信息保存在浏览器中，故需要在服务器端增加一个token字段，作为识别用户的唯一信息，可以保证用户登录时不用再次输入用户名密码。</p>
<p>首先，需要在数据库中增加Token表，用于存储token信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`token`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'token id'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'user id'</span>,</span><br><span class="line">  <span class="string">`token`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'token content'</span>,</span><br><span class="line">  <span class="string">`expired_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'token expired time'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">8</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<p>表中的<code>status</code>字段用于指示该<code>token</code>是否可用。</p>
<p>接着，类似于<code>User</code>类，需要生成一个<code>Token</code>的实体类：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Token</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> token;</span><br><span class="line">    <span class="keyword">private</span> Date expiredTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要生成所有属性的get和set方法。</span></span><br></pre></td></tr></table></figure>
<p>类似的，需要编写<code>TokenMapper</code>文件和相应的<code>xml</code>文件：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Repository</span></span><br><span class="line">public interface TokenMapper &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">Token</span> <span class="selector-tag">selectByToken</span>(String token);</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">addToken</span>(Token token);</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">updateStatus</span>(<span class="variable">@Param</span>(<span class="string">"status"</span>)int status, <span class="variable">@Param</span>(<span class="string">"token"</span>)String token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org/DTD Mapper 3.0"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.edu.bupt.wen.mapper.TokenMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 自定义返回结果集 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"tokenMap"</span> <span class="attr">type</span>=<span class="string">"Token"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"token"</span> <span class="attr">column</span>=<span class="string">"token"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"status"</span> <span class="attr">column</span>=<span class="string">"status"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"expiredTime"</span> <span class="attr">column</span>=<span class="string">"expired_time"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span> <span class="attr">javaType</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"tableName"</span>&gt;</span>token<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertFields"</span>&gt;</span>user_id, token, expired_time, status<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectFields"</span>&gt;</span>id, <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertFields"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByToken"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"tokenMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        SELECT</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectFields"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">        FROM</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"tableName"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">        WHERE token = #</span><span class="template-variable">&#123;token&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addToken"</span> <span class="attr">parameterType</span>=<span class="string">"Token"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        INSERT INTO</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"tableName"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">        (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertFields"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        VALUES</span></span><br><span class="line"><span class="xml">        (#</span><span class="template-variable">&#123;userId&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;token&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;expiredTime&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;status&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStatus"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        UPDATE</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"tableName"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">        SET status = #</span><span class="template-variable">&#123;status&#125;</span></span><br><span class="line"><span class="xml">        WHERE token = #</span><span class="template-variable">&#123;token&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>至此，<code>Token</code>相关内容基本完成。</p>
<h4 id="编写UserService类"><a href="#编写UserService类" class="headerlink" title="编写UserService类"></a>编写UserService类</h4><p>登录和登出是一对必不可少的操作。故为UserService类增加login和logout方法，除此之外，需要保存用户登录状态，故需要增加生成token字段的方法：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * settle the login request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param username</span></span><br><span class="line"><span class="comment">     * @param password</span></span><br><span class="line"><span class="comment">     * @return map</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Object&gt; login(<span class="built_in">String</span> username, <span class="built_in">String</span> password) &#123;</span><br><span class="line">        logger.info(<span class="string">"UserService login"</span>);</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Object&gt; <span class="built_in">map</span> = <span class="literal">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        logger.info(username);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"username can not be empty"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(password)) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"password can not be empty"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        User user = userMapper.selectByName(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="built_in">null</span>) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"username does not exist"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(user.getUsername());</span><br><span class="line">        StringBuffer stringBuffer = <span class="literal">new</span> StringBuffer();</span><br><span class="line">        stringBuffer.append(MD5Util.md5(password)).append(user.getSalt());</span><br><span class="line">        <span class="keyword">if</span> (!user.getPassword().<span class="keyword">equals</span>(MD5Util.md5(stringBuffer.toString()))) &#123;</span><br><span class="line">            <span class="built_in">map</span>.put(<span class="string">"msg"</span>, <span class="string">"wrong password"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> token = generateToken(user.getId());</span><br><span class="line">        <span class="built_in">map</span>.put(<span class="string">"token"</span>, token);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate login token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @return token</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> generateToken(int userId) &#123;</span><br><span class="line">        Token token = <span class="literal">new</span> Token();</span><br><span class="line">        token.setUserId(userId);</span><br><span class="line">        <span class="built_in">Date</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="built_in">date</span>.setTime(<span class="built_in">date</span>.getTime() + <span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line">        token.setExpiredTime(<span class="built_in">date</span>);</span><br><span class="line">        token.setToken(UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>));</span><br><span class="line">        token.setStatus(<span class="number">0</span>);</span><br><span class="line">        tokenMapper.addToken(token);</span><br><span class="line">        <span class="keyword">return</span> token.getToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logout and set token status to 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param token</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> logout(<span class="built_in">String</span> token) &#123;</span><br><span class="line">        tokenMapper.updateStatus(<span class="number">1</span>, token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写UserController类"><a href="#编写UserController类" class="headerlink" title="编写UserController类"></a>编写UserController类</h4><p>同样的，需要在<code>UserController</code>类中增加登录登出相关代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@RequestMapping(path = &#123;<span class="string">"/login"</span>&#125;, method = &#123;RequestMethod.GET&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">login</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"title"</span>, <span class="string">"Login"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"user/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &#123;<span class="string">"/login"</span>&#125;, method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">@ResponseBody</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>) <span class="keyword">String</span> username,</span></span></span><br><span class="line"><span class="function"><span class="params">                    @RequestParam(<span class="string">"password"</span>) <span class="keyword">String</span> password,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    logger.info(username);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = userService.login(username, password);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.containsKey(<span class="string">"token"</span>)) &#123;</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"token"</span>, <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"token"</span>).toString());</span><br><span class="line">            cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"msg"</span>, <span class="string">"login successful!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonUtil.getJSONString(<span class="number">0</span>, <span class="built_in">map</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"login failed!"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"msg"</span>, <span class="string">"login failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonUtil.getJSONString(<span class="number">1</span>, <span class="built_in">map</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &#123;<span class="string">"/logout"</span>&#125;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">logout</span><span class="params">(@CookieValue(<span class="string">"token"</span>) <span class="keyword">String</span> token)</span> </span>&#123;</span><br><span class="line">    userService.logout(token);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在获取了用户的<code>token</code>之后，需要将<code>token</code>存储到浏览器的<code>Cookie</code>中，以便下次访问时将<code>token</code>发送给服务器，用于查询用户信息。</p>
<h4 id="编写对应的js请求和前端页面-1"><a href="#编写对应的js请求和前端页面-1" class="headerlink" title="编写对应的js请求和前端页面"></a>编写对应的js请求和前端页面</h4><p>登录界面独立于其他界面存在，便于拦截请求后的页面跳转。</p>
<p>login.html:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;common/base::common_header(~&#123;::link&#125;</span><span class="xml"><span class="tag"><span class="string">)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/animate.css/animate.min.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hiddenanchor"</span> <span class="attr">id</span>=<span class="string">"signin"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_wrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animate form login_form"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"login_content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span></span></span></span><br><span class="line"><span class="xml">                               required="required"/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span></span></span></span><br><span class="line"><span class="xml">                               required="required"/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">id</span>=<span class="string">"error-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">id</span>=<span class="string">"error-username"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default submit"</span> <span class="attr">id</span>=<span class="string">"login-btn"</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"reset_pass"</span>&gt;</span>Lost your password?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"separator"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-barcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> SMS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            ©2017 All Rights Reserved</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hidden-xs"</span>&gt;</span>Powered By <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://wenzhiquan.github.io"</span> <span class="attr">target</span>=<span class="string">"blank"</span>&gt;</span>Wen Zhiquan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- jQuery --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vendors/jquery/dist/jquery.min.js"</span></span></span></span><br><span class="line"><span class="xml">        th:src="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/jquery/dist/jquery.min.js&#125;</span><span class="xml">"&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Bootstrap --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vendors/bootstrap/dist/js/bootstrap.min.js"</span></span></span></span><br><span class="line"><span class="xml">        th:src="@</span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/bootstrap/dist/js/bootstrap.min.js&#125;</span><span class="xml">"&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/js/login.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/layer/layer.js&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>login.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">"#username"</span>),</span><br><span class="line">        password = $(<span class="string">"#password"</span>),</span><br><span class="line">        loginBtn = $(<span class="string">"#login-btn"</span>),</span><br><span class="line">        errorUsername = $(<span class="string">"#error-username"</span>),</span><br><span class="line">        errorPassword = $(<span class="string">"#error-password"</span>);</span><br><span class="line"></span><br><span class="line">    username.blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username.val() == <span class="string">""</span>) &#123;</span><br><span class="line">            errorUsername.html(<span class="string">"username can not be empty"</span>);</span><br><span class="line">            errorUsername.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    username.focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        errorUsername.hide();</span><br><span class="line">        username.val(<span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    password.blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (password.val() == <span class="string">""</span>) &#123;</span><br><span class="line">            errorPassword.html(<span class="string">"password can not be empty"</span>);</span><br><span class="line">            errorPassword.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    password.focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        errorPassword.hide();</span><br><span class="line">        password.val(<span class="string">""</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    loginBtn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(username.val());</span><br><span class="line">        <span class="keyword">if</span> (username.val() != <span class="string">""</span> &amp;&amp; password.val() != <span class="string">""</span>) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'login'</span>,<span class="comment">// 跳转到 action</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    username: username.val(),</span><br><span class="line">                    password: password.val()</span><br><span class="line">                &#125;,</span><br><span class="line">                type: <span class="string">'post'</span>,</span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                dataType: <span class="string">'json'</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.code == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data.next != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                            location.href = data.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        location.href = <span class="string">"/"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.msg(data.msg, &#123;</span><br><span class="line">                            time: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    layer.msg(<span class="string">'Error!'</span>, &#123;</span><br><span class="line">                        time: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="编写登录拦截器"><a href="#编写登录拦截器" class="headerlink" title="编写登录拦截器"></a>编写登录拦截器</h4><p>拦截器分为两个，一个用于读取<code>token</code>信息，并根据<code>token</code>信息写入用户信息，一个用于拦截未登录用户。</p>
<p>拦截器运行阶段如下：</p>
<p><img src="/uploads/in-post/sms/interceptor.png" alt="拦截器运行阶段"></p>
<p>PassportInterceptor（主要用于读取<code>token</code>，并根据此<code>token</code>读取并写入用户信息）:</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassportInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(PassportInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenMapper tokenMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此阶段发生在Controller运行之前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : httpServletRequest.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"token"</span>)) &#123;</span><br><span class="line">                    token = cookie.getValue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Token selectedToken = tokenMapper.selectByToken(token);</span><br><span class="line">            <span class="keyword">if</span> (selectedToken == <span class="keyword">null</span> || selectedToken.getExpiredTime().<span class="keyword">before</span>(new <span class="title">Date</span>()) || selectedToken.getStatus() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            User user = userMapper.selectById(selectedToken.getUserId());</span><br><span class="line">            hostHolder.setUser(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此阶段发生在Controller运行之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span> &amp;&amp; hostHolder.getUser() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">"user"</span>, hostHolder.getUser());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此阶段发生在视图渲染完成之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        hostHolder.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LoginRequiredInterceptor(用于拦截未登录用户):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRequiredInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hostHolder.getUser() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/login"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拦截器编写完成后，需要将拦截器注册到<code>Spring</code>当中：</p>
<p>spring-interceptor.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.edu.bupt.wen.interceptor.PassportInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.edu.bupt.wen.interceptor.LoginRequiredInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>并在<code>spring-mvc.xml</code>中加入引用<code>&lt;import resource=&quot;spring-interceptor.xml&quot;&gt;&lt;/import&gt;</code></p>
<h4 id="运行效果-1"><a href="#运行效果-1" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/uploads/in-post/sms/login.png" alt="登录页面"></p>
<h3 id="遇到的问题和解决方案"><a href="#遇到的问题和解决方案" class="headerlink" title="遇到的问题和解决方案"></a>遇到的问题和解决方案</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">问题：无法找到*Mapper.xml文件</span><br><span class="line">解决方案：*Mapper.xml文件应当位于resources文件夹中而不是java文件夹中</span><br><span class="line"></span><br><span class="line">问题：IDEA提示无法注入mapper的bean</span><br><span class="line">解决方案：将Mapper接口文件注解为@Repository</span><br><span class="line"></span><br><span class="line">问题：Could <span class="keyword">not</span> resolve placeholder</span><br><span class="line">解决方案：在引入外部文件的bean中增加属性</span><br><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attribute">value</span>=<span class="string">"true"</span> /&gt;</span><br><span class="line">并且需要注意properties的格式必须是beanName.<span class="attribute">property</span>=value   </span><br><span class="line"></span><br><span class="line">问题：xml文件，元素 <span class="string">'bean'</span> 必须不含字符 [子级]</span><br><span class="line">解决方案：xml文件中有不合法字符，可能是中文没有注释掉</span><br><span class="line"></span><br><span class="line">问题：使用AOP的通配符时，报Expected<span class="built_in"> raw type </span>form of</span><br><span class="line">org.springframework.web.servlet.handler.AbstractHandlerMethodMapping</span><br><span class="line"><span class="variable">$MappingRegistry</span>错误</span><br><span class="line">解决方案：AspectJ 1.8.10版本bug，换成1.8.9版本问题解决</span><br><span class="line"></span><br><span class="line">问题：数据库datetime类型无法直接映射到java项目中</span><br><span class="line">解决方案：在Mapper.xml文件中增加resultMap进行java.util.Date类型的映射</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型和垃圾回收</title>
    <url>/2018/03/28/2018-03-28-java-memory-garbage-collection/</url>
    <content><![CDATA[<blockquote>
<p>“Java 与 C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。”</p>
</blockquote>
<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p>按照 java 虚拟机规范，抽象的 Java 虚拟机如下图所示：</p>
<p><img src="/uploads/in-post/java_memory/vm_structure.png" alt></p>
<a id="more"></a>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>每条线程都有一个独立的程序计数器，用于记录当前线程所执行的<code>字节码</code>的<code>行号</code>。如果执行的是 java 方法，计数器记录的是虚拟机字节码指令的地址，如果是本地方法，则计数器值为空。</p>
<h4 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h4><p>Java 虚拟机栈也是线程私有的，和线程的生命周期相同。</p>
<p>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时会创建一个栈帧，用于存储<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。</p>
<p>每一个栈帧在虚拟机中入栈到出栈的过程，对应了一个方法从调用到执行完成的过程。当进入一个方法时，这个方法需要在帧中分配多大的局部变量表是完全确定的，在方法运行期间局部变量表的大小不会改变。</p>
<p>其中<code>局部变量表</code>是我们最为关注的部分，他存放了编译期可知的 8 种<code>基本类型数据</code>、<code>对象引用</code>和<code>returnAddress</code>类型。</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈和虚拟机栈作用类似，不过是为虚拟机要使用的本地方法提供服务。</p>
<h4 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h4><p>Java 堆是 Java 虚拟机管理的内存中最大的一部分。他是被所有线程共享的一块内存区域，在虚拟机启动时创建。Java 堆的目的是存放<code>对象实例</code>，基本上所有的<code>对象</code>和<code>数组</code>都需要在堆上进行分配。</p>
<p>Java 堆也是垃圾收集器管理的主要区域。</p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区也是被各个线程共享的内存区域，它用于存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>和<code>即时编译器编译后的代码</code>等数据。</p>
<p>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载。</p>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>。</p>
<p>而运行时常量池相对于 Class 文件常量池的特征是具备动态性，只有没预置入 Class 文件中常量池的内容才能进入方法区运行时常量池，比如 String 的 intern()方法。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>虚拟机遇到一条<code>new</code>指令时，首先将去检查这个指令的参数是否能在常量池中<code>定位到一个类的符号引用</code>，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。若没有，需要先执行相应的类加载过程。</p>
<p>在类加载检查通过后，虚拟机会为新生对象<code>分配内存</code>，分配方式一般有两种：指针碰撞和空闲列表。当 Java 堆中的内存规整时，直接把指针挪动对象大小的距离即可，即指针碰撞；如果 Java 堆中的内存不规整，需要维护一个记录哪些内存可用的列表，分配时从列表中给对象分配空间，即空闲列表。</p>
<p>内存分配完成后，虚拟机需要将分配的<code>内存空间初始化为零值</code>。</p>
<p>然后，虚拟机要对<code>对象进行必要的设置</code>。将在对象头中设置对象是哪个类的实例、如何找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。</p>
<p>最后，会执行对象的<code>&lt;init&gt;</code>方法，把对象按照程序员的意愿进行初始化。</p>
<h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>在 HotSpot 虚拟机中，对象在内存中存储的布局可以分为 3 块区域：<code>对象头</code>、<code>实例数据</code>和<code>对齐填充</code>。</p>
<p>对象头包括两部分信息：</p>
<ul>
<li><p>第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志线程持有的锁、偏向线程 ID、偏向时间戳等。</p>
</li>
<li><p>另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
</li>
</ul>
<p>实例数据部分是对象真正存储的有效信息，HotSpot 分配策略中，相同宽度的字段总是被分配到一起，满足这个条件的前提下，在父类中定义的变量会出现在子类之前。</p>
<p>对齐填充是非必须的，仅仅起到占位符的作用，由于 HotSpot 虚拟机的自动内存管理系统要求对象的起始地址必须是 8 字节的整数倍，所以当对象实例数据部分没有对齐时，需要通过对齐填充来补全。</p>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>主流的访问方式有两种：<code>句柄</code>和<code>直接指针</code>两种。</p>
<p>句柄：Java 堆中会划分出一块内存来作为句柄池，reference 中存储的是对象的句柄地址，句柄中包含了对象实例数据和类型数据各自的具体信息。优点是当对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要改变。</p>
<p>直接指针：Java 堆对象的布局中放置了访问类型数据的相关信息，reference 中存储的是对象地址。优点是速度更快，节省了一次指针定位的开销。</p>
<p>HotSpot 使用直接指针的方式进行对象访问</p>
<h3 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h3><p>第一节我们提到，程序计数器、虚拟机栈、本地方法栈三个区域随线程生，随线程灭，每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的。而 Java 堆和方法区不同，我们只有在程序运行期间才能确定会创建那些对象，这部分的内存分配和回收都是动态的，垃圾回收时主要关注的是这部分的内存。</p>
<h4 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h4><p>垃圾收集器进行垃圾回收前，首先需要判断那些对象还是存活的。</p>
<h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><p>给对象添加一个引用计数器，每当有引用时计数器加 1，引用失效时计数器减 1，计数器为 0 的对象就是“垃圾对象”。</p>
<p>优点：实现简单，判定效率高。</p>
<p>缺点：很难解决对象之间的循环引用问题。</p>
<h5 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h5><p>通过一系列被称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为“引用链”，当一个对象到 GC Root 没有任何引用链相连时，证明此对象是“垃圾对象”。</p>
<p>Java 语言中，可作为 GC Roots 的对象有：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中 JNI 引用的对象</li>
</ul>
<p>###＃ 对象的自我拯救</p>
<p>对象可以通过覆盖 finalize()方法，在其中和引用链上的任何一个对象建立关联，逃过一次垃圾回收，但因为每个对象的 finalize()方法只会被系统自动调用一次，所以对象最多通过这种方式逃过一次垃圾回收。不过这种方式并不被推荐使用。</p>
<h4 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h4><p>方法区的垃圾回收主要有：<code>废弃常量</code>和<code>无用的类</code></p>
<p>当一个常量池中的常量（字面量和符号引用）没有被在任何地方被引用，且发生了内存回收的话，这个常量就会被清理出常量池。</p>
<p>无用的类：</p>
<ul>
<li>该类的所有实例都已经被回收</li>
<li>加载该类的 ClassLoader 已经被回收</li>
<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问</li>
</ul>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><p>G1 之前的垃圾回收算法，将堆划分为如下结构：</p>
<p><img src="/uploads/in-post/java_memory/memory_generation.png" alt></p>
<ul>
<li>新生代：eden space + 2 个 survivor</li>
<li>老年代：old space</li>
<li>永久代：1.8 之前的 perm space</li>
<li>元空间：1.8 之后的 metaspace</li>
</ul>
<h5 id="标记清除（Mark-Sweep）算法"><a href="#标记清除（Mark-Sweep）算法" class="headerlink" title="标记清除（Mark-Sweep）算法"></a>标记清除（Mark-Sweep）算法</h5><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>
<p>不足：效率较低，标记清除后会产生大量不连续的内存碎片</p>
<h5 id="复制（Copying）算法"><a href="#复制（Copying）算法" class="headerlink" title="复制（Copying）算法"></a>复制（Copying）算法</h5><p>将内存划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活的对象复制到另一块上面，然后把已经使用过的内存空间全部清理掉。</p>
<p>优点：实现简单，运行高效缺点：讲内存缩小为原来的一半，过于浪费空间</p>
<p>IBM 研究表明，新生代中的对象 98%都是“朝生夕死”的，所以不需要按照 1:1 来划分内存空间，而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor 空间。HotSpot 虚拟机默认 Eden 和 Survivor 的大小比例是<code>8:1</code>，所以只有 10%的空间会被“浪费”，可以通过-XX:SurvivorRatio 参数调整这个比例。</p>
<p>复制算法在对象存活率较高时，需要进行较多的复制操作，而且需要额外的空间进行分配担保，所以老年代一般不能直接选用这种算法。</p>
<h5 id="标记整理（Mark-Compact）算法"><a href="#标记整理（Mark-Compact）算法" class="headerlink" title="标记整理（Mark-Compact）算法"></a>标记整理（Mark-Compact）算法</h5><p>首先对存活的对象进行标记，然后将所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p>
<h4 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h4><p>收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。HotSpot 包含的垃圾收集器如图所示：</p>
<p><img src="/uploads/in-post/java_memory/hot_spot_gb.png" alt="HotSpot虚拟机的垃圾收集器"></p>
<p>到目前为止，没有最好的收集器，我们应该针对具体的使用场景选择最合适的垃圾收集器。</p>
<h5 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h5><p>这个收集器是一个单线程收集器，使用复制算法，他会在进行垃圾收集时，暂停所有其他的线程，直到收集结束。其运行过程如下：</p>
<p><img src="/uploads/in-post/java_memory/serial.png" alt></p>
<p>由于其简单而高效（与其他收集器的单线程相比，没有线程交互的开销），他依然是虚拟机运行在 Client 模式下的默认新生代收集器。</p>
<h5 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h5><p>ParNew 收集器是 Serial 收集器的多线程版本，使用复制算法，工作过程如下：</p>
<p><img src="/uploads/in-post/java_memory/par_new.png" alt></p>
<p>他是运行在 Server 模式下的虚拟机中首选的新生代收集器，其中一个很重要的原因是只有 Serial 收集器和 ParNew 收集器可以和 CMS 收集器配合工作。</p>
<p>ParNew 默认开启的收集线程数与 CPU 数量相同，在 CPU 很多的环境下，可以使用-XX:ParallelGCThreads 参数来限制垃圾回收的线程数。</p>
<h5 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h5><p>此收集器也是使用复制算法的收集器，但他的关注点是达到可控制的吞吐量，所以也被称为”吞吐量优先“收集器。</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">吞吐量 </span>=<span class="string"> 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)</span></span><br></pre></td></tr></table></figure>
<p>此收集器比较适用于需要与用户交互的程序和后台运算较多的程序。</p>
<p>它提供了两个参数用于精确控制吞吐量：</p>
<ul>
<li>最大垃圾收集停顿时间： -XX:MaxGCPauseMillis，参数值是一个大于 0 的毫秒数</li>
<li>设置吞吐量大小： -XX:GCTimeRatio，参数值一个[0, 100)的整数，也就是垃圾收集时间占总时间的比率，1 / (1 + N)，默认值是 99</li>
</ul>
<p>此收集器还有一个参数-XX:+UseAdaptiveSizePolicy，开启后虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整参数以提供最合适的停顿时间或最大的吞吐量，被称为<code>GC自适应的调节策略</code>。</p>
<h5 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h5><p>此收集器是 Serial 收集器的老年代版本，使用单线程和”标记整理“算法，主要用于 Client 模式的虚拟机。</p>
<p>如果在 Server 模式下，还有两大用处：</p>
<ul>
<li>在 JDK 1.5 之前与 Parallel Scavenge 收集器搭配使用</li>
<li>作为 CMS 收集器的后备预案</li>
</ul>
<h5 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h5><p>此收集器是 Parallel Scavenge 的老年代版本，使用多线程和”标记整理“算法。</p>
<p>在注重吞吐量 CPU 资源敏感的场合，可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器，工作过程如下：</p>
<p><img src="/uploads/in-post/java_memory/par_old.png" alt></p>
<h5 id="CMS（Concurrent-Mark-Sweep）收集器"><a href="#CMS（Concurrent-Mark-Sweep）收集器" class="headerlink" title="CMS（Concurrent Mark Sweep）收集器"></a>CMS（Concurrent Mark Sweep）收集器</h5><p>此收集器是一种以获取<code>最短回收停顿时间</code>为目标的收集器，使用”标记清除“算法。</p>
<p>过程分为四步：</p>
<ul>
<li>初始标记（CMS initial mark）</li>
<li>并发标记（CMS concurrent mark）</li>
<li>重新标记（CMS remark）</li>
<li>并发清除（CMS concurrent sweep）</li>
</ul>
<p>其中，初始标记和重新标记还是需要”Stop The World“。</p>
<p>初始标记仅仅标记可以和 GC Roots 关联到的对象</p>
<p>并发标记进行 GC Roots Tracing</p>
<p>重新标记用于修正并发标记期间因为用户程序继续运行导致标记产生变动的对象的标记记录</p>
<p><img src="/uploads/in-post/java_memory/CMS.png" alt></p>
<p>整个回收过程中，耗时最长的是并发标记和并发清除过程，但这两个过程都是可以和用户线程一起工作的，所以从总体上说，CMS 收集器的内存回收过程和用户线程是并发执行的。</p>
<p>优点： 并发手机、低停顿</p>
<p>缺点：</p>
<ul>
<li>对 CPU 资源非常敏感，并发阶段会导致总吞吐量降低</li>
<li>无法处理浮动垃圾，需要预留一部分空间提供给并发收集时的程序运作，如果 CMS 运行期间预留的内存无法满足程序需要，会触发一次”Concurrent Mode Failure“失败，临时启用 Serial Old 收集器。</li>
<li>会产生大量的内存碎片，提供-XX:+UseCMSCompactAtFullCollection 参数（默认开启），用于要进行 FullGC 时开启内存碎片的合并整理过程，还提供了一个-XX:CMSFullGCsBeforeCompaction，用于设置执行多少次不压缩的 FullGC 后，再进行一次带压缩的（默认值为 0）</li>
</ul>
<h5 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h5><p>此收集器是一款面向服务端应用的垃圾收集器，其特点有：</p>
<ul>
<li><code>并行与并发</code>，使用多核减少 STW 停顿时间，GC 动作通过并发方式让 Java 程序继续执行</li>
<li><code>分代收集</code></li>
<li><code>空间整合</code>，整体是基于”标记整理“算法实现的，局部是基于”复制“算法实现的，不会产生内存空间碎片</li>
<li><code>可预测的停顿</code>，可以指定在长度为 M 毫秒的时间片断内，垃圾收集时间不超过 N 毫秒</li>
</ul>
<p>G1 收集器将整个 Java 堆划分为多个大小相等的独立区域（Region），并跟踪各个 Region 里面的垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的时间，优先回收价值最大的 Region。每个 Region 是逻辑上连续的一段内存。结构如下：</p>
<p><img src="/uploads/in-post/java_memory/G1.png" alt></p>
<p>其中当新建对象大小超过 Region 大小一半时，会直接在一个或多个新的连续 Region 中分配此对象，并标记为 Humongous 对象。</p>
<h6 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h6><p>Region 的大小为 1M——32M 的 2 的 N 次幂，默认数量为 2048 个，如果 G1HeapRegionSize 为默认值，则会在堆初始化时计算 Region 的实际大小。</p>
<p>在 G1 收集器中，垃圾回收只回收一部分 Region，所以回收时需要知道 Region 之间的对象引用，在使用复制算法移动对象时，需要更新引用为对象的新地址。这种分代收集中，年轻代垃圾收集时，需要老年代到年轻代的引用记录，通常称为 Remembered Set。当虚拟机发现程序在对 Reference 类型的数据进行写操作时，会场生一个 Write Barrier 暂时中断写操作，检查 Reference 引用的对象是否处于不同的 Region 之间，如果是，则通过 CardTable 讲相关引用信息记录到被引用对象所属 Region 的 Remembered Set 中。</p>
<h6 id="GC-模式"><a href="#GC-模式" class="headerlink" title="GC 模式"></a>GC 模式</h6><p>G1 中一共有三种垃圾回收的模式：Young GC、Mixed GC 和 Full GC。</p>
<p><strong>Young GC</strong></p>
<p>对象优先在 Eden Region 中进行分配，当所有 Eden Region 被耗尽时，会触发一次 Young GC，存活的对象会被复制到 Survivor Region 中，空闲的 Region 被放入空闲列表中</p>
<p><strong>Mixed GC</strong></p>
<p>当越来越多的对象进入 Old Region 时，虚拟机会触发一次 Mixed GC，回收整个 Young Region 和<code>部分</code>Old Region，触发时机通过-XX:InitiatingHeapOccupancyPercent=N，则当老年代大小占整个堆的 N%时，会触发一次 Mixed GC，过程类似于 CMS</p>
<p><strong>Full GC</strong></p>
<p>如果对象内存分配速度过快，Mixed GC 来不及回收导致老年代被填满，会触发一次 Full GC，使用 Serial Old 方式进行垃圾回收</p>
<h6 id="G1-工作过程"><a href="#G1-工作过程" class="headerlink" title="G1 工作过程"></a>G1 工作过程</h6><p>G1 的工作过程如下：</p>
<ul>
<li>初始标记（Initial Marking）</li>
<li>并发标记（Concurrent Marking）</li>
<li>最终标记（Final Marking）</li>
<li>筛选回收（Live Data Counting and Evacuation）</li>
</ul>
<p><img src="/uploads/in-post/java_memory/G1_flow.png" alt></p>
<p>初始标记阶段仅仅只是标记一下 GC Roots 能够直接关联的对象，并且修改 TAMS（Next Top at Mark Start）的值，让下一阶段的用户程序并发运行的时候，能在正确可用的 Region 中创建新对象，这个阶段需要暂停线程。并发标记阶段从 GC Roots 进行可达性分析，找出存活的对象，与用户线程并发执行。最终标记阶段则是修正在并发标记阶段因为用户程序的并发执行而导致标记产生变动的那一部分记录，这部分记录被保存在 Remembered Set Logs 中，最终标记阶段再把 Logs 中的记录合并到 Remembered Set 中，这个阶段是并行执行的，需要暂停用户线程。最后在筛选阶段首先对各个 Region 的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间制定回收计划。</p>
<h4 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h4><ul>
<li>对象优先在 Eden 分配</li>
</ul>
<p>大多数情况下，对象在新生代的 Eden 区中分配，当 Eden 区空间不足时，虚拟机会发起一次 Minor GC</p>
<ul>
<li>大对象直接进入老年代</li>
</ul>
<p>所谓大对象，最典型的就是长字符串和数组。</p>
<ul>
<li>长期存活的对象进入老年代</li>
</ul>
<p>对象晋升到老年代的年龄阈值，可以通过-XX:MaxTenuringThreshold 设置，默认为 15 岁</p>
<ul>
<li>动态对象年龄判断</li>
</ul>
<p>如果在 Survivor 空间中相同年龄的所有对象大小的总和超过 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。</p>
<p>参考</p>
<p>1、周志明，深入理解 Java 虚拟机：JVM 高级特性与最佳实践，机械工业出版社</p>
<p>2、占小狼，<a href="https://www.jianshu.com/p/0f1f5adffdc1" target="_blank" rel="noopener">G1 垃圾收集器介绍</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>内存模型</tag>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC 简析</title>
    <url>/2018/05/29/2018-05-29-rpc-introduction/</url>
    <content><![CDATA[<blockquote>
<p>RPC 的主要功能目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="什么是-RPC"><a href="#什么是-RPC" class="headerlink" title="什么是 RPC"></a>什么是 <code>RPC</code></h4><p><code>RPC</code>，全称为 <code>Remote Procedure Call</code>，即远程过程调用，是一种进程间的通信方式。它能够实现从主机 A 调用可达地址空间中另一台主机 B 上的过程或函数，而程序员并不需要显示的编码其调用过程。也即是说对于程序员来说，这个调用过程是透明的，本地调用和远程调用所用代码基本是相同的。</p>
<a id="more"></a>
<p>RPC 的调用过程如下图：</p>
<p><img src="/uploads/in-post/rpc-introduction/RPC.png" alt="RPC 调用过程"></p>
<ol>
<li><p><code>client</code> 以本地调用的方式发起一个远程调用</p>
</li>
<li><p>本地的 <code>client stub</code> 接收到调用请求后，将调用的接口、方法和参数通过约定的协议规范进行序列化（<em> 网络协议基于二进制，需要将内存中的值序列化成为二进制的形式 </em>）</p>
</li>
<li><p>本地的 <code>RPC</code> 实例将编码结果传输到远端（被调用端）的 <code>RPC</code> 实例</p>
</li>
<li><p>远端 <code>RPC</code> 实例收到请求后交给 <code>server stub</code> 进行反序列化</p>
</li>
<li><p><code>server stub</code> 调用 <code>server</code> 端本地服务</p>
</li>
<li><p><code>server stub</code> 获取到本地服务的的返回结果后进行序列化</p>
</li>
<li><p><code>server</code> 端的 <code>RPC</code> 实例将结果返回给 <code>client</code> 端</p>
</li>
<li><p><code>client</code> 端接收到返回值后进行反序列化，并将最终的结果返回给发起调用的函数</p>
</li>
</ol>
<p>可以看出 <code>RPC</code> 调用采用的是 <code>C/S</code> 模式。</p>
<h4 id="RPC-需要解决的问题"><a href="#RPC-需要解决的问题" class="headerlink" title="RPC 需要解决的问题"></a><code>RPC</code> 需要解决的问题</h4><ul>
<li><p>通讯的问题</p>
<ul>
<li>主要是通过在客户端和服务器之间建立 TCP 连接，并通过 TCP 连接进行数据交换</li>
</ul>
</li>
<li><p>寻址的问题</p>
<ul>
<li>即 A 服务器上的应用如何告诉底层的 <code>RPC</code> 框架，如何连接到 B 服务器的特定端口并调用其特定的方法，比如基于 <code>Web</code> 服务协议栈的 <code>RPC，需要提供一个</code> <code>endpoint URI</code> 或是从 <code>UDDI</code> 服务上查找</li>
</ul>
</li>
<li><p>参数的序列化和反序列化</p>
<ul>
<li>由于方法的参数需要通过底层的网络协议进行传递，而网络协议是基于二进制的，所以需要将内存中参数的值序列化为二进制的形式，并且需要将接收到的二进制数据反序列化恢复为原来内存中的表达方式。</li>
</ul>
</li>
</ul>
<h3 id="RPC-调用分类"><a href="#RPC-调用分类" class="headerlink" title="RPC 调用分类"></a>RPC 调用分类</h3><p>根据 <code>Client</code> 端发起调用后是否等待服务端的返回结果，可以将 <code>RPC</code> 调用分为以下两种：</p>
<h4 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h4><p><code>Client</code> 端发起请求后，挂起本地进程，直到 <code>Server</code> 端运行完毕并返回结果后，唤醒进程继续执行。</p>
<h4 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h4><p><code>Client</code> 端发起请求后，不等待 <code>Server</code> 端的执行结果，继续运行进程。</p>
<p>若 <code>Client</code> 端需要获取结果，可以通过回调通知等方法获取执行结果。</p>
<p>若 <code>Client</code> 端不需要获取结果，则为单向异步调用，只触发 <code>Server</code> 端的函数执行。</p>
<h3 id="Python-2-简单示例"><a href="#Python-2-简单示例" class="headerlink" title="Python 2 简单示例"></a>Python 2 简单示例</h3><p>Server 端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SimpleXMLRPCServer <span class="keyword">import</span> SimpleXMLRPCServer, SimpleXMLRPCRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义 RPC 调用地址</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span><span class="params">(SimpleXMLRPCRequestHandler)</span>:</span></span><br><span class="line">    rpc_paths = (<span class="string">'/RPC2'</span>,)</span><br><span class="line"></span><br><span class="line">port = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定本地端口 8080 初始化 server</span></span><br><span class="line">server = SimpleXMLRPCServer((<span class="string">'localhost'</span>, port), requestHandler=RequestHandler)</span><br><span class="line"><span class="comment"># 注册一个自省的 XML-RPC 函数</span></span><br><span class="line">server.register_introspection_functions()</span><br><span class="line"><span class="comment"># 注册一个多调用组合</span></span><br><span class="line">server.register_multicall_functions()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册调用函数, 可以创建别名</span></span><br><span class="line">server.register_function(add, <span class="string">'addAlias'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFuncs</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x // y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册调用实例, 所有方法将以 XML-RPC 的方式进行发布</span></span><br><span class="line">server.register_instance(MyFuncs())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Listening on port"</span> + str(port)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 server</span></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>Client 端：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import xmlrpclib</span><br><span class="line"></span><br><span class="line">port = 8080</span><br><span class="line"></span><br><span class="line">server = xmlrpclib.ServerProxy(<span class="string">"http://localhost:"</span> + str(port))</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span> server</span><br><span class="line">multi = xmlrpclib.MultiCall(server)</span><br><span class="line">multi.addAlias(5, 1)</span><br><span class="line">multi.div(24, 11)</span><br><span class="line">try:</span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> multi():</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"Result is :"</span> + str(response)</span><br><span class="line">except xmlrpclib.Error, e:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"ERROR"</span>, e</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"># Server:</span><br><span class="line"><span class="number">127.0.0.1</span> - - <span class="string">[30/May/2018 10:36:19]</span> <span class="string">"<span class="keyword">POST</span> /RPC2 HTTP/1.1"</span> <span class="number">200</span> -</span><br><span class="line"></span><br><span class="line"># Client</span><br><span class="line">&lt;ServerProxy for localhost:<span class="number">8080</span>/RPC2&gt;</span><br><span class="line">Result is : <span class="number">6</span></span><br><span class="line">Result is : <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、Mindwind，<a href="https://blog.csdn.net/mindfloating/article/details/39473807" target="_blank" rel="noopener">深入浅出 RPC - 浅出篇</a></p>
<p>2、Mindwind，<a href="https://blog.csdn.net/mindfloating/article/details/39474123" target="_blank" rel="noopener">深入浅出 RPC - 深入篇</a></p>
<p>3、Way Lau，<a href="https://waylau.com/remote-procedure-calls/" target="_blank" rel="noopener">远程过程调用 (RPC) 详解</a></p>
<p>4、zhanlijun，<a href="https://www.cnblogs.com/LBSer/p/4853234.html" target="_blank" rel="noopener">你应该知道的RPC原理</a></p>
]]></content>
      <categories>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>类文件结构和Java虚拟机类加载机制</title>
    <url>/2018/04/01/2018-04-01-java-class-load/</url>
    <content><![CDATA[<blockquote>
<p>“代码编译的结果从本地机器码转变为字节码，是存储格式发展的一小步，却是编程语言发展的一大步。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的类加载机制。</p>
<p>在 Java 语言中，类的加载、连接和初始化过程都是在程序运行期间完成的，为 Java 应用程序提供了高度的灵活性。</p>
<a id="more"></a>
<h3 id="Class-类文件的结构"><a href="#Class-类文件的结构" class="headerlink" title="Class 类文件的结构"></a>Class 类文件的结构</h3><p>任何一个 Class 文件都对应着<code>唯一一个</code>类或者接口的定义信息。Class 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目<code>严格按照顺序</code>紧凑的排列在 Class 文件之中，中间没有任何分隔符，所以整个 Class 文件中存储的内容几乎全是程序运行的必要数据。，遇到占用 8 位字节以上空间的数据项目时，会按照<code>高位在前</code>的方式分割成若干个 8 位字节进行存储。</p>
<p>Class 文件中只有两种数据类型：<code>无符号数</code>和<code>表</code></p>
<p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性的以<code>_info</code>结尾</p>
<p>Class 文件格式如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u4</td>
<td>magic</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>minor_version</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>major_version</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>constant_pool_count</td>
<td>1</td>
</tr>
<tr>
<td>cp_info</td>
<td>constant_pool</td>
<td>constant_pool_count - 1</td>
</tr>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>this_class</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>super_class</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces_count</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces</td>
<td>interfaces_count</td>
</tr>
<tr>
<td>u2</td>
<td>fields_count</td>
<td>1</td>
</tr>
<tr>
<td>field_info</td>
<td>fields</td>
<td>fields_count</td>
</tr>
<tr>
<td>u2</td>
<td>methods_count</td>
<td>1</td>
</tr>
<tr>
<td>method_info</td>
<td>methods</td>
<td>methods_count</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody>
</table>
<p>无符号数属于基本的数据类型，用 u1、u2、u4、u8 里奥表示 1 个字节、2 个字节、4 个字节、8 个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值和按照 UTF-8 编码构成的字符串值。</p>
<h4 id="魔数与-Class-文件的版本"><a href="#魔数与-Class-文件的版本" class="headerlink" title="魔数与 Class 文件的版本"></a>魔数与 Class 文件的版本</h4><p>每个 Class 文件的开头 4 个字节称为<code>魔数</code>，它的唯一作用是确定这个文件是否为一个能被虚拟机接受的 Class 文件，值为<code>0xCAFEBABE</code>。</p>
<p>紧接着魔数的 4 个字节存储的是 Class 文件的<code>版本号</code>，第 5 和第 6 字节是次版本号，第 7 和第 8 字节是主版本号，虚拟机必须拒绝执行超过其版本号的 Class 文件</p>
<h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>紧接着主次版本号之后的是<code>常量池入口</code>，常量池可以理解为 Class 文件之中的资源仓库，他是 Class 文件结构中与其他项目关联最多的数据类型，也是占用 Class 文件空间最大的数据项目之一，同时还是在 Class 文件中第一个出现的表类型数据项目。</p>
<p>由于常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项 u2 类型的数据，代表常量池容量计数值，这个容量计数是从<code>1</code>开始的，其他的集合类型都是从 0 开始的。因为将常量池索引置为 0 被设计用来表示<code>不引用任何一个常量池项目</code>。</p>
<p>常量池主要存放两大类常量：<code>字面量</code>和<code>符号引用</code></p>
<p>字面量比较接近 Java 语言层面的常量概念，如<code>文本字符串</code>、<code>声明为final的常量值</code>等</p>
<p>符号引用属于编译原理方面的概念，包括以下三类常量：</p>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<p>当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址中。</p>
<p>常量中每一项常量都是一个表，目前一共有 14 种常量类型，他们均有各自的结构。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2395997-dc9aafbf16055c31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt></p>
<p>可以通过<code>javap -verbose</code>命令查看 Class 文件的字节码内容。</p>
<h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>在常量池结束之后，紧接着的两个字节代表访问标志（access_flags),这个标志用于识别以下类或者接口层次的访问信息。</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>是否为 public 类型</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>是否被声明为 final，只有类可设置</td>
</tr>
<tr>
<td>ACC_SUPER</td>
<td>0x0020</td>
<td>是否允许使用 invokespecial 字节码指令的新语意，JDK1.0.2 之后编译出来的类此标志都必须为真</td>
</tr>
<tr>
<td>ACC_INTERFACE</td>
<td>0x0200</td>
<td>标识这是一个接口</td>
</tr>
<tr>
<td>ACC_ABSTRACT</td>
<td>0x0400</td>
<td>是否为 abstract 类型，对于接口或抽象类来说，此标志值为真</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>标识这个类并非由用户代码产生的</td>
</tr>
<tr>
<td>ACC_ANNOTATION</td>
<td>0x2000</td>
<td>标识这是一个注解</td>
</tr>
<tr>
<td>ACC_ENUM</td>
<td>0x4000</td>
<td>标识这是一个枚举</td>
</tr>
</tbody>
</table>
<p>access_flags 的值由上述标志值求或操作获得。</p>
<h4 id="类索引、父类索引和接口索引集合"><a href="#类索引、父类索引和接口索引集合" class="headerlink" title="类索引、父类索引和接口索引集合"></a>类索引、父类索引和接口索引集合</h4><p>类索引(this_class)和父类索引(super_class)都是一个 u2 类型的数据，而接口索引集合(interfaces)是一组 u2 类型的数据集合，Class 文件中由这三项数据来确定这个类的继承关系。</p>
<p>类索引用于确定这个类的全限定名。</p>
<p>父类索引用于确定这个类的父类的全限定名。</p>
<p>接口索引集合用来描述这个类实现了哪些接口，按照 implements 语句后的接口顺序从左到右排列在接口索引集合中。</p>
<p>类索引和父类索引引用两个 u2 类型的索引值表示，他们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过 CONSTANT_Class_info 类型的常量中的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2395997-d30e2d2d0df2b6ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt></p>
<h4 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h4><p>字段表(field_info)用于描述接口或者类中声明的变量，字段(field)包括类级变量以及实例级变量，但不包括局部变量。</p>
<p>字段表结构如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>descriptor_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody>
</table>
<p>字段修饰符放在 access_flags 项目中，他与类中的 access_flags 项目非常类似，结构如下：</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>字段是否为 public</td>
</tr>
<tr>
<td>ACC_PRIVATE</td>
<td>0x0002</td>
<td>字段是否为 private</td>
</tr>
<tr>
<td>ACC_PROTECTED</td>
<td>0x0004</td>
<td>字段是否为 private</td>
</tr>
<tr>
<td>ACC_STATIC</td>
<td>0x0008</td>
<td>字段是否为 static</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>字段是否为 final</td>
</tr>
<tr>
<td>ACC_VOLATILE</td>
<td>0x0040</td>
<td>字段是否为 volatile</td>
</tr>
<tr>
<td>ACC_TRANSIENT</td>
<td>0x0080</td>
<td>字段是否为 transient</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>字段是否由编译器自动产生</td>
</tr>
<tr>
<td>ACC_ENUM</td>
<td>0x4000</td>
<td>字段是否枚举</td>
</tr>
</tbody>
</table>
<p>跟随 access_flags 标志的是两项索引值：name_index 和 descriptor_index，他们都是对常量池的引用，分别代表着字段的简单名称以及字段和方法的描述符。</p>
<h4 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h4><p>Class 文件存储格式中对方法的描述与对字段的描述几乎一致。</p>
<p>方法表结构如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>descriptor_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody>
</table>
<p>方法表的访问标志结构如下：</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>方法是否为 public</td>
</tr>
<tr>
<td>ACC_PRIVATE</td>
<td>0x0002</td>
<td>方法是否为 private</td>
</tr>
<tr>
<td>ACC_PROTECTED</td>
<td>0x0004</td>
<td>方法是否为 private</td>
</tr>
<tr>
<td>ACC_STATIC</td>
<td>0x0008</td>
<td>方法是否为 static</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>方法是否为 final</td>
</tr>
<tr>
<td>ACC_SYNCHRONIZED</td>
<td>0x0020</td>
<td>方法是否为 synchronized</td>
</tr>
<tr>
<td>ACC_BRIDGE</td>
<td>0x0040</td>
<td>方法是否为编译器产生的桥接方法</td>
</tr>
<tr>
<td>ACC_VARARGS</td>
<td>0x0080</td>
<td>方法是否接收不定参数</td>
</tr>
<tr>
<td>ACC_NATIVE</td>
<td>0x0100</td>
<td>方法是否为 native</td>
</tr>
<tr>
<td>ACC_ABSTRACT</td>
<td>0x0200</td>
<td>方法是否为 abstract</td>
</tr>
<tr>
<td>ACC_STRICTFP</td>
<td>0x0400</td>
<td>方法是否接为 stricttfp</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>方法是否由编译器自动产生</td>
</tr>
</tbody>
</table>
<h4 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h4><p>在 Class 文件、字段表、方法表都可以携带自己的属性表集合。总共有 21 项预定义的属性，如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2395997-952f38c0c361dba3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt></p>
<h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h3><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载共 7 个阶段。其中验证、准备和解析 3 个部分统称为连接。如下图所示：</p>
<p><img src="http://static.zybuluo.com/Rico123/ojhhtids41ivtuowfj74mkb2/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B" alt></p>
<p>其中，加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班的<code>开始</code>，因为这些阶段通常都是相互交叉地混合式进行的，通常会在一个阶段执行的过程中调用、激活另外一个阶段。</p>
<p>对于初始化阶段，严格规定了<code>有且只有</code>5 种情况必须立即对类进行初始化：</p>
<ol>
<li>遇到 new、getstatic、putstatic 和 invokestatic 这四条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这四条指令的最常见的 Java 代码场景是:</li>
</ol>
<ul>
<li>使用 new 关键字实例化对象的时候；</li>
<li>读取或设置一个类的静态字段（被 final 修饰，已在编译器把结果放入常量池的静态字段除外）的时候；</li>
<li>调用一个类的静态方法的时候。</li>
</ul>
<ol start="2">
<li>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li>
<li>当虚拟机启动时，用户需要制定一个要执行的主类（包含 main()方法的类），虚拟机会先初始化这个主类</li>
<li>当使用 JDK1.7 动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化</li>
</ol>
<p>这 5 种场景中的行为被称为<code>对一个类进行主动引用</code>，除此之外，所有引用类的方式都不会触发初始化，称为<code>被动引用</code>。</p>
<p>接口的初始化与类只在第 3 种场景有区别：当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口都完成了初始化，只有在真正使用到父接口时才会初始化。</p>
<h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是类加载过程中的一个阶段，在加载阶段，虚拟机完成以下 3 件事情：</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<p>一个非数组类在加载阶段，即可以使用系统提供的引导类加载器去控制字节流的获取方式，也可以有用户自定义的类加载器去完成</p>
<p>数组类本身不通过类加载器创建，而是由 Java 虚拟机直接创建的，其（简称 C）创建过程遵循以下规则：</p>
<ul>
<li>如果数组的组件类型（指数组去掉一个维度的类型）是引用类型，递归采用加载过程区加载这个组件类型，数组 C 将在加载该组件类型的类加载器的类名称空间上被标识</li>
<li>如果数组的组件类型不是引用类型，Java 虚拟机将会把数组 C 标记为与引导类加载器关联</li>
<li>数组类的可见性与他的组件类型的可见性一致，如果组件类型不是引用类型，数组类的可见性默认为 public</li>
</ul>
<p>加载阶段完成后，虚拟机外部的二进制字节流就会按照虚拟机所需的格式存储在方法区中，方法区中的数据存储格式由虚拟机实现自定义，然后会在内存中实例化一个 java.lang.Class 类的对象，HotSpot 中这个对象存放在方法区中，这个对象将作为程序访问方法区中类型数据的外部接口。</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>验证是连接阶段的第一步，目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。</p>
<p>验证阶段大致上会完成下面 4 个阶段的检验动作：<code>文件格式验证</code>、<code>元数据验证</code>、<code>字节码验证</code>、<code>符号引用验证</code></p>
<ol>
<li>文件格式验证：主要验证字节流是否符合 Class 文件的格式规范</li>
<li>元数据验证：对字节码描述的信息进行语义分析，保证其描述的信息符合 Java 语言规范的要求</li>
<li>字节码验证：是最复杂的验证阶段，目的是通过数据流和控制流分析，确定程序语意是合法的、符合逻辑的</li>
<li>符号引用验证：发生在虚拟机将符号引用转化为直接引用时，目的是确保解析动作能正常进行</li>
</ol>
<p>验证阶段是非常重要但是非必要的阶段，如果运行的全部代码都已经被反复使用和验证过，可以考虑使用-Xverify:none 参数关闭大部分类验证措施，缩短虚拟机类加载时间</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段是正式为<code>类变量</code>分配内存并设置<code>类变量</code>初始值的阶段，这些变量将在方法区进行内存分配。</p>
<p>如果类字段的字段属性表中存在 ConstantValue 属性，准备阶段变量会被初始化为 ConstantValue 属性所指定的值。</p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量</p>
<p>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>类初始化阶段才真正开始执行类中定义的 Java 程序代码，是执行类构造器<clinit>()方法的过程。</clinit></p>
<ol>
<li><clinit>()方法是有编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的</clinit></li>
<li><clinit>()方法与类的构造函数不同，他不需要显式调用父类构造器，虚拟机会保证父类的<clinit>()方法先执行，所以第一个被执行的<clinit>()方法一定是 java.lang.Object</clinit></clinit></clinit></li>
<li>由于父类<clinit>()方法先执行，所以父类中定义的静态语句块要优先于子类变量的赋值操作</clinit></li>
<li><clinit>()方法对于类或接口来说不是必需的，如果类中没有静态语句块和对变量的赋值操作，则不为这个类生成<clinit>()方法</clinit></clinit></li>
<li>接口的<clinit>()方法不需要先执行父类的<clinit>()方法，只有当父接口中定义的变量使用时，父接口才会初始化。接口的实现类初始化时也不会执行接口的<clinit>()方法</clinit></clinit></clinit></li>
<li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确的加锁、同步</clinit></li>
</ol>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载阶段的“通过一个类的全限定名来获取定义此类的二进制字节流”这个动作被设计放到 Java 虚拟机外部实现，以便让应用程序自己决定如何去获取所需要的类，实现这个动作的代码模块称为<code>类加载器</code>。</p>
<h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。</p>
<h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>从 Java 虚拟机的角度来讲，只存来两种不同的类加载器：<code>启动类加载器</code>和<code>其他类加载器</code></p>
<p>从 Java 开发人员的角度来看，大部分 Java 程序会使用一下三种系统提供的类加载器：</p>
<ol>
<li>启动类加载器（Bootstrap ClassLoader）：将存放在&lt;JAVA_HOME&gt;/lib 目录中的，或被-Xbootclasspath 参数指定路径中的，且被虚拟机是别的类库加载到虚拟机内存中</li>
<li>扩展类加载器（Extension ClassLoader）：将存放在&lt;JAVA_HOME&gt;/lib/ext 目录中的，或呗 java.ext.dirs 系统变量指定路径中的所有类库加载到虚拟机内存中</li>
<li>应用程序类加载器（Application ClassLoader）：负责加载用户类路径（ClassPath）上所指定的类库</li>
</ol>
<p><img src="/uploads/in-post/parent-delegate.png" alt></p>
<p>图中展示的类加载器之间的层次关系，称为类加载器的<code>双亲委派模型</code>，该模型要求除了启动类加载器外，其余的类加载器都应当有自己的父类加载器。类加载器的父子关系都是使用<code>组合关系</code>来复用父加载器的</p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载请求，他首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的家在请求最终都应该传送到顶层的启动类加载器中，只有当父加载器在其搜索范围内没有找到所需的类时，子加载器才会尝试去加载。</p>
<p>双亲委派模型的代码都集中在 java.lang.ClassLoader 的 loadClass()方法中，代码如下：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">Class</span>&lt;?&gt; loadClass(String name,<span class="keyword">boolean</span> resolve)<span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="comment">// 首先检查请求的类是否应经被加载过了</span></span><br><span class="line">    <span class="keyword">Class</span> c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(parent != <span class="keyword">null</span>)&#123;</span><br><span class="line">                c = parent.loadClass(name,<span class="keyword">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;</span><br><span class="line">            <span class="comment">// 如果父类加载器抛出ClassNotFoundException</span></span><br><span class="line">            <span class="comment">// 说明父类无法完成加载请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 在父类加载器无法加载的时候</span></span><br><span class="line">            <span class="comment">// 再调用本身的findClass()方法来进行类加载</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(resolve)&#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码逻辑为：先检查是否已经被加载过，若没有加载则调用父加载器的 loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出 ClassNotFoundException 后，再调用自己的 findClass()方法进行类加载。</p>
<h4 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h4><p>双亲委派模型不是一个强制性的约束模型，而是 Java 设计者推荐给开发者的类加载器实现方式。到目前为止，出现过 3 次较大规模的“被破坏”情况。</p>
<ol>
<li>双亲委派模型在 JDK1.2 之后引入，为了向前兼容，在 java.lang.ClassLoader 添加了一个新的 protected 方法 findClass()</li>
<li>为了解决基础类需要调用会用户代码的问题，引入了一个不太优雅的设计：<code>线程上下文类加载器</code>，父类加载器可以通过他请求子类加载器去完成类加载动作</li>
<li>由于用户对程序动态性的追求而导致，例如 OSGi 的网状结构</li>
</ol>
<p>只要有足够的理由和意义，突破已有的原则就可以认为是一种创新。</p>
<p>参考</p>
<p>1、周志明，深入理解 Java 虚拟机：JVM 高级特性与最佳实践，机械工业出版社</p>
<p>2、xiedacon，<a href="https://www.jianshu.com/p/d0b7a0ca640b" target="_blank" rel="noopener">《深入理解 java 虚拟机》-类文件结构</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>类文件结构</tag>
        <tag>类加载机制</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移至 Hexo 博客</title>
    <url>/2018/05/04/2018-05-04-move-to-hexo-blog/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>之前一直使用的是基于 <code>jekyll</code> 的博客系统，但是功能不是十分的强大，最近老铁安利了 <code>Hexo</code> 这个博客系统，同时也想对自己以前的博文进行整理，所以开始准备将以前基于 <code>jekyll</code> 的博文迁移至 <code>Hexo</code>。</p>
<a id="more"></a>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="安装-git-和-node-js"><a href="#安装-git-和-node-js" class="headerlink" title="安装 git 和 node.js"></a>安装 <code>git</code> 和 <code>node.js</code></h4><p><strong>安装 Git</strong>:<br>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a><br>Mac：<code>brew install git</code><br>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code><br>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p>
<p><em>验证安装</em>：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">git version</span><br><span class="line"><span class="meta"># 输出：</span></span><br><span class="line"><span class="meta"># git version 2.7.4</span></span><br></pre></td></tr></table></figure>
<p><strong>安装 node.js</strong><br>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。<br>cURL:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/creationix/nvm/master/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>Wget:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -qO- http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/creationix/nvm/master/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，重启终端并执行下列命令即可安装 node.js：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">nvm <span class="keyword">install</span> stable</span><br></pre></td></tr></table></figure>
<p>当然，也可以根据 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a> 教程进行安装。</p>
<p><em>验证安装</em>：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">--version</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># v8.11.1</span></span><br></pre></td></tr></table></figure>
<h4 id="安装-hexo-cli"><a href="#安装-hexo-cli" class="headerlink" title="安装 hexo-cli"></a>安装 <code>hexo-cli</code></h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p><em>验证安装</em>：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">hexo version</span><br><span class="line"><span class="meta"># 输出：</span></span><br><span class="line"><span class="meta"># hexo-cli: 1.1.0</span></span><br><span class="line"><span class="meta"># os: Linux 4.4.0-122-generic linux x64</span></span><br><span class="line"><span class="meta"># http_parser: 2.8.0</span></span><br><span class="line"><span class="meta"># node: 8.11.1</span></span><br><span class="line"><span class="meta"># v8: 6.2.414.50</span></span><br><span class="line"><span class="meta"># uv: 1.19.1</span></span><br><span class="line"><span class="meta"># zlib: 1.2.11</span></span><br><span class="line"><span class="meta"># ares: 1.10.1-DEV</span></span><br><span class="line"><span class="meta"># modules: 57</span></span><br><span class="line"><span class="meta"># nghttp2: 1.25.0</span></span><br><span class="line"><span class="meta"># openssl: 1.0.2o</span></span><br><span class="line"><span class="meta"># icu: 60.1</span></span><br><span class="line"><span class="meta"># unicode: 10.0</span></span><br><span class="line"><span class="meta"># cldr: 32.0</span></span><br><span class="line"><span class="meta"># tz: 2017c</span></span><br></pre></td></tr></table></figure>
<p>恭喜恭喜，至此，<code>Hexo</code> 就安装成功啦！</p>
<h3 id="备份原博客仓库"><a href="#备份原博客仓库" class="headerlink" title="备份原博客仓库"></a>备份原博客仓库</h3><p>因为我是迁移博客，所以要备份一下原来的博客，如果你是新建博客的话，可以跳过这一步。</p>
<h4 id="备份原仓库"><a href="#备份原仓库" class="headerlink" title="备份原仓库"></a>备份原仓库</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">在 <span class="selector-tag">github</span> 中直接将原仓库重命名即可：</span><br><span class="line"><span class="selector-tag">blogName</span><span class="selector-class">.github</span><span class="selector-class">.io</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">blogName</span><span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.backup</span></span><br></pre></td></tr></table></figure>
<h4 id="新建空仓库"><a href="#新建空仓库" class="headerlink" title="新建空仓库"></a>新建空仓库</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">在 <span class="selector-tag">github</span> 中创建一个新的仓库：</span><br><span class="line"><span class="selector-tag">name</span>: <span class="selector-tag">blogName</span><span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure>
<h3 id="初始化并上传博客"><a href="#初始化并上传博客" class="headerlink" title="初始化并上传博客"></a>初始化并上传博客</h3><h4 id="创建本地-Hexo-项目"><a href="#创建本地-Hexo-项目" class="headerlink" title="创建本地 Hexo 项目"></a>创建本地 <code>Hexo</code> 项目</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 在用户根目录创建 <span class="selector-tag">Hexo</span> 项目</span><br><span class="line"><span class="selector-tag">cd</span> ~</span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">init</span> <span class="selector-tag">blogName</span><span class="selector-class">.github</span><span class="selector-class">.io</span></span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">blogName</span><span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure>
<h4 id="关联本地-Hexo-项目与-github"><a href="#关联本地-Hexo-项目与-github" class="headerlink" title="关联本地 Hexo 项目与 github"></a>关联本地 <code>Hexo</code> 项目与 <code>github</code></h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 将新建的 Hexo 项目进行 git 初始化</span></span><br><span class="line">git init</span><br><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">"Hexo 博客，第一次提交"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 将 git 项目与 github 进行关联</span></span><br><span class="line">git remote <span class="keyword">add</span> origin git@github.com:yourName/blogName.github.io.git</span><br><span class="line">git <span class="keyword">push</span> origin master</span><br><span class="line"></span><br><span class="line"><span class="meta"># 使用 gh-pages 分支开发原代码，master 分支用于放置编译后的站点文件</span></span><br><span class="line">git checkout -b gh-pages</span><br><span class="line">git <span class="keyword">push</span> --<span class="keyword">set</span>-upstream origin gh-pages</span><br></pre></td></tr></table></figure>
<h4 id="本地编译并远端部署"><a href="#本地编译并远端部署" class="headerlink" title="本地编译并远端部署"></a>本地编译并远端部署</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 blogName.github.io 目录下安装已有插件</span></span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Hexo 与 github 的关联插件</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改站点配置文件_config</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourName/blogName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 本地调试</span><br><span class="line">hexo s --debug</span><br><span class="line"></span><br><span class="line"># 部署文件到 master 分支，每次更新博文到 github 都要运行这三个命令，建议写成一个脚本</span><br><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 进入博客项目根目录，创建 <span class="keyword">next</span> 目录</span><br><span class="line"><span class="keyword">cd</span> ~/blogName.github.io</span><br><span class="line"><span class="built_in">mkdir</span> themes/<span class="keyword">next</span></span><br><span class="line"></span><br><span class="line"># 下载 NexT 主题</span><br><span class="line">curl -s http<span class="variable">s:</span>//api.github.<span class="keyword">com</span>/repos/theme-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span>/releases/latest | <span class="keyword">grep</span> tarball_url | cut -d <span class="string">'"'</span> -<span class="keyword">f</span> <span class="number">4</span> | wget -i - -O- | tar -zx -C themes/<span class="keyword">next</span> --strip-components=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="配置-NexT-主题"><a href="#配置-NexT-主题" class="headerlink" title="配置 NexT 主题"></a>配置 NexT 主题</h4><p>请参照 <a href="http://theme-next.iissnan.com/getting-started.html#install-next-theme" target="_blank" rel="noopener">Hexo 的文档</a></p>
<h3 id="增加站内搜索和阅读量统计功能"><a href="#增加站内搜索和阅读量统计功能" class="headerlink" title="增加站内搜索和阅读量统计功能"></a>增加站内搜索和阅读量统计功能</h3><h4 id="增加站内搜索功能"><a href="#增加站内搜索功能" class="headerlink" title="增加站内搜索功能"></a>增加站内搜索功能</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装相关插件</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置站点_config.xml 文件</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置主题_config.xml 文件</span></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="增加阅读量统计功能"><a href="#增加阅读量统计功能" class="headerlink" title="增加阅读量统计功能"></a>增加阅读量统计功能</h4><p>请参照 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md" target="_blank" rel="noopener">为 NexT 主题添加文章阅读量统计功能</a> 一文</p>
<h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><h4 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h4><p>安装插件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p>在站点配置文件中进行配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment"># Feed configuration.</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br></pre></td></tr></table></figure>
<p>参数的含义：</p>
<ul>
<li><code>type</code>: RSS 的类型 (atom/rss2)</li>
<li><code>path</code>: 文件路径, 默认是 atom.xml/rss2.xml</li>
<li><code>limit</code>: 展示文章的数量, 使用 0 或则 false 代表展示全部</li>
<li><code>hub</code>: PubSubHubbub hubs 的 URL，如果不用的话请置为空</li>
<li><code>content</code>: 在 RSS 文件中是否包含内容 , 有 3 个值 true/false 默认不填为 false</li>
<li><code>content_limit</code>: 指定内容的长度作为摘要, 仅仅在上面 content 设置为 false 和没有自定义的描述出现</li>
<li><code>content_limit_delim</code>: 上面截取描述的分隔符, 截取内容是以指定的这个分隔符作为截取结束的标志。在达到规定的内容长度之前最后出现的这个分隔符之前的内容，防止从中间截断.</li>
</ul>
<p>配置完成后运行 <code>hexo g</code>，如果在 <code>public</code> 文件夹生成了 <code>atom.xml</code> 文件说明添加成功。</p>
<h4 id="设置阅读全文"><a href="#设置阅读全文" class="headerlink" title="设置阅读全文"></a>设置阅读全文</h4><ol>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 关键字进行手动截断 2. 在主题配置文件中添加</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<h4 id="设置阅读百分比"><a href="#设置阅读百分比" class="headerlink" title="设置阅读百分比"></a>设置阅读百分比</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件中进行设置</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件中进行设置</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持原创技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br></pre></td></tr></table></figure>
<h4 id="添加菜单选项"><a href="#添加菜单选项" class="headerlink" title="添加菜单选项"></a>添加菜单选项</h4><h5 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h5><p>在 <code>blogName.github.io</code> 目录下调用命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加分类页面</span></span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">"categories"</span></span><br><span class="line"><span class="comment"># 添加标签页面</span></span><br><span class="line">hexo new<span class="built_in"> page </span>“tags”</span><br><span class="line"><span class="comment"># 添加关于页面</span></span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">"about"</span></span><br></pre></td></tr></table></figure>
<p>执行完指令后，在 <code>/source/</code> 文件夹下创建三个文件夹，命名分别为：<code>categories</code>、<code>tags</code>、<code>about</code> 文件夹</p>
<h5 id="修改页面"><a href="#修改页面" class="headerlink" title="修改页面"></a>修改页面</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-04</span> <span class="number">12</span><span class="string">:06:24</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-04</span> <span class="number">12</span><span class="string">:07:36</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于我</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-04</span> <span class="number">12</span><span class="string">:08:27</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"about"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>在文章开头添加关键字即可生成相应的 <code>分类</code> 和 <code>标签</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span>      <span class="string">"迁移至 Hexo 博客"</span></span><br><span class="line"><span class="attr">date:</span>       <span class="number">2018</span><span class="number">-05</span><span class="number">-04</span> <span class="number">12</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">NexT</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h4 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h4><p>在主题配置文件中修改 <code>social</code> 属性：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="string">https://www.zhihu.com/people/wenzhiquan/activities</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:wenzhiquanr@163.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">FB Page:</span> <span class="string">https://www.facebook.com/profile.php?id=100006943363300</span> <span class="string">||</span> <span class="string">facebook</span></span><br></pre></td></tr></table></figure>
<h4 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h4><p>在主题配置文件中修改 <code>links</code> 属性</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">肖楚天的博客:</span> <span class="string">https://xiaochutian.github.io/</span></span><br></pre></td></tr></table></figure>
<h4 id="添加近期文章"><a href="#添加近期文章" class="headerlink" title="添加近期文章"></a>添加近期文章</h4><p>在 <code>theme/next/layout/_macro/sidebar.swig</code> 中的 <code>if theme.links</code> 前面添加：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.recent_posts %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element </span></span></span><span class="template-variable">&#123;&#123;"links-of-blogroll-"+ theme.recent_posts_layout&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- modify icon to fire by szw --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-history fa-</span></span></span><span class="template-variable">&#123;&#123; theme.recent_posts_icon | lower&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;theme.recent_posts_title&#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-list"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> posts = site.posts.sort('-<span class="name">date</span>') %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> post in posts.slice('0', '5') %&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<p>并在主题配置文件中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>hexo g</code> 命令重新生成后即可显示</p>
<h4 id="添加字数统计"><a href="#添加字数统计" class="headerlink" title="添加字数统计"></a>添加字数统计</h4><p>安装插件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>然后在<code>站点配置文件</code>加入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并在<code>主题配置文件配置</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>
<h4 id="打赏字体不闪动"><a href="#打赏字体不闪动" class="headerlink" title="打赏字体不闪动"></a>打赏字体不闪动</h4><p>修改文件 <code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数 <code>wechat:hover</code> 和 <code>alipay:hover</code>，如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span><span class="comment">#wechat:hover p&#123;</span></span><br><span class="line"><span class="regexp">//</span>    animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>&#125;</span><br><span class="line"><span class="regexp">//</span><span class="comment">#alipay:hover p&#123;</span></span><br><span class="line"><span class="regexp">//</span>    animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件中配置</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如果还想继续对博客主题进行配置，请访问我的参考网站。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、Moorez，<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo 的 next 主题个性化教程: 打造炫酷网站</a></p>
<p>2、<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo 的 next 主题个性化配置教程</a></p>
<p>3、sunshine 小小倩，<a href="https://juejin.im/post/58eb2fd2a0bb9f006928f8c7#heading-16" target="_blank" rel="noopener">hexo 高阶教程</a></p>
<p>4、<a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客 Hexo+NexT+GithubPages 的超深度优化</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--简单工厂模式</title>
    <url>/2018/06/15/2018-06-15-design-pattern-simple-factory/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>简单工厂模式是最简单的设计模式之一，简单到甚至没有放到23种常用设计模式当中，可以用于设计模式的入门学习。</p>
<a id="more"></a>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>定义一个创建对象的接口，在工厂中决定实例化哪个对象的子类，解决了接口选择的问题</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>实现了子类对象创建和使用的分离</li>
<li>无需知道子类的类名，通过参数即可创建子类对象</li>
<li>屏蔽了子类的具体实现</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>每次增加新产品时，都需要修改工厂类，违反了开闭原则</li>
<li>产品和工厂类之间的依赖较大</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们将创建一个<code>Fruit</code>接口和实现<code>Fruit</code>接口的实体类，以及工厂类<code>FruitFactory</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建苹果实体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是苹果"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建梨实体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pear</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是梨"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建橙子实体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是橙子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据给get方法的不同参数名，返回相应的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equalsIgnoreCase(<span class="string">"pear"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equalsIgnoreCase(<span class="string">"orange"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Orange();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FruitFactory fruitFactory = <span class="keyword">new</span> FruitFactory();</span><br><span class="line">        <span class="comment">// 获取苹果对象并调用 describe 方法</span></span><br><span class="line">        Fruit apple = fruitFactory.getFruit(<span class="string">"apple"</span>);</span><br><span class="line">        apple.describe();</span><br><span class="line">        <span class="comment">// 获取梨对象并调用 describe 方法</span></span><br><span class="line">        Fruit pear = fruitFactory.getFruit(<span class="string">"pear"</span>);</span><br><span class="line">        pear.describe();</span><br><span class="line">        <span class="comment">// 获取橙子对象并调用 describe 方法</span></span><br><span class="line">        Fruit orange = fruitFactory.getFruit(<span class="string">"orange"</span>);</span><br><span class="line">        orange.describe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是苹果</span><br><span class="line">我是梨</span><br><span class="line">我是橙子</span><br></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当我们明确知道传入工厂的参数且对如何创建对象不关心时可以使用此方法，尽量在工厂中创建类型较少时采用此方法，以免工厂类过于复杂。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Thrift 简析</title>
    <url>/2018/05/30/2018-05-30-thrift-introduction/</url>
    <content><![CDATA[<blockquote>
<p>Thrift 是一种可扩展、跨语言的服务开发框架，用于各个服务之间的 RPC 通信。</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>Thrift</code> 最初由 <code>Facebook</code> 于 2007 年开发，2008 年进入 <code>Apache</code> 开源项目。Thrift 主要用于各个服务之间的 RPC 通信，是一种可扩展、跨语言的 <code>RPC</code> 服务开发框架，其服务端和客户端可以用不同的语言来开发。只需要依照 IDL（Interface Description Language）定义一次接口，Thrift 工具就能编译生成 C++, Java, Python, PHP, Ruby, JavaScript, Node.js 等语言的代码。</p>
<a id="more"></a>
<h3 id="Thrift-类型"><a href="#Thrift-类型" class="headerlink" title="Thrift 类型"></a>Thrift 类型</h3><p><code>Thrift</code> 的类型包括了基本类型，如 <code>bool</code>，<code>byte</code>，<code>double</code>，<code>string</code> 和不同长度的 <code>有符号整数</code> 类型；也提供了特殊类型如 <code>binary</code>，<code>enum</code>，<code>structs</code>，容器类型（<code>list</code>，<code>set</code>，<code>map</code>），<code>exception</code>，<code>service</code>，<code>const</code> 等，也支持类型定义。</p>
<h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bool:</span> <span class="string">布尔变量</span></span><br><span class="line"><span class="attr">byte:</span> <span class="number">8</span> <span class="string">位有符号整数</span></span><br><span class="line"><span class="attr">i16:</span> <span class="number">16</span> <span class="string">位有符号整数</span></span><br><span class="line"><span class="attr">i32:</span> <span class="number">32</span> <span class="string">位有符号整数</span></span><br><span class="line"><span class="attr">i64:</span> <span class="number">64</span> <span class="string">位有符号整数</span></span><br><span class="line"><span class="attr">double:</span> <span class="number">64</span> <span class="string">位浮点数</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">字符串</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>i16</code> 类型相当于 <code>short</code> 类型，<code>i32</code> 类型相当于 <code>int</code> 类型，<code>i64</code> 类型相当于 <code>long</code> 类型。</p>
<p><strong> 注：Thrift 不支持无符号整数类型，因为很多编程语言不存在无符号类型，比如 Java</strong></p>
<h4 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">binary: </span>未编码的字节序列</span><br></pre></td></tr></table></figure>
<h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> &#123;</span></span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>结构体中包含一系列的 <code>强类型</code> 域，目的是聚集一系列数据，类似于无继承的类。</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">     <span class="number">1</span>: <span class="built_in">string</span> name,</span><br><span class="line">     <span class="number">2</span>: <span class="built_in">byte</span> age,</span><br><span class="line">     <span class="number">3</span>: <span class="built_in">string</span> gender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h4><p>集合中的类型可以是除了 <code>service</code> 之外的任何类型，包括 <code>exception</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">list: 由 T 类型的数据组成的有序列表，元素可以重复</span><br><span class="line"><span class="keyword">set</span>:  由 T 类型的数据组成的无序集合，元素不可重复</span><br><span class="line"><span class="keyword">map</span>:  字典结构，<span class="keyword">key</span> 为 K 类型，<span class="keyword">value</span> 为 V 类型，键不可重复</span><br></pre></td></tr></table></figure>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>Thrift 支持自定义 <code>exception</code>，规则和 <code>struct</code> 类似：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">exception</span> <span class="title">RequestException</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="built_in">i32</span> code,</span><br><span class="line">    <span class="number">2</span>: <span class="built_in">string</span> reason</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>thrift 定义服务相当于 Java 中创建 <code>Interface</code>，创建的 <code>service</code> 经过代码生成命令之后就会生成客户端和服务端的框架代码。定义形式如下：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">HelloWordService</span> </span>&#123;</span><br><span class="line">     <span class="comment">// service 中定义的函数，相当于 Java interface 中定义的函数</span></span><br><span class="line">     <span class="built_in">string</span> doAction(<span class="number">1</span>: <span class="built_in">string</span> name, <span class="number">2</span>: <span class="built_in">i32</span> age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="常量-const"><a href="#常量-const" class="headerlink" title="常量 (const)"></a>常量 (const)</h4><p>thrift 也支持常量定义，使用 <code>const</code> 关键字，例如：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">i32</span> MAX_RETRIES_TIME = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> MY_WEBSITE = <span class="string">"http://qifuguang.me"</span></span><br></pre></td></tr></table></figure>
<h4 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h4><p>thrift 支持类似 C++ 一样的 <code>typedef</code> 定义，比如：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">i32</span> Integer</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">i64</span> Long</span><br></pre></td></tr></table></figure>
<h3 id="Thrift-语法"><a href="#Thrift-语法" class="headerlink" title="Thrift 语法"></a>Thrift 语法</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>thrift 的命名空间相当于 Java 中的 <code>package</code>，主要目的是组织代码。thrift 使用关键字 <code>namespace</code> 定义命名空间，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">namespace</span> <span class="selector-tag">java</span> <span class="selector-tag">com</span><span class="selector-class">.winwill</span><span class="selector-class">.thrift</span></span><br></pre></td></tr></table></figure>
<h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>thrift 也支持文件包含，相当于 C/C++ 中的 <code>include</code>，Java 中的 <code>import</code>。使用关键字 <code>include</code> 定义，例 如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">"global.thrift"</span></span><br></pre></td></tr></table></figure>
<h4 id="可选与必选"><a href="#可选与必选" class="headerlink" title="可选与必选"></a>可选与必选</h4><p>thrift 提供两个关键字 <code>required</code>，<code>optional</code>，分别用于表示对应的字段时必填的还是可选的。例如：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="number">2</span>: <span class="keyword">optional</span> <span class="built_in">i32</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表示 name 是必需的，age 是可选的。</p>
<h4 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h4><p>当一个结构体中，<code>field</code> 之间的关系是互斥的，即只能有一个 <code>field</code> 可生效被赋值。我们可以用 <code>union</code> 来声明这个结构体，而不是一堆堆 <code>optional</code> 的 <code>field</code>，语意上也更明确了。例如：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">JavaObjectArg</span> &#123;</span></span><br><span class="line">  <span class="number">1</span>: i32 int_arg;</span><br><span class="line">  <span class="number">2</span>: i64 long_arg;</span><br><span class="line">  <span class="number">3</span>: string string_arg;</span><br><span class="line">  <span class="number">4</span>: bool bool_arg;</span><br><span class="line">  <span class="number">5</span>: binary binary_arg;</span><br><span class="line">  <span class="number">6</span>: double double_arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>thrift 注释方式支持 shell 风格的注释，支持 C/C++ 风格的注释，即 <code>#</code> 和 <code>//</code> 开头的语句都单当做注释，<code>/**/</code> 包裹的语句也是注释。</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"># 这是一个注释</span><br><span class="line"><span class="comment">// 这也是一个注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是一个多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="number">2</span>: <span class="keyword">optional</span> <span class="built_in">i32</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="python2-示例"><a href="#python2-示例" class="headerlink" title="python2 示例"></a>python2 示例</h3><h4 id="定义idl"><a href="#定义idl" class="headerlink" title="定义idl"></a>定义idl</h4><p>首先我们需要定义一个 <code>idl</code> —— <code>hello.thrift</code>:</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thrift接口定义文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> say(<span class="number">1</span>:<span class="built_in">string</span> msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><p>运行命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">thrift</span> <span class="selector-tag">-r</span> <span class="selector-tag">-gen</span> <span class="selector-tag">py</span> <span class="selector-tag">hello</span><span class="selector-class">.thrift</span></span><br></pre></td></tr></table></figure>
<p>会生成一个 <code>gen-py</code> 文件夹，里面的 <code>hello</code> 文件夹即为生成的服务</p>
<h4 id="server端代码"><a href="#server端代码" class="headerlink" title="server端代码"></a>server端代码</h4><p>在 <code>gen-py</code> 目录中新建 <code>server.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">thrift_client.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.server <span class="keyword">import</span> TServer</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> HelloService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloServiceHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        ret = <span class="string">"Received: "</span> + msg</span><br><span class="line">        <span class="keyword">print</span> ret</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handler = HelloServiceHandler()</span><br><span class="line">processor = HelloService.Processor(handler)</span><br><span class="line">transport = TSocket.TServerSocket(<span class="string">"localhost"</span>, <span class="number">9090</span>)</span><br><span class="line">tfactory = TTransport.TBufferedTransportFactory()</span><br><span class="line">pfactory = TBinaryProtocol.TBinaryProtocolFactory()</span><br><span class="line"></span><br><span class="line">server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Starting thrift server in python..."</span></span><br><span class="line">server.serve()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"done!"</span></span><br></pre></td></tr></table></figure>
<h4 id="client端代码"><a href="#client端代码" class="headerlink" title="client端代码"></a>client端代码</h4><p>在 <code>gen-py</code> 目录中新建 <code>client.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">thrift_client.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> HelloService</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    transport = TSocket.TSocket(<span class="string">'localhost'</span>, <span class="number">9090</span>)</span><br><span class="line">    transport = TTransport.TBufferedTransport(transport)</span><br><span class="line">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">    client = HelloService.Client(protocol)</span><br><span class="line">    transport.open()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"client - say"</span></span><br><span class="line">    msg = client.say(<span class="string">"Hello!"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"server - "</span> + msg</span><br><span class="line"></span><br><span class="line">    transport.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Thrift.TException, ex:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s"</span> % (ex.message)</span><br></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ python server.py</span><br><span class="line">Starting thrift<span class="built_in"> server </span><span class="keyword">in</span> python<span class="built_in">..</span>.</span><br><span class="line">Received: Hello!</span><br><span class="line"></span><br><span class="line">$ ptyhon client.py</span><br><span class="line">client - say</span><br><span class="line">server - Received: Hello!</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、winwill2010，<a href="https://blog.csdn.net/winwill2012/article/details/71627886" target="_blank" rel="noopener">Thrift 入门教程</a><br>2、王博文，<a href="https://blog.csdn.net/dutsoft/article/details/71178655" target="_blank" rel="noopener">Python Thrift示例</a></p>
]]></content>
      <categories>
        <category>Thrift</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--工厂方法模式</title>
    <url>/2018/06/16/2018-06-16-design-pattern-factory-method/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>由于简单工厂模式每次增加新的产品时，都需要修改工厂类，违背了开闭原则，可以通过定义工厂类的父类，为每种产品都创建一个工厂，从而动态的获取子类，并且增加产品时增加工厂子类即可，不用修改工厂父类。</p>
<a id="more"></a>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>解决简单工厂模式中违背开闭原则的问题</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>新增产品时，增加具体产品类和工厂子类即可，不用更改工厂父类</li>
<li>每个具体工厂类只负责一个产品的创建，更符合单一职责原则</li>
<li>更利于形成继承结构</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>每次增加新产品时，都需要增加工厂类，导致系统复杂度变高</li>
<li>产品和工厂类之间的依赖较大</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们将创建一个<code>Product</code>接口和实现<code>Product</code>接口的实体类，工厂接口类<code>Factory</code>和实现<code>Factory</code>接口的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">Product <span class="title">getProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prouduct1</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是产品1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prouduct2</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是产品2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory1</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Prouduct1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory2</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Prouduct2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodPattern</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory factory1 = <span class="keyword">new</span> Factory1();</span><br><span class="line">        factory1.getProduct().show();</span><br><span class="line">        Factory factory2 = <span class="keyword">new</span> Factory2();</span><br><span class="line">        factory2.getProduct().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">我是产品<span class="number">1</span></span><br><span class="line">我是产品<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>但用户只知道产品对应的工厂，而不知道具体产品的类名时可以使用此模式。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--抽象工厂模式</title>
    <url>/2018/06/25/2018-06-25-design-pattern-abstract-factory/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>工厂方法模式</code>中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。此时工厂方法模式就无法完成需求，而抽象工厂模式可以解决这个问题。</p>
<a id="more"></a>
<h3 id="模式意图"><a href="#模式意图" class="headerlink" title="模式意图"></a>模式意图</h3><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用<code>抽象工厂模式</code>。</p>
<p><code>抽象工厂模式</code>与<code>工厂方法模式</code>最大的区别在于:</p>
<ul>
<li>工厂方法模式针对的是一个产品等级结构</li>
<li>抽象工厂模式需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。</li>
</ul>
<p>当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。</li>
<li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li>
<li>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li>
<li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li>
</ul>
</li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>抽象工厂模式包含如下角色：</p>
<ul>
<li>AbstractFactory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
<li>AbstractProduct：抽象产品</li>
<li>Product：具体产品</li>
</ul>
<p><img src="/uploads/in-post/design_patterns/abstract_factory_struc.jpg" alt></p>
<p><strong>时序图</strong></p>
<p><img src="/uploads/in-post/design_patterns/abstract_factory_seq.jpg" alt></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>AbstractProductA:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>AbstractProductA &#123;</span><br><span class="line">    void display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AbstractProductB:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>AbstractProductB &#123;</span><br><span class="line">    void draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProductA1:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">implements</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is product A1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProductA2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">implements</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is product A2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProductB1:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">implements</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is product B1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProductB2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">implements</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is product B2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AbstractFactory:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConcreteFactory1:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConcreateFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductA1</span> createProductA() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductB1</span> createProductB() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConcreteFactory1:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConcreateFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductA2</span> createProductA() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductB2</span> createProductB() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory productFactory1 = <span class="keyword">new</span> ConcreateFactory1();</span><br><span class="line"></span><br><span class="line">        AbstractProductA a1 =  productFactory1.createProductA();</span><br><span class="line"></span><br><span class="line">        a1.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">        AbstractProductB b1 = productFactory1.createProductB();</span><br><span class="line"></span><br><span class="line">        b1.draw();</span><br><span class="line"></span><br><span class="line">        AbstractFactory productFactory2 = <span class="keyword">new</span> ConcreateFactory2();</span><br><span class="line"></span><br><span class="line">        AbstractProductA a2 = productFactory2.createProductA();</span><br><span class="line"></span><br><span class="line">        a2.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">        AbstractProductB b2 = productFactory2.createProductB();</span><br><span class="line"></span><br><span class="line">        b2.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> A1</span><br><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> B1</span><br><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> A2</span><br><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> B2</span><br></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在以下情况下可以使用抽象工厂模式：</p>
<ul>
<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。<br>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li>
<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li>
<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--策略模式</title>
    <url>/2018/06/27/2018-06-27-design-pattern-strategy/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。</p>
<p>策略模式是一种对象行为型模式。</p>
<a id="more"></a>
<h3 id="模式意图"><a href="#模式意图" class="headerlink" title="模式意图"></a>模式意图</h3><p>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。</p>
<p>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。</p>
<p>在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。</p>
<p>除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。</p>
<p>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>
<li>策略模式提供了管理相关的算法族的办法。</li>
<li>策略模式提供了可以替换继承关系的办法。</li>
<li>使用策略模式可以避免使用多重条件转移语句。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ul>
</li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>抽象工厂模式包含如下角色：</p>
<ul>
<li>Context: 环境类</li>
<li>Strategy: 抽象策略类</li>
<li>ConcreteStrategy: 具体策略类</li>
</ul>
<p><img src="/uploads/in-post/design_patterns/strategy_struc.png" alt></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Strategy:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>Strategy &#123;</span><br><span class="line">    public int doAction(int i, int j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AddStrategy:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doAction</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MinusStrategy:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinusStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doAction</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Context:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="keyword">this</span>.strategy.doAction(i, j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main:</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> <span class="type">Context</span>();</span><br><span class="line">        Strategy addStrategy = <span class="keyword">new</span> <span class="type">AddStrategy</span>();</span><br><span class="line">        Strategy minusStrategy = <span class="keyword">new</span> <span class="type">MinusStrategy</span>();</span><br><span class="line">        context.setStrategy(addStrategy);</span><br><span class="line">        context.executeStrategy(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        context.setStrategy(minusStrategy);</span><br><span class="line">        context.executeStrategy(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在以下情况下可以使用策略模式：</p>
<ul>
<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>
<li>一个系统需要动态地在几种算法中选择一种。</li>
<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>
<li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--观察者模式</title>
    <url>/2018/06/26/2018-06-26-design-pattern-observer/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>当对象间存在一对多关系，且当一个对象被修改时，会自动通知它的依赖对象，则使用观察者模式（Observer Pattern）。观察者模式属于行为型模式。</p>
<a id="more"></a>
<h3 id="模式意图"><a href="#模式意图" class="headerlink" title="模式意图"></a>模式意图</h3><p>可以建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为被观察者，而被通知的对象称为观察者，一个被观察者可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式意图。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>观察者模式可以实现表示层和数据逻辑层的分离，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有不同的表示层作为具体观察者角色。</li>
<li>观察者模式在被观察者和观察者之间建立一个抽象的耦合。</li>
<li>观察者模式支持广播通信。</li>
<li>观察者模式符合“开闭原则”的要求。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>如果一个被观察者对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>
<li>如果在观察者和被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，可能导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道被观察者发生了变化。</li>
</ul>
</li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>抽象工厂模式包含如下角色：</p>
<ul>
<li>Subject：目标</li>
<li>ConcreteSubject：具体目标</li>
<li>Observer：观察者</li>
<li>ConcreteObserver：具体观察者</li>
</ul>
<p><img src="/uploads/in-post/design_patterns/observer_struc.png" alt></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Subject:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subject</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConcreteSubject:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer: observers) &#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        dataChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Observer:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>Observer &#123;</span><br><span class="line">    public void update(Subject sub, Object obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConcreteObserver:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject concreteSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.concreteSubject = subject;</span><br><span class="line">        <span class="keyword">this</span>.concreteSubject.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject sub, Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Subject is "</span> + sub.toString() + <span class="string">" Data is "</span> + obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        Observer observer = <span class="keyword">new</span> ConcreteObserver(subject);</span><br><span class="line">        subject.setData(<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;()&#123;&#123;<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);&#125;&#125;);</span><br><span class="line">        subject.setData(<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;()&#123;&#123;<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);&#125;&#125;);</span><br><span class="line">        subject.setData(<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;()&#123;&#123;<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>);&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Subject <span class="keyword">is</span> observer_pattern.<span class="symbol">ConcreteSubject@</span><span class="number">610455</span>d6 Data <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>&#125;</span><br><span class="line">Subject <span class="keyword">is</span> observer_pattern.<span class="symbol">ConcreteSubject@</span><span class="number">610455</span>d6 Data <span class="keyword">is</span> &#123;<span class="number">2</span>=<span class="number">2</span>&#125;</span><br><span class="line">Subject <span class="keyword">is</span> observer_pattern.<span class="symbol">ConcreteSubject@</span><span class="number">610455</span>d6 Data <span class="keyword">is</span> &#123;<span class="number">3</span>=<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在以下情况下可以使用观察者模式：</p>
<ul>
<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li>
<li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li>
<li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li>
<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 简明教程</title>
    <url>/2018/06/30/2018-06-30-vim-introduction/</url>
    <content><![CDATA[<blockquote>
<p>“Vim 是一个历史悠久的，具有很多命令的功能非常强大的文本编辑器，被称为 <code>编辑器之神</code>。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://zh.wikipedia.org/wiki/Vim" target="_blank" rel="noopener">Vim</a> 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和 Emacs 并列成为类 Unix 系统用户最喜欢的编辑器。两派使用者经常发起 “XXX 才是最好的编辑器” 之争。</p>
<a id="more"></a>
<h4 id="Vim-的几种模式"><a href="#Vim-的几种模式" class="headerlink" title="Vim 的几种模式"></a>Vim 的几种模式</h4><p>Vim 最常用的有四个模式，分别是：</p>
<p><code>normal 模式</code>：在普通模式中，用户可以执行一般的编辑器命令，比如移动光标，删除文本等等。这也是 Vim 启动后的默认模式。<br><code>insert 模式</code>：在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按 ESC 键回到普通模式。<br><code>visual 模式</code>：这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim 的 “文本对象” 也能和移动命令一样用在这个模式中。<br><code>command 模式</code>：在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（<code>:</code> 键），搜索（<code>/</code> 和 <code>?</code> 键）或者过滤命令（<code>!</code> 键）。在命令执行之后，Vim 返回到命令行模式之前的模式，通常是普通模式。</p>
<p>此外还有一些衍生模式，包括：</p>
<p><code>操作符等待模式</code>：这个派生模式指普通模式中，执行一个操作符命令后 Vim 等待一个 “动作” 来完成这个命令。如 <code>dw</code> 中的 <code>d</code> 即为操作符<br><code>插入普通模式</code>：这个模式是在插入模式下按下 <code>Ctrl-o</code> 键的时候进入。这个时候暂时进入普通模式，执行完一个命令之后，Vim 返回插入模式<br><code>替换模式</code>：这是一个特殊的插入模式，在这个模式中可以做和插入模式一样的操作，但是每个输入的字符都会覆盖文本缓冲中已经存在的字符。在普通模式下按 <code>R</code> 键进入。</p>
<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>Vim 自带一个交互式的基本教程，里面包括了最常用的命令和你应该学了解的最基础的知识，安装 vim 之后，只需要在终端输入：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vimtutor</span></span><br></pre></td></tr></table></figure>
<p>运行命令后，会出现操作系统对应语言的教程文档，首先要做的就是要对这个基础文档中的所有命令进行练习，直到形成肌肉记忆，下面简单总结一下教程中使用到的命令。</p>
<h4 id="进入和退出-Vim"><a href="#进入和退出-Vim" class="headerlink" title="进入和退出 Vim"></a>进入和退出 Vim</h4><p>输入命令 <code>vim filename</code>，即为使用 vim 打开文件。由于这是一个新建文件，你会得到一个空的窗口。屏幕看起来会像下面这样:</p>
<pre><code>+---------------------------------------+
|#                                      |
|~                                      |
|~                                      |
|~                                      |
|~                                      |
|&quot;file.txt&quot; [New file]                  |
+---------------------------------------+
        (&apos;#&quot; 是当前光标的位置)
</code></pre><p>以波纹线 (<code>~</code>) 开头的行表示该行在文件中不存在。换句话说，如果 Vim 打开的文件不能充满这个显示的屏幕，它就会显示以波纹线开头的行。在屏幕的底部，有一个消息行指示文件名为 file.txt 并且说明这是一个新建的文件。这行信息是临时的，新的信息可以覆盖它。</p>
<p>处于 <code>normal</code> 模式时 (按 <esc> 键)，输入命令 <code>:q</code>，即可退出 vim 编辑器，如果不想保存修改而退出，使用 <code>:q!</code> 命令。</esc></p>
<p>处于 <code>normal</code> 模式时，输入命令 <code>:wq</code> 可以保存文件并退出 vim 编辑器，其中 <code>:w</code> 命令表示保存文件，也可以按下 <code>ZZ</code> 保存并退出文件。</p>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><p>Vim 使用 <code>hjkl</code> 来控制光标的移动。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">h 的键位位于四个字母的最左边，每次按下光标就会向左移动</span><br><span class="line">l 的键位位于四个字母的最右边，每次按下光标就会向右移动</span><br><span class="line">我们一般说上下，<span class="keyword">jk </span>键位的位置正好对应了这个说法，<span class="keyword">j </span>表示上，k 表示下</span><br></pre></td></tr></table></figure>
<p>按下 <code>G</code> 键可以跳转到文件末尾，按下 <code>gg</code> 可以跳转到文件开头，也可以通过 <code>: 行号</code> 或者 <code>行号 G</code> 命令快速跳转到行号处。</p>
<pre><code>         |   first line of a file   ^
         |   text text text text    |
         |   text text text text    |  gg
7G / :7  |   text text text text    |
         |   text text text text
         |   text text text text
         V   text text text text    |
             text text text text    |  G
             text text text text    |
             last line of a file    V
</code></pre><p>按下 <code>^</code> 可以跳转到本行第一个不为空白字符处，按下 <code>0</code> 可以返回行首。按下 <code>$</code> 可以跳转到行尾。</p>
<pre><code>           ^
     &lt;------------
.....This is a line with example text
&lt;-----------------   ---------------&gt;
0                  $
(这里 &quot;.....&quot; 表示空白字符)
</code></pre><p>按下 <code>w</code> 可以跳转到下一个单词词首， <code>3w</code> 表示跳转 3 个单词。</p>
<pre><code>This is a line with example text
---&gt;--&gt;-&gt;-----------------&gt;
 w  w  w    3w
</code></pre><p>按下 <code>b</code> 可以跳转到上一个单词词首</p>
<pre><code>This is a line with example text
&lt;----&lt;--&lt;-&lt;---------&lt;---
   b   b b    2b      b
</code></pre><p>按下 <code>e</code> 可以跳转到下一个单词词尾，按下 <code>ge</code> 可以跳转到上一个单词词尾。</p>
<pre><code>This is a line with example text
   &lt;-   &lt;--- -----&gt;   ----&gt;
   ge    ge     e       e
</code></pre><p>上面的 <code>w, b, e, ge</code> 会将标点符号也认为是一个单词，如果使用 <code>W, B, E, gE</code> 会以空白字符作为分隔符进行单词跳转，如下：</p>
<pre><code>       ge      b          w                             e
       &lt;-     &lt;-         ---&gt;                          ---&gt;
This is-a line, with special/separated/words (and some more).
   &lt;----- &lt;-----         --------------------&gt;         -----&gt;
   gE      B                   W                       E
   ge      b          w                             e
</code></pre><p>使用操作符 <code>f</code> 可以向后移动到一个指定的字符处，如 <code>fx</code> 向后查找到本行中的字符 <code>x</code> 。</p>
<p>例如，假定你在下行行首，而想移动到单词 <code>human</code> 的 <code>h</code> 那里。执行命令 <code>fh</code> 即可:</p>
<pre><code>To err is human.  To really foul up you need a computer.
----------&gt;---------------&gt;
    fh           fy
</code></pre><p>这个例子里同时演示 <code>fy</code> 命令移动到了 <code>really</code> 的词尾。</p>
<p>你可以在这个命令前面加计数前缀，所以，你可以用 <code>3fl</code> 命令移动到光标后第三个 <code>l</code> 处，即 <code>foul</code> 的 <code>l</code>:</p>
<pre><code>To err is human.  To really foul up you need a computer.
          ---------------------&gt;
                   3fl
</code></pre><p><code>F</code> 命令用于向左查找:</p>
<pre><code>To err is human.  To really foul up you need a computer.
          &lt;---------------------
                    Fh
</code></pre><p><code>tx</code> 命令与 <code>fx</code> 相似，但它会把光标移动到目标字符的前一个字符上。提示: <code>t</code> 表示 <code>To</code> (到达)。这个命令的反向版本是 <code>Tx</code>。</p>
<pre><code>To err is human.  To really foul up you need a computer.
           &lt;------------  -------------&gt;
                Th              tn
</code></pre><p>移动光标的命令是 Vim 中最为基础的命令，但是他和我们平常使用的上下左右键有较大的区别，所以需要进行大量的练习让他成为你理所当然的操作习惯。</p>
<p>推荐一款游戏用来练习 Vim 的基础命令：</p>
<p><a href="https://github.com/jmoon018/PacVim" target="_blank" rel="noopener">PacVim</a></p>
<p>通过这个游戏，可以快速的上手和熟练 vim 的基本操作，值得一试。</p>
<h4 id="相对屏幕移动"><a href="#相对屏幕移动" class="headerlink" title="相对屏幕移动"></a>相对屏幕移动</h4><p>通过 <code>Ctrl-f</code> 向下翻页，<code>Ctrl-b</code> 向上翻页， <code>Ctrl-u</code> 向下滚动半屏（即把当前行上半屏的行置于当前行）， <code>Ctrl-d</code> 向上滚动半屏（即把当前行下半屏的行置于当前行）， <code>Ctrl-e</code> 逐行下滚，<code>Ctrl-y</code> 逐行上滚。这在几乎所有 Unix 软件中都是可以使用的，比如 man 和 less。</p>
<pre><code>                               +----------------+
                               | some text      |
                               | some text      |
      原文本                    | some text      |
+---------------+              | some text      |
| some text     |  CTRL-U  --&gt; |                |
|               |              | 123456         |
| 123456        |              +----------------+
| 7890          |
|               |              +----------------+
| example       |  CTRL-D --&gt;  | 7890           |
+---------------+              |                |
                               | example        |
                               | example        |
                               | example        |
                               | example        |
                               +----------------+
</code></pre><p><code>H</code> 可以移动到屏幕的首行，<code>L</code> 到屏幕尾行，<code>M</code> 到屏幕中间。</p>
<pre><code>        +---------------------------+
H --&gt;   | text sample text          |
        | sample text               |
        | text sample text          |
        | sample text               |
M --&gt;   | text sample text          |
        | sample text               |
        | text sample text          |
        | sample text               |
L --&gt;   | text sample text          |
        +---------------------------+
</code></pre><p><code>zt</code> 可以置顶当前行，通常用来查看完整的下文，比如函数、类的定义。 <code>zz</code> 将当前行移到屏幕中部，<code>zb</code> 移到底部。</p>
<pre><code>+------------------+             +------------------+
| some text        |   zt  --&gt;   | line with cursor |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| line with cursor |             | some text        |
| some text        |             | some text        |
+------------------+             +------------------+

+------------------+             +------------------+
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |   zz  --&gt;   | line with cursor |
| some text        |             | some text        |
| some text        |             | some text        |
| line with cursor |             | some text        |
| some text        |             | some text        |
+------------------+             +------------------+

+------------------+             +------------------+
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| some text        |             | some text        |
| line with cursor |             | some text        |
| some text        |   zb  --&gt;   | line with cursor |
+------------------+             +------------------+
</code></pre><h4 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h4><h5 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h5><p>在 normal 模式下，按下 <code>i</code> 键可以在光标所在处进入 insert 模式，按下 <code>I</code> 键会直接在行首进入 insert 模式。</p>
<p>在 normal 模式下，按下 <code>a</code> 键可以在光标所在处之后进入 insert 模式，按下 <code>A</code> 键会直接在行尾进入 insert 模式。</p>
<p>在 normal 模式下，按下 <code>o</code> 键可以在光标所在行之后插入空行，按下 <code>O</code> 键则是在光标所在行之前插入空行，两个命令都会进入 insert 模式。</p>
<p>如果进入了 insert 模式，Vim 会在窗口的底部显示 <code>--INSERT--</code> (中文模式显示的是 <code>-- 插入 --</code>)，这表示你在插入模式。</p>
<pre><code>+---------------------------------------+
|A very intelligent turtle              |
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|-- INSERT --                           |
+---------------------------------------+
</code></pre><h5 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h5><p>在 normal 模式下，可以使用 <code>x</code> 键删除光标坐在位置的字符。</p>
<p>在 normal 模式下，可以使用 <code>dw</code> 命令删除至一个单词的末尾，其中 <code>d</code> 是一个 <code>操作符</code>，可以和其他 <code>动作</code> 命令进行组合，使用删除操作符 <code>d</code> 的命令格式如下：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">d motion</span><br><span class="line"><span class="meta"># d      - 删除操作符</span></span><br><span class="line"><span class="meta"># motion - 操作符的操作对象</span></span><br></pre></td></tr></table></figure>
<p>如 <code>dd</code> 是删除一行，<code>db</code> 是往前删除至单词开头，<code>d$</code> 是删除至行末等。</p>
<h5 id="替换文本"><a href="#替换文本" class="headerlink" title="替换文本"></a>替换文本</h5><p>在 normal 模式下，按下 <code>r</code> 键可以进入替换状态，可以输入任意字符替换光标所在的字符，替换后即会退出替换状态，如果想保持替换状态，可以使用 <code>R</code> 命令，即可进入替换模式，你输入的字符会依次替换光标所在的字符，直到你按 <esc> 退出替换模式。</esc></p>
<pre><code>+---------------------------------------+
|A very intelligent turtle              |
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|-- REPLACE --                          |
+---------------------------------------+
</code></pre><h5 id="更改文本"><a href="#更改文本" class="headerlink" title="更改文本"></a>更改文本</h5><p>使用操作符 <code>c</code> 可以实现更改文本，实现的功能相当于删除并进入 insert 模式，例如 <code>cw</code> 命令表示删除一个单词并进入 insert 模式，<code>c$</code> 命令表示删除至行尾并进入 insert 模式， <code>cc</code> 表示修改一整行，但是会保留这一行的缩进。</p>
<pre><code>To err is human
   -------&gt;
     c2w
To human
</code></pre><h5 id="复制和粘贴文本"><a href="#复制和粘贴文本" class="headerlink" title="复制和粘贴文本"></a>复制和粘贴文本</h5><p>使用操作符 <code>y</code> 可以复制文本，例如 <code>yy</code> 可以复制一行的文本，<code>yw</code> 可以复制一个单词，使用 visual 模式选中文本后按 <code>y</code> 可以复制选中文本。</p>
<p>除了复制的文本外，Vim 的删除操作也会将删除的文本存入一个寄存器中，使用 <code>p</code> 命令可以在光标之后插入寄存器中的内容，使用 <code>P</code> 命令可以在光标之前插入寄存器中的内容。</p>
<pre><code>let sqr = LongVariable *
         --------------&gt;
               y2w

let sqr = LongVariable *
                       p

let sqr = LongVariable * LongVariable
</code></pre><h5 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h5><p>之前说到使用 <code>:w</code> 命令可以保存文件，默认存储的文件名为打开文件的文件名，如果需要另存为的话，只需要在命令后加上另存为的文件名即可，如 <code>:w filename</code> 便可将文件另存为为 <code>filename</code>。</p>
<p>除了保存整个文件之外，vim 还支持部分文本的保存，按下 <code>v</code> 进入 visual 模式，移动光标选中想要部分保存的内容，输入 <code>:</code> 字符，可以看到屏幕底部会出现 <code>:&#39;&lt;,&#39;&gt;</code>，输入命令 <code>w filename</code>，命令变为 <code>:&#39;&lt;,&#39;&gt;w filename</code> 即可把选中的内容保存到 <code>filename</code> 文件中。</p>
<h5 id="提取和合并文件"><a href="#提取和合并文件" class="headerlink" title="提取和合并文件"></a>提取和合并文件</h5><p>和 <code>:w</code> 命令相对应的，<code>:r</code> 命令是从文件中读取文本，输入命令 <code>:r filename</code>，将会读取文件 <code>filename</code> 中的所有内容，并将其插入到光标所在位置处。</p>
<h4 id="使用计数指定动作"><a href="#使用计数指定动作" class="headerlink" title="使用计数指定动作"></a>使用计数指定动作</h4><p>在 normal 模式下，输入 <code>4h</code> 使光标向前移动 4 个位置，输入 <code>2w</code> 使光标向后移动两个单词。</p>
<p>在 normal 模式下，输入 <code>d2w</code> 向后删除两个单词，输入 <code>2dw</code> 先后删除两个单词，这两个命令的区别是，前者是执行一次删除两个单词的命令，后者是执行两次删除一个单词的命令。</p>
<h4 id="撤销类命令"><a href="#撤销类命令" class="headerlink" title="撤销类命令"></a>撤销类命令</h4><p>在 normal 模式下，输入 <code>u</code> 可以撤销上一条命令，输入 <code>U</code> 可以恢复一行的原始状态，输入 <code>Ctrl-r</code> 可以重做撤销的命令。</p>
<h4 id="定位文件状态"><a href="#定位文件状态" class="headerlink" title="定位文件状态"></a>定位文件状态</h4><p>在 normal 模式下，按下 <code>Ctrl-g</code> 会显示当前编辑文件中当前光标所在行位置以及文件的状态信息。</p>
<h4 id="搜索类命令"><a href="#搜索类命令" class="headerlink" title="搜索类命令"></a>搜索类命令</h4><p>在 normal 模式下，输入 <code>/</code> 加上搜索字符串可以在当前文件中查找该字符串，查找后，按下 <code>n</code> 键可以跳转到下一个搜索字符处，按下 <code>N</code> 可以跳转到上一个搜索字符处。如果想使用逆向查找命令，可以使用 <code>?</code> 和搜索字符串进行查找。</p>
<p>要回到之前的位置，可以按下 <code>Ctrl-o</code>，重复按可以回到更多步，而按下 <code>Ctrl-i</code> 可以跳到更新的位置。</p>
<p>当光标处于 <code>{[()]}</code> 任意一个括号字符上时，按下 <code>%</code> 可以快速查找并跳转到匹配的括号位置。</p>
<pre><code>            %
         &lt;-----&gt;
if (a == (b * c) / d)
   &lt;----------------&gt;
            %
</code></pre><p>当光标不在一个括号字符上，<code>%</code> 会先正向查找找到一个。比如当光标停留在上例中的行首时，<code>%</code> 会正向查找到第一个 <code>)</code>。再按一次会移动到它的匹配处。</p>
<pre><code>if (a == (b * c) / d)
--------------------&gt;
           %
</code></pre><h4 id="替换类命令"><a href="#替换类命令" class="headerlink" title="替换类命令"></a>替换类命令</h4><p>在 normal 模式下，输入命令 <code>:s/old/new/g</code>，可以将文件中所有的 <code>old</code> 字符串替换为 <code>new</code>。</p>
<p>只替换单行的字符串可以使用命令 <code>:s/old/new</code>。</p>
<p>要替换多行字符串可以使用命令 <code>:#,#s/old/new/g</code>，其中 <code>#</code> 表示行号，如 <code>:4,8s/old/new/g</code> 表示将 4 到 8 行的 <code>old</code> 替换为 <code>new</code>。</p>
<p>如果要进行有提示的替换，可以使用命令 <code>:s/old/new/gc</code>，每次替换都会进行是否替换的询问。</p>
<h4 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h4><p>在编辑过程中，同样可以执行 shell 命令，只需要输入 <code>:! command</code> 即可运行外部的 shell 命令，命令执行后会回到 vim 中。</p>
<p><strong> 上面的所有命令都是使用 vim 需要学习的基础命令，只有把基础命令都联系到滚瓜烂熟，肌肉记忆的程度，才能够真正的感受到使用 vim 的便捷之处，加油！</strong></p>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="选项配置"><a href="#选项配置" class="headerlink" title="选项配置"></a>选项配置</h4><p>Vim 可以进行预先配置启动项，从而增加插件以增强 Vim 的功能， 要配置 Vim，需要使用 <code>vimrc</code> 文件。</p>
<h5 id="vimrc-文件"><a href="#vimrc-文件" class="headerlink" title="vimrc 文件"></a>vimrc 文件</h5><p>如果已经有 <code>vimrc</code> 文件了，可以直接在 vim 中输入命令 <code>:edit $MYVIMRC</code> 来进行编辑。</p>
<p>如果还没有 <code>vimrc</code> 文件，可以在用户目录创建该文件，即 <code>~/.vimrc</code>，如果想 vim 启动时显示行号，可以在 <code>vimrc</code> 文件中加上：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure>
<p>重启 vim 后即可生效。</p>
<p>下面简单介绍一些常用设置：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>                       <span class="comment">" 设置语法高亮</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>         <span class="comment">" vim 写入文件时编码类型</span></span><br><span class="line"><span class="keyword">set</span> termencoding=utf-<span class="number">8</span>          <span class="comment">" 输出到终端时编码类型</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span>              <span class="comment">" 缓存文本，寄存器，脚本文件编码类型</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                      <span class="comment">" 显示行号，也可以使用 set nu</span></span><br><span class="line"><span class="keyword">set</span> cursorline                  <span class="comment">" 突出显示当前行</span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn                <span class="comment">" 突出显示当前列</span></span><br><span class="line"><span class="keyword">set</span> nocompatible                <span class="comment">" 以不兼容模式运行 vim</span></span><br><span class="line"><span class="keyword">set</span> showmatch                   <span class="comment">" 显示括号匹配</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                   <span class="comment">" 设置 Tab 键长度为 4 个空格</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span>                <span class="comment">" 设置自动缩进长度为 4 个空格</span></span><br><span class="line"><span class="keyword">set</span> softtabstop                 <span class="comment">" 设置编辑模式删除 Tab 时为 4 个空格</span></span><br><span class="line"><span class="keyword">set</span> expandtab                   <span class="comment">" 设置用空格来表示缩进</span></span><br><span class="line"><span class="keyword">set</span> smarttab                    <span class="comment">" 根据文件中其他地方的缩进空格个数来确定一个 Tab 是多少个空格</span></span><br><span class="line"><span class="keyword">set</span> autoindent                  <span class="comment">" 在插入一个新行时使用和前一行相同的缩进</span></span><br><span class="line"><span class="keyword">set</span> smartindent                 <span class="comment">" 打开智能缩进</span></span><br><span class="line"><span class="keyword">set</span> paste                       <span class="comment">" 设置为粘贴模式，使用鼠标右键粘贴时避免出现格式变形</span></span><br><span class="line"><span class="keyword">set</span> listchars=▸-,eo<span class="variable">l:</span>↩︎,trai<span class="variable">l:</span>-↩ <span class="comment">" 将 Tab 键显示为 &gt;-，行尾显示 ↩︎， 将行尾空格显示为 -↩︎</span></span><br><span class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start  <span class="comment">" 指明在插入模式下在哪里允许 &lt;BS&gt; 删除光标前面的字符。逗号分隔的三个值分别指: 行首的空白字符，换行符和插入模式开始处之前的字符。</span></span><br><span class="line"><span class="keyword">set</span> nowrap                      <span class="comment">" 禁止自动换行显示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">1000</span>                <span class="comment">" 保存 1000 条命令和 1000 个查找模式的历史，数值可按需修改</span></span><br><span class="line"><span class="keyword">set</span> ruler                       <span class="comment">" 在 vim 窗口右下角显示当前光标的位置</span></span><br><span class="line"><span class="keyword">set</span> showcmd                     <span class="comment">" 在 vim 窗口右下角 ruler 左侧显示未完成的命令</span></span><br><span class="line"><span class="keyword">set</span> incsearch                   <span class="comment">" 设置实时匹配</span></span><br><span class="line"><span class="keyword">set</span> hlsearch                    <span class="comment">" 设置搜索时高亮匹配词</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>       <span class="comment">" 开启文件类型探测，使用文件类型相关插件，使用缩进文件</span></span><br><span class="line"><span class="keyword">autocmd</span> FileType text <span class="keyword">setlocal</span> textwidth=<span class="number">78</span>  <span class="comment">" 一行超过 78 行时自动换行</span></span><br><span class="line"><span class="keyword">set</span> foldenable                  <span class="comment">" 允许折叠</span></span><br></pre></td></tr></table></figure>
<p>更多配置可以使用这个 <a href="http://vimconfig.com/" target="_blank" rel="noopener">Vim 配置工具</a> 来模拟。</p>
<p>也可以参考多人推荐的 <a href="https://github.com/spf13/spf13-vim" target="_blank" rel="noopener">spf13-vim</a> 来学习他人的配置。</p>
<h5 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h5><p>Vim 可以通过插件增强功能，把插件放入 Vim 的 <code>plugin</code> 目录中即可使插件生效。</p>
<p>如果没有 <code>plugin</code> 目录，可以使用命令 <code>mkdir -p ~/.vim/plugin</code> 创建。</p>
<p>Vim 中共有两种插件：</p>
<ul>
<li>全局插件： 用于所有类型的文件</li>
<li>文件类型插件：仅用于特定类型的文件</li>
</ul>
<p>当然，这种拷贝插件的方式比较麻烦，所以插件管理器也应运而生，最常用的是 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a> 管理器。</p>
<p>网上关于插件安装的文章数不胜数，就不在此赘述了。</p>
<p>在 <a href="https://vimawesome.com/" target="_blank" rel="noopener">VimAwesome</a> 可以找到大家常用的插件。</p>
<h4 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h4><h5 id="编辑另一个文件"><a href="#编辑另一个文件" class="headerlink" title="编辑另一个文件"></a>编辑另一个文件</h5><p>输入命令 <code>:edit foo.txt</code> 可以关闭当前文件并打开 <code>foo.txt</code>，如果当前文件未保存，则会提示错误信息。或者可以使用 <code>:edit! foo.txt</code> 命令放弃当前文件的修改并打开 <code>foo.txt</code> 文件。</p>
<h5 id="文件列表"><a href="#文件列表" class="headerlink" title="文件列表"></a>文件列表</h5><p>可以在启动 vim 时指定打开多个文件。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim <span class="built_in">test</span> test1 test2</span><br></pre></td></tr></table></figure>
<p>这样会打开三个文件，可以使用命令在这三个文件中进行跳转：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:next 或 :n</span>        # 跳转到下一个文件</span><br><span class="line"><span class="meta">:previous 或 :prev</span> # 跳转到上一个文件</span><br><span class="line">:first             # 跳转到第一个文件</span><br><span class="line">:last              # 跳转到最后一个文件</span><br><span class="line">:2next             # 向后跳转两个文件</span><br></pre></td></tr></table></figure>
<p>上面的两条命令默认也会保存当前文件，然后进行跳转。</p>
<p>但是这样的方式不利于我们对多个编辑的文件进行管理，所以使用标签的方法打开多个文件是一个更好的方式，将在后面进行相应的讲解。</p>
<h4 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h4><h5 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h5><p>分割新窗口最简单的命令如下：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:split 或 :sp</span>      # 水平分割窗口</span><br></pre></td></tr></table></figure>
<p>这个命令把屏幕分解成两个窗口并把光标置于上面的窗口中:</p>
<pre><code>+----------------------------------+
|/* file one */                    |
|~                                 |
|~                                 |
 one===============================
|/* file one */                    |
|~                                 |
 one===============================
|                                  |
+----------------------------------+
</code></pre><p>这两个窗口允许你同时显示一个文件的两个部分。例如，你可以让上面的窗口显示变量定义而下面的窗口显示使用这些变量的代码。</p>
<p><code>Ctrl-w w</code> 命令可以用于在窗口间跳转。如果你在上面的窗口，它会跳转到下面的窗口，如果你在下面的窗口，它会跳转到上面的窗口。(<code>Ctrl-w Ctrl-w</code> 可以完成相同的功能，是为了避免你有时按第二次的时候没有松开 <code>Ctrl</code> 按键。) 类似的，也可以使用 <code>Ctrl-w j</code> 跳转到下面窗口，使用 <code>Ctrl-k</code> 跳转到上面窗口。</p>
<p>使用 <code>:close</code> 或 <code>:clo</code> 命令可以关闭光标所在的窗口，并且只剩一个窗口的时候不会退出 vim。</p>
<p>当然，还可以利用分割窗口打开新的文件：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">split</span> <span class="literal">two</span></span><br></pre></td></tr></table></figure>
<p>如果你正在编辑文件 one，则命令执行的结果为：</p>
<pre><code>+----------------------------------+
|/* file two */                    |
|~                                 |
|~                                 |
 two===============================
|/* file one */                    |
|~                                 |
 one===============================
|                                  |
+----------------------------------+
</code></pre><p>如果想新建一个窗口用于编辑一个新文件，可以使用 <code>:new</code> 命令。</p>
<h5 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h5><p>在分割了窗口之后，可以发现默认是所有窗口平分屏幕，即分割三个窗口，则每个窗口是屏幕的三分之一大小。对于已经打开的窗口，我们可以使用命令来控制窗口的大小：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Ctrl-w +          <span class="meta"># 扩大窗口大小一行</span></span><br><span class="line">Ctrl-w -          <span class="meta"># 缩小窗口大小一行</span></span><br><span class="line">&#123;height&#125;Ctrl-w <span class="literal">_</span>  <span class="meta"># 把窗口设置为指定的高度</span></span><br></pre></td></tr></table></figure>
<p>不过这几种方法按键较多，可能并不能快速达到想要的窗口大小，在这种情况下，直接使用鼠标进行拖动可以更快的调整窗口大小。具体方法是使用鼠标点按住状态条进行拖动。</p>
<h5 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h5><p>类似水平分割，垂直分割的命令为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:vsplit</span> 或 <span class="selector-pseudo">:vsp</span></span><br></pre></td></tr></table></figure>
<p>这个命令可以做到垂直分割窗口，效果如下：</p>
<pre><code>+--------------------------------------+
|/* file two */     |/* file one */    |
|~                  |~                 |
|~                  |~                 |
|~                  |~                 |
 two  ===============one  =============
|                                      |
+--------------------------------------+
</code></pre><p>如果既水平分割了窗口，又垂直分割了窗口，我们便需要在各个窗口之间进行移动，之前提到过的 <code>Ctrl-w w</code> 命令只能够向下一个窗口进行移动，不够方便高效。 Vim 提供了一下几种命令在窗口之间进行跳转：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Ctrl-w h        <span class="comment"># 跳转到左边的窗口</span></span><br><span class="line">Ctrl-w <span class="keyword">j </span>       <span class="comment"># 跳转到下面的窗口</span></span><br><span class="line">Ctrl-w k        <span class="comment"># 跳转到上面的窗口</span></span><br><span class="line">Ctrl-w l        <span class="comment"># 跳转到右边的窗口</span></span><br><span class="line"></span><br><span class="line">Ctrl-w t        <span class="comment"># 跳转到最顶的窗口</span></span><br><span class="line">Ctrl-w <span class="keyword">b </span>       <span class="comment"># 跳转到最底的窗口</span></span><br></pre></td></tr></table></figure>
<h5 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h5><p>经过上面的联系，我们可以发现，无论分割窗口多少次，各个窗口之间都是相互独立的，不会发生重叠，这样会导致窗口过多时，屏幕空间不足以显示文件内容。为了解决这个问题，我们可以使用标签页。</p>
<p>假如正在编辑文件 <code>thisfile</code>，使用以下命令可以创建一个新的标签页：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:tabedit thatfile 或 :tabe</span> thatfile</span><br></pre></td></tr></table></figure>
<p>命令运行效果如下：</p>
<pre><code>+----------------------------------+
| thisfile | /thatfile/ __________X|   (thatfile 用加粗字体出现或高亮选中)
|/* thatfile */                    |
|that                              |
|that                              |
|~                                 |
|~                                 |
|~                                 |
|                                  |
+----------------------------------+
</code></pre><p>窗口顶端的横向文件名表示了已经打开的标签页和其中的文件名。</p>
<p>想要在标签之间进行切换，可以使用以下命令：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">gt</span>         <span class="comment"># 切换到下一个标签页</span></span><br><span class="line">:<span class="keyword">gT</span>         <span class="comment"># 切换到上一个标签页</span></span><br><span class="line">:<span class="number">3</span><span class="keyword">gt</span>        <span class="comment"># 切换到第三个标签页</span></span><br><span class="line">:<span class="number">4</span><span class="keyword">gT</span>        <span class="comment"># 向前切换4个标签页，如果超过标签页数量，将从最后一个标签页继续计算数量</span></span><br></pre></td></tr></table></figure>
<p>本文仅仅是对 Vim 这一款强大软件的基本介绍，想要真正的发挥 Vim 的强大之处，还需要不断地学习和不断地练习，希望大家都能够成为 Vim 大神。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、newjueqi，<a href="https://blog.csdn.net/newjueqi/article/details/7441930" target="_blank" rel="noopener">Vim 的几种模式介绍</a><br>2、vimtutor<br>3、yianwillis，<a href="https://github.com/yianwillis/vimcdoc" target="_blank" rel="noopener">Vim 中文文档计划</a></p>
]]></content>
      <categories>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 通配符简析</title>
    <url>/2019/03/02/2019-03-02-java-wildcards/</url>
    <content><![CDATA[<blockquote>
<p>“Java 通配符是一种表示未知类型的类型约束的方法。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>通配符</code> 并不包含在最初的泛型设计中（起源于 Generic Java（GJ）项目），从形成 JSR 14 到发布其最终版本之间的五年多时间内完成设计过程并被添加到了泛型中。<code>通配符</code> 在类型系统中具有重要的意义，它们为一个泛型类所指定的类型集合提供了一个有用的类型范围。Oracle 的官方解释是 Type of unknown。</p>
<a id="more"></a>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>通配符有以下三种类型：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">List</span><span class="meta">&lt;?</span>&gt;  <span class="comment">// 任意类型的 List</span></span><br><span class="line"><span class="keyword">List</span><span class="meta">&lt;?</span> extends T&gt;  <span class="comment">// 继承自 T 的任意类型的 List</span></span><br><span class="line"><span class="keyword">List</span><span class="meta">&lt;?</span> super T&gt;  <span class="comment">// 具有 T 的超类型的 List</span></span><br></pre></td></tr></table></figure>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>假设有以下几个类：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">"Food taste"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Meat</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">"Meat taste"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">"Fruit taste"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">"Apple taste"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们定义了一个无通配符的使用示例：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Eater</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>(<span class="params">List&lt;Food&gt; foodList</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(Food food: foodList) &#123;</span><br><span class="line">      food.taste();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EaterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Eater eater = <span class="keyword">new</span> Eater();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test1</span></span><br><span class="line">        List&lt;Food&gt; foodList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        foodList.<span class="keyword">add</span>(<span class="keyword">new</span> Apple());</span><br><span class="line">        foodList.<span class="keyword">add</span>(<span class="keyword">new</span> Fruit());</span><br><span class="line"></span><br><span class="line">        eater.eat(foodList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test2</span></span><br><span class="line">        List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fruitList.<span class="keyword">add</span>(<span class="keyword">new</span> Apple());</span><br><span class="line">        fruitList.<span class="keyword">add</span>(<span class="keyword">new</span> Fruit());</span><br><span class="line"></span><br><span class="line">        eater.eat(fruitList);  <span class="comment">// 无法通过编译</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照普遍的逻辑推断，Fruit 是 Food 的子类，所以能够装下 Food 的集合理论上应该也可以装下 Fruit。尽管 Fruit 是 Food 的子类， Fruit 对象可以直接添加到 <code>List&lt;Food&gt;</code> 对象中。但是 <code>List&lt;Fruit&gt;</code> 却不能直接认为是 <code>List&lt;Food&gt;</code> 的子类，因为集合的泛型并不是协变的。所以将不是 <code>List&lt;Food&gt;</code> 对象子类的 <code>List&lt;Fruit&gt;</code> 对象传递给 <code>eat(List&lt;Food&gt; foodList)</code> 函数是不能通过编译的。此时就需要通配符上场了。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>通配符被设计用来解决泛型继承规则所带来的问题。</p>
<h5 id="通配符上界"><a href="#通配符上界" class="headerlink" title="通配符上界"></a>通配符上界</h5><p>从上面我们知道 <code>List&lt;Fruit&gt;</code> 不是 <code>List&lt;Food&gt;</code> 的子类，那么我们要如何将 <code>List&lt;Fruit&gt;</code> 和 <code>List&lt;Food&gt;</code> 与 Fruit 和 Food 之间的关系关联起来呢？我们可以使用 <code>List&lt;? extends Food&gt;</code> 来表示 List 的上界是 Food，也就是说 <code>List&lt;Food&gt;</code> 或 <code>List&lt;Food Subclass&gt;</code> 都是 <code>List&lt;? extends Food&gt;</code> 的子类，这样就可以直接将 <code>List&lt;Fruit&gt;</code> 传递给 <code>List&lt;? extends Food&gt;</code> 进行操作了，因为 <code>List&lt;Fruit&gt;</code> 中的对象都将安全地向上转型为 Food 传递给 <code>List&lt;? extends Food&gt;</code>。</p>
<p>更改后的 eat() 函数如下：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eater</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> eat(List&lt;? <span class="keyword">extends</span> Food&gt; foodList) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Food food: foodList) &#123;</span><br><span class="line">            food.taste();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再试一次之前的测试函数可以通过编译了。</p>
<p>综上我们可以知道， <code>List&lt;Food&gt;</code>，<code>List&lt;Meat&gt;</code>，<code>List&lt;Fruit&gt;</code>，<code>List&lt;Apple&gt;</code> 都是 <code>List&lt;? extends Food&gt;</code> 的子类，通配符上界拥有以下规则：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">假设有泛型类型 G(如 <span class="built_in">List</span> 或 <span class="built_in">Map</span>)， 泛型参数 X 和 Y，其中 Y 是 X 的子类，则有</span><br><span class="line"></span><br><span class="line">G&lt;Y&gt; 是 G&lt;? <span class="keyword">extends</span> X&gt; 的子类型（如 <span class="built_in">List</span>&lt;Fruit&gt; 是 <span class="built_in">List</span>&lt;? <span class="keyword">extends</span> Food &gt; 的子类型）</span><br><span class="line">G&lt;? <span class="keyword">extends</span> Y&gt; 是 G&lt;? <span class="keyword">extends</span> X&gt; 的子类型（如 <span class="built_in">List</span>&lt;? <span class="keyword">extends</span> Fruit&gt; 是 <span class="built_in">List</span>&lt;? <span class="keyword">extends</span> Food&gt; 的子类型）。</span><br><span class="line">G&lt;X&gt; 是 G&lt;? <span class="keyword">extends</span> X&gt; 的子类型（如 <span class="built_in">List</span>&lt;Food&gt; 是 <span class="built_in">List</span>&lt;? <span class="keyword">extends</span> Food&gt; 的子类型）</span><br><span class="line">G&lt;?&gt; 等同于 G&lt;? <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;，如 <span class="built_in">List</span>&lt;?&gt; 等同于 <span class="built_in">List</span>&lt;? <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;。</span><br></pre></td></tr></table></figure>
<p>在上面我们测试了从 <code>List&lt;? extends Food&gt;</code> 中读取信息，那么我们能不能向其中添加信息呢？我们添加如下代码进行测试：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span>(<span class="params">List&lt;? extends Food&gt; foods</span>)</span> &#123;</span><br><span class="line">    foods.<span class="keyword">add</span>(<span class="keyword">new</span> Food());</span><br><span class="line">    foods.<span class="keyword">add</span>(<span class="keyword">new</span> Fruit());</span><br><span class="line">    foods.<span class="keyword">add</span>(<span class="keyword">new</span> Apple());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;? extends Food&gt; foods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">foods.<span class="keyword">add</span>(<span class="keyword">new</span> Food());</span><br><span class="line">foods.<span class="keyword">add</span>(<span class="keyword">new</span> Fruit());</span><br><span class="line">foods.<span class="keyword">add</span>(<span class="keyword">new</span> Apple());</span><br></pre></td></tr></table></figure>
<p>根据我们之前的分析，<code>? extends Food</code> 可以代表 Food 及其子类 (Meat 或 Fruit 或 Apple)，那上述代码理应是可以通过编译的。但是实际上结果却是 <code>无法通过编译</code>，原因如下：</p>
<p>已知 <code>List&lt;Food&gt;</code> 中只可以添加 Food 类对象及其子类对象 (如 Meat 和 Fruit)，<code>List&lt;Fruit&gt;</code> 中只可以添加 Fruit 类对象及其子类对象 (如 Apple)。在向 testAdd() 函数传递参数时，我们可以传入 <code>List&lt;? extends Food&gt;</code> 的所有子类型。在进行 add() 操作时，假设传入的参数为 <code>List&lt;Food&gt;</code>，则三个 add 操作都是可以执行的，假设传入的参数为 <code>List&lt;Fruit&gt;</code>，则第一个 add 操作不能执行，假设传入的参数为 <code>List&lt;Meat&gt;</code>，则所有 add 操作都不能执行。</p>
<p>所以给 testAdd() 函数传入参数时，由于传入的参数是未知的，所以 add() 操作可能会引发类型不兼容的问题，所以 java 为了保护类型一致性，禁止向 <code>List&lt;? extends T&gt;</code> 中除了 null 之外的任意对象，即 foods.add(null) 是可行的。同样的第二段代码不能通过编译。</p>
<h5 id="通配符下界"><a href="#通配符下界" class="headerlink" title="通配符下界"></a>通配符下界</h5><p>类似的，通配符也拥有下界。可以如此定义通配符的下界 <code>List&lt;? super Fruit&gt;</code>，其中 Fruit 就是通配符的下界。<code>注意：不能同时声明泛型通配符申明上界和下界。</code> 通配符的下界拥有以下规则：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">假设有泛型类型 G(如 <span class="built_in">List</span> 或 <span class="built_in">Map</span>)， 泛型参数 X 和 Y，其中 Y 是 X 的子类，则有</span><br><span class="line"></span><br><span class="line">G&lt;? <span class="keyword">super</span> X&gt; 是 G&lt;? <span class="keyword">super</span> Y &gt; 的子类型（如 <span class="built_in">List</span>&lt;? <span class="keyword">super</span> Food&gt; 是 <span class="built_in">List</span>&lt;? <span class="keyword">super</span> Fruit &gt; 的子类型）。</span><br><span class="line">G&lt;X&gt; 是 G&lt;? <span class="keyword">super</span> X &gt; 的子类型（如 <span class="built_in">List</span>&lt;Fruit&gt; 是 <span class="built_in">List</span>&lt;? <span class="keyword">super</span> Fruit &gt; 的子类型）</span><br></pre></td></tr></table></figure>
<p>我们再次写两段测试代码：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void testAdd(List&lt;? <span class="keyword">super</span> Fruit&gt; fruits) &#123;</span><br><span class="line">    fruits.add(<span class="keyword">new</span> <span class="type">Apple</span>());</span><br><span class="line">    fruits.add(<span class="keyword">new</span> <span class="type">Fruit</span>());</span><br><span class="line">    fruits.add(<span class="keyword">new</span> <span class="type">Food</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">super</span> Fruit&gt; fruits = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">fruits.add(<span class="keyword">new</span> <span class="type">Apple</span>());</span><br><span class="line">fruits.add(<span class="keyword">new</span> <span class="type">Fruit</span>());</span><br><span class="line">fruits.add(<span class="keyword">new</span> <span class="type">Food</span>());</span><br></pre></td></tr></table></figure>
<p>根据分析，<code>? super Fruit</code> 可以代表 Fruit 及其父类，而 Apple 是 Fruit 的子类，那上述代码理应是可以无法通过编译的。但是实际上结果却是 <code>可以通过编译</code>，原因如下：</p>
<p>在向 testAdd() 函数传递参数时，我们可以传入 <code>List&lt;? super Fruit&gt;</code> 的所有子类型，则传入的参数可以为 <code>List&lt;Fruit&gt;</code>，<code>List&lt;Food&gt;</code> 以及 <code>List&lt;Object&gt;</code>。<code>List&lt;? super Fruit&gt;</code> 表示具有任何 Fruit 超类型的列表，亦即该列表至少是一个 <code>List&lt;Fruit&gt;</code> 类型的列表，故所有 Fruit 的子类都可以添加至该列表中，所以 testAdd() 函数中前两行代码是可以成功执行的。但是往列表中添加 Fruit 的父类型的时候，假设添加的是 Food 类对象，是无法添加到 <code>List&lt;Fruit&gt;</code> 中的，假设添加的是 Object 类对象，也是无法添加到 <code>List&lt;Fruit&gt;</code> 中的。为了保证数据类型的统一性，java 禁止向 <code>List&lt;? super T&gt;</code> 中添加任意 T 的父类对象。同样的第二段代码的最后一行无法通过编译。</p>
<p>而在读取 <code>List&lt;? super Fruit&gt;</code> 时，无法保证读取到的元素是 Fruit，因为它还有可能是 Food 或者 Object，也无法保证读取到的元素是 Food，因为它还有可能是 Object，只能保证能够读取到的对象一定是 Object。所以在调用 <code>List&lt;? supper Fruit&gt;</code> 的 get() 方法时，返回的数据是 Object 类型的数据。</p>
<p>这样看起来通配符下界貌似没有起到什么作用。那么什么地方能够利用上通配符下界的特性呢？请看以下代码：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Fruit</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Fruit o)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> Integer.<span class="title">compare</span><span class="params">(price, o.price)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    apples.add(<span class="keyword">new</span> Apple(<span class="number">1</span>));</span><br><span class="line">    apples.add(<span class="keyword">new</span> Apple(<span class="number">4</span>));</span><br><span class="line">    apples.add(<span class="keyword">new</span> Apple(<span class="number">2</span>));</span><br><span class="line">    apples.add(<span class="keyword">new</span> Apple(<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">for</span> (Apple collegeStudent: apples) &#123;</span><br><span class="line">        System.out.println(collegeStudent.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">    sort(apples);</span><br><span class="line">    <span class="keyword">for</span> (Apple collegeStudent: apples) &#123;</span><br><span class="line">        System.out.println(collegeStudent.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码可以正常运行，下面我们来分析这段代码：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="keyword">void</span> <span class="keyword">sort</span>(List&lt;T&gt; list) &#123;</span><br><span class="line">    Collections.<span class="keyword">sort</span>(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先 <code>&lt;T extends Comparable&lt;T&gt;&gt;</code> 规定了数组中对象必须实现 Comparable 接口，而 <code>Comparable&lt;? super T&gt;</code> 表示如果数组中对象的父类实现了 Comparable 接口，则其自身可不实现，如 Apple。</p>
<p>如果将代码改为如下内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;<span class="function">T extends Comparable&lt;T&gt;&gt; <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">    Collections.sort(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则 sort() 方法无法执行, 因为 Apple 没有实现 <code>Comparable&lt;Apple&gt;</code> 接口。换句话来说就是 <code>? super T</code> 使 sort() 方法变得更为通用了。</p>
<h5 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h5><p>当通配符只有一个 <code>?</code> 时，即为无界通配符。如 List&lt;?&gt;，<code>?</code> 可以代表任意类型，<code>任意</code> 也就是未知类型。无界通配符一般应用于以下两种场景中：</p>
<ol>
<li>当方法是使用原始的 Object 类型作为参数时</li>
<li>在定义的方法体的业务逻辑与泛型类型无关时</li>
</ol>
<p>第一种场景，例如：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">public static void printList(<span class="keyword">List</span>&lt;Object&gt; list) &#123;</span><br><span class="line">  for (Object item : list) &#123;</span><br><span class="line">    System.out.println(item + <span class="string">" "</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">Integer</span>&gt; li = <span class="keyword">Arrays</span>.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt; ls = <span class="keyword">Arrays</span>.asList(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</span><br><span class="line">printList(li);  // 编译不通过，因为需要传入 <span class="keyword">List</span>&lt;Object&gt; 但是传入的参数为 <span class="keyword">List</span>&lt;<span class="keyword">Integer</span>&gt;</span><br><span class="line">printList(ls);  // 编译不通过，因为需要传入 <span class="keyword">List</span>&lt;Object&gt; 但是传入的参数为 <span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt;</span><br></pre></td></tr></table></figure>
<p>此时，如果将 printList 参数进行修改：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(List&lt;?&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Object item : <span class="built_in">list</span>) &#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(item + <span class="string">" "</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们提到过 <code>List&lt;?&gt;</code> 相当于 <code>List&lt;? extends Object&gt;</code>，则所有 <code>List&lt;? extends Object&gt;</code> 的子类型都可以传递给 printList() 函数，并且所有传入的元素都将安全地向上转型为 Object 存入 <code>List&lt;?&gt;</code> 中。这样可以更好地兼容函数的参数传递和调用。</p>
<p>第二种场景，例如：</p>
<p>List.size(), List.clear() 方法等，使用最多的是 <code>Class&lt;?&gt;</code> ，这样就避免了 <code>Class&lt;T&gt;</code> 对于 T 类型的依赖。</p>
<p>最后需要注意的是，<code>List&lt;?&gt;</code> 不同于 <code>List&lt;Object&gt;</code>，因为 <code>List&lt;Object&gt;</code> 是 <code>List&lt;?&gt;</code> 的子类，而且不能往 <code>List&lt;?&gt;</code> 列表中添加除了 null 之外的任何元素。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、peiquan，<a href="https://blog.51cto.com/peiquan/1303768" target="_blank" rel="noopener">java 通配符解惑</a></p>
<p>2、Brian Goetz，<a href="https://www.ibm.com/developerworks/cn/java/j-jtp04298.html" target="_blank" rel="noopener">使用通配符简化泛型使用</a></p>
<p>3、BarbaraBear，<a href="https://www.jianshu.com/p/cb543969a15b" target="_blank" rel="noopener">Java 泛型中的通配符</a></p>
<p>4、Stack Overflow，<a href="https://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java" target="_blank" rel="noopener">Difference between &lt;? super T&gt; and &lt;? extends T&gt; in Java</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>通配符</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Annotation 简析</title>
    <url>/2018/07/13/2018-07-13-java-annotation/</url>
    <content><![CDATA[<blockquote>
<p>“Java Annotation 是 JDK5.0 引入的一种注释机制, 用于为 Java 代码提供元数据。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>Annotation</code>，中文译名为注解，那么注解又是什么呢？简单来说，注解就是对某件事物的标记和解释，用来描述这件事物的特点和属性。举个例子，前一阵看《创造 101》，看到了一名熟悉的 <code>Rapper</code> – Yamy，参加这个节目之后，她又被打上了 <code>Dancer</code> 的标签。对于 Yamy 来说，<code>Rapper</code> 和 <code>Dancer</code> 就是对她的注解。我们通过注解，可以在一定程度上了解到被标记事物的一些属性，我们就可以用这些属性来做一些事情。比如在《中国有嘻哈》利用 <code>Rapper</code> 标签宣传 Yamy 的说唱能力，而在《创造 101》利用 <code>Dancer</code> 标签宣传 Yamy 的跳舞能力等。</p>
<p>从上面的例子我们可以看出来，通过获取事物的注解，可以得到事物的属性，利用这些属性可以进行一些操作。代码也是这样，通过获取代码的注解，我们可以获得注解赋予代码的属性，利用这些属性，我们就可以在程序的生命周期中，对具有这些属性的代码进行额外的操作。</p>
<a id="more"></a>
<h3 id="Annotation-组成部分"><a href="#Annotation-组成部分" class="headerlink" title="Annotation 组成部分"></a>Annotation 组成部分</h3><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>java annotation 的组成中，有 3 个非常重要的 java 文件。它们分别是：</p>
<h5 id="Annotation-java"><a href="#Annotation-java" class="headerlink" title="Annotation.java"></a>Annotation.java</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package java.lang.<span class="keyword">annotation</span>;</span><br><span class="line">public interface Annotation &#123;</span><br><span class="line"></span><br><span class="line">    boolean equals(Object obj);</span><br><span class="line"></span><br><span class="line">    int hashCode();</span><br><span class="line"></span><br><span class="line">    String toString();</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="ElementType-java"><a href="#ElementType-java" class="headerlink" title="ElementType.java"></a>ElementType.java</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package java.lang.<span class="keyword">annotation</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> &#123;</span></span><br><span class="line">    TYPE,               <span class="regexp">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line"></span><br><span class="line">    FIELD,              <span class="regexp">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line"></span><br><span class="line">    METHOD,             <span class="regexp">/* 方法声明  */</span></span><br><span class="line"></span><br><span class="line">    PARAMETER,          <span class="regexp">/* 参数声明  */</span></span><br><span class="line"></span><br><span class="line">    CONSTRUCTOR,        <span class="regexp">/* 构造方法声明  */</span></span><br><span class="line"></span><br><span class="line">    LOCAL_VARIABLE,     <span class="regexp">/* 局部变量声明  */</span></span><br><span class="line"></span><br><span class="line">    ANNOTATION_TYPE,    <span class="regexp">/* 注释类型声明  */</span></span><br><span class="line"></span><br><span class="line">    PACKAGE             /* 包声明  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="RetentionPolicy-java"><a href="#RetentionPolicy-java" class="headerlink" title="RetentionPolicy.java"></a>RetentionPolicy.java</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package java.lang.<span class="keyword">annotation</span>;</span><br><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">RetentionPolicy</span> &#123;</span></span><br><span class="line">    SOURCE,            <span class="regexp">/* Annotation 信息仅存在于编译器处理期间，该 Annotation 信息不会进行存储到. class 文件中  */</span></span><br><span class="line"></span><br><span class="line">    CLASS,             <span class="regexp">/* 编译器将 Annotation 存储于类对应的. class 文件中。默认行为  */</span></span><br><span class="line"></span><br><span class="line">    RUNTIME            /* 编译器将 Annotation 存储于 <span class="class"><span class="keyword">class</span> 文件中，并且可由 <span class="title">JVM</span> 读入 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码简析"><a href="#代码简析" class="headerlink" title="代码简析"></a>代码简析</h4><p>上面三个类的关系如下图：</p>
<p><img src="/uploads/in-post/java/java_annotation.jpg" alt></p>
<p>从中我们可以看出：</p>
<ul>
<li>一个 Annotation 和一个 RetentionPolicy 唯一关联，即每个 Annotation 对象，都会有一个唯一的 RetentionPolicy 属性</li>
<li>一个 Annotation 和多个 ElementType 相关联，即每个 Annotation 对象，可以有一个或多个 Elementtype 属性</li>
</ul>
<p>从代码中我们可以看出：</p>
<ul>
<li>Annotation 是一个接口。当我们自定义注解时，需要添加 @interface 字段，相当于注解实现了 Annotation 接口，之后会有讲解</li>
<li>ElementType 是枚举类型，记录了注解可以标记的类型。例如一个 Annotation 标记了 METHOD 类型，则该 Annotation 只可以用来注解方法</li>
<li>RetentionPolicy 是枚举类型，记录了注解的保留策略。<ul>
<li>若为 SOURCE 类型，表示该 Annotation 只存在于编译器处理期间，编译结束后，该 Annotation 的信息则失去作用</li>
<li>若为 CLASS 类型，表示该 Annotation 编译后会被存储于类对应的. class 文件中，但是 JVM 在加载类的时候不需要将其加载为运行时可见的（反射可见）的注解。这里很重要的一点是编译多个 Java 文件时的情况：假如要编译 A.java 源码文件和 B.class 文件，其中 A 类依赖 B 类，并且 B 类上有些注解希望让 A.java 编译时能看到，那么 B.class 里就必须要持有这些注解信息才行。</li>
<li>若为 RUNTIME 注解，表示该 Annotation 编译后会被存储于类对应的. class 文件中，并且 JVM 加载类的时候也会将其加载为反射可见的注解。</li>
</ul>
</li>
</ul>
<h3 id="Annotation-语法"><a href="#Annotation-语法" class="headerlink" title="Annotation 语法"></a>Annotation 语法</h3><h4 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h4><p>注解通过 <code>@interface</code> 关键字进行定义</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们创建了一个 <code>TestAnnotation</code> 的注解，可以使用它对代码进行注解。</p>
<h4 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h4><p>将创建的注解使用 java annotation 的方式添加到代码顶部，即为代码增加了注解：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，我们对 Test 类添加了 TestAnnotation 的注解，这样 Test 类就具有了 TestAnnotation 注解的所有属性，当然，目前 TestAnnotation 注解中还没有加入属性，之后会有相关讲解。</p>
<h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>到这里，我们已经简单的创建并使用了注解，但是仅仅使用这种默认的注解并不能达到理想的效果，所以 java 提供了 <code>元注解</code> 来帮助我们丰富注解的功能。</p>
<p>那么什么是元注解呢？简单来说，元注解就是注解的注解。我们自定义的注解可以为代码增加属性，而元注解可以为我们的注解增加属性。</p>
<p>元注解一共有五种：</p>
<ul>
<li>@Documented</li>
<li>@Target</li>
<li>@Retention</li>
<li>@Inherited</li>
<li>@Repeatable</li>
</ul>
<h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><p>使用此元注解会将注解中的元素包含到 Javadoc 中</p>
<h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>此元注解对应了 ElementType 的类型，用于限制注解可以注解到哪些场景下，有以下取值：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</span><br><span class="line">ElementType<span class="function">.<span class="keyword">CONSTRUCTOR</span> 可以给构造方法进行注解</span></span><br><span class="line"><span class="function"><span class="title">ElementType</span>.<span class="title">FIELD</span> 可以给属性进行注解</span></span><br><span class="line"><span class="function"><span class="title">ElementType</span>.<span class="title">LOCAL_VARIABLE</span> 可以给局部变量进行注解</span></span><br><span class="line"><span class="function"><span class="title">ElementType</span>.<span class="title">METHOD</span> 可以给方法进行注解</span></span><br><span class="line"><span class="function"><span class="title">ElementType</span>.<span class="title">PACKAGE</span> 可以给一个包进行注解</span></span><br><span class="line"><span class="function"><span class="title">ElementType</span>.<span class="title">PARAMETER</span> 可以给一个方法内的参数进行注解</span></span><br><span class="line"><span class="function"><span class="title">ElementType</span>.<span class="title">TYPE</span> 可以给一个类型进行注解，比如类、接口、枚举</span></span><br></pre></td></tr></table></figure>
<p>使用了 <code>@Target</code> 元注解之后，注解就被限制在定义的场景下使用了，例如 <code>@Target(ElementType.METHOD)</code> 表示注解只能用于标记方法。</p>
<h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>此注解对应了 RetentionPolicy 的类型，用于限制注解的存活时间，有以下取值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">RetentionPolicy</span><span class="selector-class">.SOURCE</span> 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。</span><br><span class="line"><span class="selector-tag">RetentionPolicy</span><span class="selector-class">.CLASS</span> 注解只被保留到编译进行的时候，它并不会被加载到 <span class="selector-tag">JVM</span> 中。</span><br><span class="line"><span class="selector-tag">RetentionPolicy</span><span class="selector-class">.RUNTIME</span> 注解可以保留到程序运行的时候，它会被加载进入到 <span class="selector-tag">JVM</span> 中，所以在程序运行时可以获取到它们。</span><br></pre></td></tr></table></figure>
<p>使用了 <code>@Retention</code> 元注解之后，注解的生命周期就被决定了，例如 <code>@Retention(RetentionPolicy.RUNTIME)</code> 表示注解可以在程序运行期间被获取到。</p>
<h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>使用此元注解表示子类如果没有自己的注解，会继承父类的注解，例如：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@interface</span> TestAnnotation &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@TestAnnotation</span></span><br><span class="line">public class A &#123;&#125;</span><br><span class="line"></span><br><span class="line">public class B extends A &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>注解 <code>@TestAnnotation</code> 被 <code>@Inherited</code> 修饰，之后类 A 被 TestAnnotation 注解，类 B 继承 A，则类 B 也拥有 TestAnnotation 这个注解。</p>
<h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h5><p><code>@Repeatable</code> 是 Java 1.8 加进来的特性，表示注解可以多次使用。</p>
<p>举个例子，一个人他既是程序员又是产品经理, 同时他还是个艺术家：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> Persons &#123;</span><br><span class="line">    Person[]  value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Persons.class)</span></span><br><span class="line"><span class="meta">@interface</span> Person&#123;</span><br><span class="line">    String role <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Person(role=<span class="meta-string">"artist"</span>)</span></span><br><span class="line"><span class="meta">@Person(role=<span class="meta-string">"coder"</span>)</span></span><br><span class="line"><span class="meta">@Person(role=<span class="meta-string">"PM"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的代码我们可以看到，<code>@Repeatable</code> 元注解注解了 <code>@Person</code> 注解，其中的参数是一个用于存放其他注解的 <code>容器注解</code>。</p>
<p>按照规定，它里面必须要有一个 <code>value</code> 的属性，属性类型是一个被 <code>@Repeatable</code> 注解过的注解数组，注意它是数组。</p>
<p>Persons 是标签盒子，里面放满了 Person 这种同类型但内容不一样的标签。把 Persons 送给一个 SuperMan ，相当于同时把盒子里面的所有标签贴在了 SuperMan 身上。</p>
<h4 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h4><p>注解的属性类似于类的成员变量。但是注解只有属性，而没有方法。注解的属性以 <code>无形参方法</code> 的方式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">id</span>();</span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">msg</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码定义了 <code>@TestAnnotation</code> 这个注解中拥有 id 和 msg 两个属性。在使用的时候，我们应该给它们进行赋值。</p>
<p><strong> 注意：在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、注解及它们的数组 </strong></p>
<p>赋值方式是在注解的括号内以 value=”” 形式，多个属性之前用 <code>,</code> 隔开, 如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation(id=3, msg=<span class="meta-string">"hello annotation"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，注解中属性也可以有默认值，默认值需要用 default 关键值指定。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> <span class="keyword">default</span> "Hi"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@TestAnnotation</code> 注解中 id 属性默认值为 -1，msg 属性默认值为 Hi。这样即使不对注解进行 id 和 msg 的赋值，也会拥有默认值。</p>
<p>此外，如果一个注解内仅仅只有一个名字为 value 的属性时，应用这个注解时可以直接接属性值填写到括号内。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Check</span>(<span class="string">"hi"</span>)</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Check</span>(value=<span class="string">"hi"</span>)</span><br><span class="line"><span class="keyword">int</span> a;</span><br></pre></td></tr></table></figure>
<p>上面两种注解变量 a 的方式是相同的。</p>
<h3 id="Java-预置注解"><a href="#Java-预置注解" class="headerlink" title="Java 预置注解"></a>Java 预置注解</h3><p>除了我们自定义注解之外，Java 已经内置了一些常用的注解：</p>
<ul>
<li>@Deprecated</li>
<li>@Override</li>
<li>@SuppressWarnings</li>
<li>@SafeVarargs</li>
<li>@FunctionalInterface</li>
</ul>
<h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h4><p>此注解用于标注过时的，不被推荐使用的方法，属于编译期注解（ElementType.SOURCE），编译器在编译阶段遇到这个注解时会发出提醒警告，告诉开发者正在调用一个过时的元素比如过时的方法、过时的类、过时的成员变量。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> &#123;</span></span><br><span class="line">    @Deprecated</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deprecatedMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Noting has to say!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"I have a dream!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        TestAnnotation testAnnotation = <span class="keyword">new</span> TestAnnotation();</span><br><span class="line">        testAnnotation.deprecatedMethod();</span><br><span class="line">        testAnnotation.newMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 IDE 中可以看到，deprecatedMethod() 方法将会被划掉，以提示用户该方法已过时：</p>
<p><img src="/uploads/in-post/java/deprecated_annotation.png" alt></p>
<h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h4><p>这个注解应该是使用最多的注解之一了，主要用于提示子类复写父类中被 <code>@Override</code> 修饰的方法，同样属于编译期注解。</p>
<h4 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h4><p>这个注解同样是编译期注解，主要用于阻止编译期的警告，之前调用被 <code>@Deprecated</code> 注解的方法后，编译器会警告提醒，而有时候开发者会忽略这种警告，他们可以在调用的地方通过 <code>@SuppressWarnings</code> 达到目的。</p>
<p><img src="/uploads/in-post/java/suppress_warnings_annotation.png" alt></p>
<h4 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h4><p>参数安全类型注解。它的目的是提醒开发者不要用参数做一些不安全的操作，它会阻止编译器产生 unchecked 这样的警告。</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">@SafeVarargs</span><br><span class="line">static void m(List&lt;String&gt;... stringLists) &#123;</span><br><span class="line">    Object[]<span class="built_in"> array </span>= string<span class="class">Lists;</span></span><br><span class="line">    List&lt;Integer&gt; tmpList = Arrays.asList(42);</span><br><span class="line">    array[0] = tmp<span class="class">List;</span></span><br><span class="line">    String s = stringLists[0].get(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，编译阶段不会报错，但是运行时会抛出 ClassCastException 这个异常，所以尽量还是不要使用这个注解。</p>
<h4 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h4><p>函数式接口注解，这个是 Java 1.8 版本引入的新特性。</p>
<p>函数式接口 (Functional Interface) 就是一个具有一个方法的普通接口。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">public <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>When </span>an<span class="markdown"> object implementing interface <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>Runnable<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> is used</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>to create </span>a<span class="markdown"> thread, starting </span>the<span class="markdown"> thread causes </span>the<span class="markdown"> object's</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span><span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>run<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> method to be called in that separately executing</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>thread.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>The general contract of </span>the<span class="markdown"> method <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>run<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> is that it may</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>take any action whatsoever.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@see     java.lang.Thread#run()</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="keyword">void</span> run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> Runnable 接口就是一个典型的函数式接口，通过源码我们可以看到它就被 <code>@FunctionalInterface</code> 注解。而函数式接口一般被用于 Java 的 Lambda 表达式，感兴趣的话可以搜索学习相关内容。</p>
<h3 id="注解的提取和使用"><a href="#注解的提取和使用" class="headerlink" title="注解的提取和使用"></a>注解的提取和使用</h3><p>之前我们提到过，通过注解，可以在一定程度上了解到被标记事物的一些属性，我们就可以用这些属性来做一些事情。所以如果去获取这些属性并做一些事就是我们接下来要讨论的内容。</p>
<p>想要提取和使用注解，需要利用 Java 的一个特点，那就是反射。</p>
<p>通过反射，我们可以在程序运行阶段获取到注解中的属性，并根据这些属性进行额外的操作。</p>
<h4 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h4><p>注解通过反射获取。首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否被某个注解标记。</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isAnnotationPresent(<span class="class"><span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">Annotation</span>&gt; <span class="title">annotationClass</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>如果拥有注解，则可以使用 getAnnotation() 方法来获取 Annotation 对象，或使用 getAnnotations() 方法来获取多个 Annotation 对象。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A <span class="keyword">extends</span> Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations() &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>前一种方法返回指定类型的注解，后一种方法返回注解到这个元素上的所有注解。</p>
<p>如果能够获取到注解，我们就可以使用注解中的属性了：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    int id() <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    String msg() <span class="keyword">default</span> <span class="string">"Hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestAnnotation()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        boolean hasAnnotation = Test<span class="class">.<span class="keyword">class</span>.<span class="title">isAnnotationPresent</span></span>(TestAnnotation<span class="class">.<span class="keyword">class</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">            TestAnnotation testAnnotation = Test<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span></span>(TestAnnotation<span class="class">.<span class="keyword">class</span>);</span></span><br><span class="line"></span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"id:"</span>+testAnnotation.id());</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"msg:"</span>+testAnnotation.msg());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的运行结果是：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">id:</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">msg:</span>Hi</span><br></pre></td></tr></table></figure>
<p><strong>注意：如果一个注解要在运行时被成功提取，那么 @Retention(RetentionPolicy.RUNTIME) 是必须的。</strong></p>
<h4 id="注解的使用场景"><a href="#注解的使用场景" class="headerlink" title="注解的使用场景"></a>注解的使用场景</h4><p>官方文档对于 Java 注解的文档是这样说明的：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">注解是一系列元数据，它提供数据用来解释程序代码，但是注解并非是所解释的代码本身的一部分。注解对于代码的运行效果没有直接影响。</span><br><span class="line"></span><br><span class="line">注解有许多用处，主要如下：</span><br><span class="line"><span class="bullet">- </span>提供信息给编译器： 编译器可以利用注解来探测错误和警告信息</span><br><span class="line"><span class="bullet">- </span>编译阶段时的处理： 软件工具可以用来利用注解信息来生成代码、Html文档或者做其它相应处理。</span><br><span class="line"><span class="bullet">- </span>运行时的处理： 某些注解可以在程序运行的时候接受代码的提取</span><br></pre></td></tr></table></figure>
<p>从上面的描述中我们可以看出来，注解仅仅是对代码的一个标记，不会对代码的运行自动产生任何影响。 所以如果我们想要对拥有某些注解的代码进行操作的话，需要<code>自己编写代码</code>来提取注解信息，并处理这些信息，执行一些代码之外的操作。</p>
<p>说了这么多，我们用实际的代码来感受一下如何使用注解吧！</p>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>注解的使用可以贯穿程序的整个生命周期，何时何地使用注解完全由程序员自己决定，举一个简单的例子：</p>
<p>首先创建一个 <code>@CheckLogin</code> 注解：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">ElementType</span>;</span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">Retention</span>;</span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">RetentionPolicy</span>;</span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">Target</span>;</span><br><span class="line"></span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface CheckLogin &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我想在调用 <code>getName()</code> 方法之前检查是否有这个注解，如果有，则检查登录状态，如果没有则通知用户先登录：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    @CheckLogin</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"获取姓名"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> loggedIn = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method getNameMethod = TestAnnotation.class.getDeclaredMethod(<span class="string">"getName"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (getNameMethod != null) &#123;</span><br><span class="line">                CheckLogin checkLogin = getNameMethod.getAnnotation(CheckLogin.class);</span><br><span class="line">                <span class="keyword">if</span> (checkLogin != null) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"需要检查登录"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!loggedIn) &#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"请先登录"</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        TestAnnotation testAnnotation = <span class="keyword">new</span> TestAnnotation();</span><br><span class="line">        testAnnotation.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> loggedIn = <span class="literal">true</span></span><br><span class="line">需要检查登录</span><br><span class="line">获取姓名</span><br><span class="line"><span class="string">//</span> loggedIn = <span class="literal">false</span></span><br><span class="line">需要检查登录</span><br><span class="line">请先登录</span><br></pre></td></tr></table></figure>
<p>这只是一个最简单的注解使用的例子，如何更好地使用注解，就需要各位自己去发掘啦~~</p>
<p><strong>最后再提一句，由于注解的提取需要借助于 Java 的反射技术，反射会降低程序运行效率，所以使用注解时也需要谨慎考虑时间成本。</strong></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、frank909，<a href="https://blog.csdn.net/briblue/article/details/73824058" target="_blank" rel="noopener">秒懂，Java 注解 （Annotation）你可以这样学</a></p>
<p>2、skywang12345，<a href="https://www.cnblogs.com/skywang12345/p/3344137.html" target="_blank" rel="noopener">Java Annotation认知</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>BBS 法则</title>
    <url>/2020/03/06/2020-03-06-bbs-principle/</url>
    <content><![CDATA[<p>这周学习到了一个很好的方法论【BBS】，分别是 learn from the Best，Basic way 和 Stop doing list，首先我们需要制定自己的 Stop doing list，这样才能够让自己不偏离正确的方向，Basic way 需要我们学习几种最基本的做事方法，然后应用在日常工作中，可以提升我们的工作效率，最后我们还要 learn from the Best，向身边或者业界的优秀者学习，学习他们的工作和思考方法，让自己不断进步。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>双向反馈法</title>
    <url>/2020/03/15/2020-03-15-double-side-feedback/</url>
    <content><![CDATA[<p>当我们需要对他人的工作做出评价的时候，最好使用双向反馈法——既要给出激励性反馈，又要给出建设性反馈，每种反馈至少三条。激励性反馈是指找出其做得好的点，给出反馈，建设性反馈即找出可以改进的点，进行反馈。双向反馈法的好处是可以帮助我们更全面的考虑，避免出现片面的评价，同时又能为对方提出中肯的建议。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning By Doing</title>
    <url>/2020/03/29/2020-03-29-learning-by-doing/</url>
    <content><![CDATA[<p>之前听一鸣同学说我们要 Learning By Doing，其义即是在实践中学习、在工作中学习。我们大部分的学习是在工作中实现的，因为工作中遇到的问题众多，每天都会给我们新的课题，很多问题可能从前根本没有遇到过、考虑过，并且是必须解决的，为我们提供了持续学习的丰富素材，通过遇到并解决问题，我们可以在工作中不断地学习和提升自己。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>关于任务优先级</title>
    <url>/2020/04/03/2020-04-03-mission-priority/</url>
    <content><![CDATA[<p>我们都知道事情是需要分紧急程度和重要程度的，那我们应该如何对这些事情排出优先级呢？首先对于不紧急不重要的事情我们不要耗费时间去做，对于紧急不重要的事情一般我们称为琐事，要无负担的做，最好就是记录到 todo-list 中，这样就可以放空大脑关于这部分的负担，抽空的时候做就好，对于紧急且重要的事情毫无疑问应该尽最大努力去完成尽量做到 100%，对于重要不紧急的事情，需要我们每天持续的去完成和优化，争取当他成为紧急重要的事情的时候能做到完成 120%</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>MECE 法则</title>
    <url>/2020/02/11/2020-02-21-mece-principle/</url>
    <content><![CDATA[<p>本周学习到了一个很有意思的原则，【MECE法则】，全称是 Mutually Exclusive Collectively Exhausted，互斥且穷尽，意思是在我们分析解决一个问题时，需要将可能的方案穷尽的列举出来，然后再对其归类，达到每个类别互斥，然后就可以得出几类解决问题的方法。这样的方式会更加有效地帮助我们分析和解决问题，值得一试。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>「2+2」 原则</title>
    <url>/2020/04/12/2020-04-12-2-plus-2/</url>
    <content><![CDATA[<p>当我们遇到困难需要向上寻求帮助时，可以使用【2+2】原则，一共提出四个问题：1. 期望的结果是什么；2. 当前的进展是什么；3. 遇到了什么困难；4. 需要哪些资源帮助，这四个问题，前两个可以快速阐明问题的背景和进展，后两个可以明确阐明难点和需求，使用这种方式寻求帮助可以更高效的完成沟通，节约双方的时</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我们的上下文切换</title>
    <url>/2020/05/09/2020-05-09-context-switch/</url>
    <content><![CDATA[<p>就像电脑的CPU一样，我们做事时，其实也是有上下文的，如果不断被其他事情打断，那我们切换回原来上下文的成本就会非常高，会极大的降低我们的工作效率，所以集中精力免打扰的完整的做完一件事情才能最大限度的利用好我们的精力和能力。应用在我们工作中，一天中可以在某几段需要集中的整块时间（oncall当天可能要做好没有整块时间的打算），开启勿扰模式，减少被打断的次数，才可能更高效的完成设计或者编写代码，提升整体的任务完成效率</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>立即行动</title>
    <url>/2020/04/26/2020-04-26-act-immediately/</url>
    <content><![CDATA[<p>当你决定做一件事情时，你必须在72小时之内行动起来，否则你可能永远不会再做了。这是前两天从一本书上学习到的一句话，觉得很有道理，无关乎是不是三分钟热度，因为我们处在一个信息爆炸的时代，每天又在不断的被信息淹没，如果决定做一件事时不马上行动起来，很可能就会被后来的信息淹没。至少当我们有一个想法时，赶紧记录下来，然后根据四象限模型放到对应的优先级中，这样以后才有迹可循。我理解这句话的要点就是提高执行力，立即行动起来。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于信息同步</title>
    <url>/2020/06/07/2020-06-07-information-sync/</url>
    <content><![CDATA[<p>信息同步非常重要，当我们前期与其他同学对接了需求之后，如果由于某些原因无法正常开始开发的话，一定要及时同步到对方，否则对方默认我们会支持而开发了相应功能之后，问我们要功能的时候却无法提供，这样不但浪费了对方的人力还会对双方的合作产生非常负面的影响。切记切记，信息一定要及时同步。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>逆商</title>
    <url>/2020/05/29/2020-05-29-anti-intelligence/</url>
    <content><![CDATA[<p>如果把面对逆境比作攀登山峰，我们可能成为三种角色：放弃者，扎营者，攀登者，放弃者很好理解，遇到逆境便产生退缩的想法，屈服于逆境，觉得自己不行；扎营者是克服了几个逆境之后，觉得自己满足了，便不再举步向前，原地扎营；攀登者用于面对和发现逆境，并不断的克服，不断向前。大部分人都是扎营者，但我们都期望攀登者。遭遇困难时，我们可以使用夸张的方式告诉自己遇到了逆境，例如在脑海里告诉自己“叮！逆境来了”，这样我们便不会畏惧它，而是去想办法克服它，不断向前，我们终将成为攀登者。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于坚持</title>
    <url>/2020/04/17/2020-04-17-about-consist/</url>
    <content><![CDATA[<p>最近听到了几个定律：荷花定律，竹子定律和金蝉定律，其核心思想都是要坚持不懈，荷花在最后一天开满池塘，而前一天只有一半而已，竹子4年时间发展根系，只为之后迸发的成长，蝉在底下长久深埋，只为最后的腾飞。这些其实都很符合当今的一个说法，苦练基本功，延迟满足感，不要因为眼前一时的得失产生放弃的心理，而是顶住压力，不断地保持学习和进步，这样才能让我们获得更好的成长。比如我们平常开发过程中，可能会遇到一些比较棘手的任务，导致站会的时候感觉没有什么进展，这个时候我们不应该失落而导致效率降低，而是更应该想办法解决问题或寻求帮助，从而锻炼自己的技术水平，更快更稳的成长。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>非暴力沟通</title>
    <url>/2020/05/15/2020-05-15-non-violence-communicate/</url>
    <content><![CDATA[<p>本周阅读了《非暴力沟通》了解到我们周围其实充满了无意识的“暴力沟通”，比如直言“你这个方案不对”，“你应该这么这么做”等等，这种沟通很可能导致对方有很不好的感受，不利于后续的沟通。所以在沟通之前我们可以先把谈话目标说出来，然后采用四步法进行沟通：讲事实，讲感受，讲原因，讲需求。例如：妻子对丈夫说，我想和你谈谈你回家晚的情况，这周你有四次在22点之后回家（<strong>讲事实</strong>，不要添加主观感受，例如“经常回家晚”），这样让我感到很孤单（<strong>讲感受</strong>），因为你不在家我没人可以说话，也有点害怕（<strong>讲原因</strong>），我希望你今后尽量在22点之前回家（<strong>讲需求</strong>，明确的提出需求）。先提出谈话目标，可以让对方提前知道接下来要讨论的要点，然后通过<strong>事实，感受，原因，需求</strong>一步步让对方了解到自己做的事情造成的影响，应该如何去做，而不会引起情绪上的爆发。当然，非暴力沟通也不是适用于所有的场景，使用前需要视谈论的话题而定。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>做需求之前需要思考的问题</title>
    <url>/2020/06/12/2020-06-12-thinking-before-do-requirement/</url>
    <content><![CDATA[<p>做需求之前我们需要思考几个问题：</p>
<ol>
<li>为什么要做。已经是老生常谈了，不能为了做需求而做需求，而是要思考这个需求可以提升哪些指标，满足哪些用户需求，是否合理等等</li>
<li>使用场景是什么。其实有的时候我们思考出来的需求可能是伪需求，乍看之下很有道理，但是如果不能结合使用场景来落地，那其实这个需求并没有实际的意义。能够满足使用场景落地的需求才是好需求。</li>
<li>制定何种评估指标。其实这一点我们都做到了一部分，我们每次实现需求并进行验证时都在自己的脑海里有一套评估指标，比如返回值是否符合预期，数据是否正常修改等等，但是如果某个需求比较大，更好的方法是把这些指标书面化，然后再思考一下是否有遗漏，尽量避免人为导致的疏漏。</li>
<li>实现到什么程度能满足业务的需求。大部分的需求也不是需要一步到位的看，我们在讨论一个需求时，如果能够先做出一个MVP版本满足业务的基本需求，然后再不断地根据业务的新需求迭代优化，可能是一个更加灵活和快速的方式</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>抓主要矛盾&amp;&amp;注重文档</title>
    <url>/2020/07/23/2020-07-23-main-issue-and-documents/</url>
    <content><![CDATA[<ol>
<li>最近学习到了一个方法论：抓主要矛盾，这个方法论意义为在我们面对众多工作的事宜时，要弄清楚当前的最重要最紧急的事情，并将其作为主要矛盾，并且这个主要矛盾随着事情优先级的改变也是随时改变的，需要解决主要矛盾之后再处理其他事宜，而不要让非主要矛盾占用了主要矛盾的时间</li>
<li>清晰的流程文档很重要，第一是可以省下每次去跟新同学讲解的时间，用节省下的人力去做更重要的事情，第二是可以帮助自己再次去理清思路，加深对整个项目的印象，第三是标准的流程文档可以避免出现人为疏忽而导致的问题。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>规划三角形</title>
    <url>/2020/06/28/2020-06-29-planning-triangle/</url>
    <content><![CDATA[<p>年度规划会议中，育亮讲到了一个规划三角形的方法论，感觉受益匪浅。<br>对于 MS 平台，可以拆分为【平台，数据，架构】三个维度来开展规划；数据包括数据分析，数据存储的完整性和实时性等，架构包括现有架构的稳定性和可运维性等，平台包括易用性和便捷性等，可以从三个维度各自的特点来思考可以做的内容，而不是仅仅限制于其中某一个维度；<br>做规划的时候，还要注意点到即止，把大目标分解为几个更细粒度的方向，为每个方向打一个分数，规划每个双月需要把各个方向提升多少，最开始不用做太多，先提供最基础的能力，把特别缺失的部分先做到及格，然后通过迭代提升分数，不要把某个方向做到很高分数后才去做别的方向，做规划需要考虑均衡发展，避免头重脚轻。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写项目规划</title>
    <url>/2020/08/14/2020-08-14-how-to-write-planning/</url>
    <content><![CDATA[<p>上次开会时育亮讲到，我们在写一个项目规划的时候应该从三个方面出发进行阐述，痛点，场景和解决问题，让我想到了之前的一个写作方法论——5w1H，痛点对应的就是 why，我们为什么要做这个项目；场景对应的就是 where，when，who，我们在什么情况下为谁服务，有哪些使用场景；解决问题对应的就是 what 和 how，我们做哪些事情，如何解决用户的痛点问题。这个方法不仅仅可以用在项目规划，在我们要向他人分享内容的时候也可以采用这种框架，能够让听众更加清晰地了解文章要讲述的内容。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做长期规划</title>
    <url>/2020/07/12/2020-07-12-long-term-planning/</url>
    <content><![CDATA[<p>又从育亮学到了一个关于制定规划的点：做长期规划的时候，不一定要基于现有的能力想我们能做什么，可以激进一些，</p>
<ol>
<li>看看能不能与其他部门合作共同开发，共建更加适宜用户使用的平台；</li>
<li>跳出当前的能力圈思考我们还有什么可以做的，然后再收束成我们如果做需要什么样的能力，进而去锻炼相关的能力。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>深入一线了解用户需求</title>
    <url>/2020/08/23/2020-08-23-investigate-user-requirements/</url>
    <content><![CDATA[<p>到深圳出差和对应的架构和业务开发面谈之后深有感触，真的是要多深入一线，才能够真正了解用户的需求，换句话说，只有真正的接触了用户在系统的使用过程中遇到的痛点，才能让我们启发我们更深入的去思考。相比基础架构，业务架构能够更多的接触到用户，也就能更能理解用户的痛点，能思考并提出解决用户问题的需求点，所以我们要多和业务架构以及业务的同学多沟通交流，这不仅仅能让我们更多的接触到用户的痛点，更能激发我们的思考，扩展我们的视野。</p>
<p>另外，在和用户聊需求的时候，不要直接问用户想要什么，因为大概率用户也不知道自己想要的功能具体是什么，也不要直接向用户讲解自己系统的功能，因为用户很可能缺少上下文，并不能很好的进行理解。我们应该跟用户聊他们的工作和使用场景，了解他们在此过程中遇到的问题和潜在的优化点，从而挖掘出用户的需求，并且通过挖掘用户使用场景验证方案的可行性。此外，做访谈总结的时候，最好把用户的原话写上去，因为每个人对于同一句话的理解可能是不同的，写上用户的原话，也能佐证自己的理解是正确的。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何应对焦虑</title>
    <url>/2020/08/25/2020-08-25-how-to-deal-anxiety/</url>
    <content><![CDATA[<p>这周听到关于焦虑的解释与应用，觉得比较受用，分享给大家。</p>
<p>焦虑指的是我们对还没有发生的事情产生的负面情绪。关键词：“还没有发生”、“负面情绪”。还没有发生意味着我们是有时间改变它的，负面情绪意味着我们可以直面它、接受并改变它。当我们有这样的情绪时，可以尝试使用列清单的方式，把可能发生的最坏结果写下来，并从第三方视角审视一下，写下为了从坏变好，自己可以做什么事情，从而掌握主动权而不是等待坏结果的发生。</p>
<p>解决焦虑的最好办法，是解决那个引发焦虑的问题。不要沉浸在情绪里，要沉浸在行动里，用行动解决问题。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>避免经验主义导致的问题</title>
    <url>/2020/08/07/2020-08-07-avoid-empiricism/</url>
    <content><![CDATA[<p>在业务高速发展的系统中，在利用以往经验进行判断时，需要首先判断当前的业务是否还符合历史经验所处的背景和环境中，是否还适合套用经验，如果不适用，就需要摒弃以往的经验，重新思考针对当前业务环境，使用何种方案才能拥有更好的收益，否则很可能会产生反向的效果</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我们要写周报</title>
    <url>/2020/09/06/2020-09-06-why-write-weekly-report/</url>
    <content><![CDATA[<p>最近在思考为什么我们要写周报，觉得有两方面的作用：</p>
<ol>
<li>对自己，周报是检核项目进展明确项目计划、复盘与调整迭代策略的重要手段。因此，周报内容可以围绕项目进展、计划、经验总结、认知迭代几个方面去写，让自己能够在写周报的过程中不断总结不断进步。</li>
<li>对合作伙伴，周报可以让大家了解项目进展与问题，既能起到进展同步和暴露问题的作用，又能结合项目提出对合作伙伴的诉求，获得对方支持。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>掌控习惯</title>
    <url>/2020/09/20/2020-09-20-control-habits/</url>
    <content><![CDATA[<p>《掌控习惯》中提到了打造好习惯的四个定律，感觉对我们还是可以有所帮助的：</p>
<ol>
<li>让习惯显而易见<ul>
<li>用习惯记分卡记录自己每天的习惯，并标注出来哪些是好习惯，哪些是坏习惯</li>
<li>习惯叠加，将不同习惯叠加在一起使其更加显而易见，例如我吃饭之前先要洗手</li>
</ul>
</li>
<li>让习惯不可抗拒<ul>
<li>让习惯联动起来，继当前习惯之后，我要完成一个我需要的习惯，接着完成一个我想要的习惯</li>
<li>养成习惯时，提升执行习惯的次数的效果大于提升执行习惯的时间</li>
</ul>
</li>
<li>让习惯简单易行<ul>
<li>习惯是切入点而不是终点，作为启动一系列习惯的起点</li>
<li>两分钟原则，养成习惯时，缩减成两分钟可以完成的版本，比如读一页书，然后再逐步增长时间</li>
</ul>
</li>
<li>让习惯令人愉悦<ul>
<li>打造即时满足感，完成某一个习惯之后，给自己一个奖励</li>
<li>糟糕的坚持也好过放弃，连续放弃两次之后可能就养成了一个坏习惯</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>应对“无知之错”和“无能之错”</title>
    <url>/2020/09/11/2020-09-11-two-kinds-fault/</url>
    <content><![CDATA[<p>《清单革命》中提到了两类错误：“无知之错”和“无能之错”。</p>
<ol>
<li>无知之错指的是没有掌握相关的知识，可以认为是专业知识不足以解决遇到的问题，针对此类问题，需要增强专业知识的学习，掌握通用解决方案，从而解决问题。</li>
<li>无能之错指的是犯错并非是因为没有掌握知识，而是因为没有正确使用，此类问题更加考验对已有知识的运用以及相关经验的积累，比“无知之错”更难解决。正所谓“知易行难”，光学习知识是不足以应对这个千变万化的世界的，实践出真知，多积累经验，应用知识，我们需要把重点放在“行”上。。。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>从曾国藩身上我们可以学习到的东西</title>
    <url>/2020/10/15/2020-10-15-learn-from-zengguofan/</url>
    <content><![CDATA[<p>曾国藩，我们耳熟能详的一位伟人，组建湘军、平叛太平天国之乱、剿灭捻军、兴办洋务运动，为晚清朝廷立下了赫赫功勋，在我的眼中他一直就是一个有着丰功伟绩，可望而不可及的一位人物。但是张宏杰先生的《曾国藩的正面与侧面》经过严密的考证和整理，从曾国藩日常生活和工作中的一件件小事讲起，将曾国藩一生的故事娓娓道来，将曾国藩这一位“圣人”的形象有血有肉的，立体而丰富的展现在了我们的面前。</p>
<p>为什么曾国藩的事迹总是能够为人们所称道，因为他只是一个智商中等，集各种矛盾于一体的人，就像我们每一位普通人一样，没有超高的智商，没有强硬的后台，靠的是自己的努力，最终成为了一位伟人，这样的成长路径对于普通人来说是可复制的可达到的。</p>
<p>但同时他的成功又不是那么容易复制和达到的，他的性格中有四个要点，让他能够逐步的向上走，缓慢的到达巅峰，这几点真的不是一般人可以轻易做到的。</p>
<p>他能获得成功最重要的一点就是“有恒”，琦玉老师（一拳超人）为什么那么强？贵在“有恒”，曾国藩更是这样，他的“有恒”体现在他的日课上，在日课上他记录了自己每一天的所作所为，包括各种糗事和不足，从而不断反思自己做的不好的地方，及时更正，然后坚持做得好的，这和《掌控习惯》所提出的“习惯是自我提高的复利”不谋而合，他几十年如一日的不断更正自己的错误，让自己不断变得更加优秀。我司的“始终创业”这一点中，“始终”二字便是“有恒”的一个最佳体现，能够一直以一家创业公司的心态要求自己，能自驱，能坚持，能有韧性的不断为之持续的努力，坚持稳步前进。</p>
<p>除了有恒之外他还立志高远，他三十岁之后立志成为“完人”，“内圣外王”，内，俯仰无愧于天地，光明澄澈，不苟且，不退缩；外，经邦治国，建功立业，充分实现自我价值，并一直以“圣人”的言行要求自己，这个难以达到的目标却是驱使他一直不断向前的最大动力，是他面对艰难困苦、诱惑而不停步的指路明灯。这和我们的 OKR 和“追求极致”是多么的契合！我们在工作中也应该像曾国藩一样，以终为始，定下一个长远的目标作为我们的指路明灯，能够去追求长期价值而不是被当下所左右。此外当前所做的每一件事都应该考虑的更加全面，对每一个问题都能刨根问底，每一次思考都能更加贴近本质，追求更高的标准和结果，以求达到“内圣外王”的境界。</p>
<p>还有一点是十分重要的，那就是他遇到挫折能够触底反弹，而不是被困难打倒，人生的五次大堑：科举被悬牌批评，画图甚陋被同事耻笑，批评皇帝遭反驳和挑战“大名大位”者被排挤，长沙“打脱牙和血吞”，江西之困“积泪涨江”，每一件都对他产生了巨大的影响，他在遭受挫折时，想到的不是抱怨，而是憋着一股气奋起向上，让他人刮目相看。其中最重要的一次是在江西去为父丁忧的时候逼迫皇帝给实权失败，在家中不断反思自己以前的做法，让他彻彻底底的变换了自己对人对事的姿态，不再众人皆醉我独醒，而是选择去“和光同尘”，让自己逐渐有了可以做大事的条件。“务实敢为”中也提到了这一点，我们要勇于开拓创新，有担当不畏艰难，敢于失败，并从失败中吸取经验，触底反弹，在不断快速试错迭代中修正我们的方向，最终达成更高的目标。</p>
<p>另外他交友广泛，对待朋友十分真诚，所以能够获得众多臂助，这就是“坦诚清晰”和“开放谦逊”呀，人前人后一致，能够表达自己的真实想法，犯错了勇于承认和改正，能够善意假设，信任对方，久而久之就能够建立长期的友好合作关系，更加快速的推动事情的进展。</p>
<p>曾国藩当时很多的做法都是为了顺应官场顺应时代的无奈之举，处于当今时代，我们能够从曾国藩身上学习到的最重要的几点：</p>
<ol>
<li>我们要立志高远，这样我们才能够不在小诱惑和小目标前止步</li>
<li>为了达到高远的目标，我们需要不断坚持，“有恒”地去为达到目标不断努力</li>
<li>一个人要坚持下来是很难的，我们有时还需要借助外力来监督自己，让身边的朋友或家人看到并督促自己</li>
<li>要多交朋友，用“诚，敬，恕，浑”的方式来交朋友，待人以诚，尊敬他人，宽恕他人，不嫉妒和过于计较，拓宽自己的人脉，多一个朋友多一条路。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>读书让我们进步，实践方能巩固</title>
    <url>/2020/10/13/2020-10-13-reading-and-practise/</url>
    <content><![CDATA[<p>书籍凝聚了各类高手关于他们对于这个世界或者某些事件的理解，我们可以更加高效的从中获取知识，而不用通过日常生活中自己去慢慢踩坑总结，可以极大提高我们获取信息的效率。</p>
<p>我觉得书籍大体可以分为四类：工具书，专业书，文化书，娱乐书，工具书用于提升我们的软实力，比如众所周知的《刻意练习》《金字塔原理》等，专业书用于提升我们专业硬实力，比如《深入理解 JVM 虚拟机》等，文化书用于提升我们的人文素养，文化常识，比如《牛津通识》《明朝那些事儿》等，娱乐书就是用来让我们放松身心，但没有任何实际作用的书籍，比如各类网络小说。</p>
<p>我们应当尽量去阅读能够提升我们能力的书籍，而少去阅读小说这种能够提供即时满足感却无实际意义的书籍。此外，好的书值得多读几遍，并且一定要记录书籍的要点和自己当时读完之后的感想，这样能够加深我们对于这本书的理解和记忆，如果读完了就完事了，遗忘是迟早的事情，而记录和复习才能够加深我们的印象，让我们真正的把书读到脑子里。</p>
<p>把书读到脑子里之后还不算完，能够把书中的知识应用到平常的工作生活中，才算是“读书”真正的终极状态，实践出真知，书中的知识不一定能够直接照搬来解决问题，而利用书中学来的知识和现实相结合，解决真实遇到的问题，才发挥了这次读书的最大作用，才真正巩固了这次读书的效果。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>从健身得到的一些感触</title>
    <url>/2020/10/20/2020-10-20-learn-from-body-training/</url>
    <content><![CDATA[<ol>
<li>健身是一项需要长期坚持的事业，身体健康是一辈子的事<ul>
<li>健身是一项非常好的习惯，但是需要长期坚持才能够凸显成效，好习惯都是延迟满足的</li>
<li>人的一生最重要的是身体健康，无论你的价值有多少个零，都是需要身体健康这个 1 来支撑的，失去了身体健康，后面再多的零也是无意义的</li>
<li>如何将健身保持下去？找一个或几个人一起去练是很好的方法，互相监督能够大大提升坚持下去的概率</li>
</ul>
</li>
<li>不要因循守旧，还要善于学习新的内容<ul>
<li>有时候我们健身总是做一套固定的动作，久而久之可能就会变得倦怠，提不起兴趣，所以我们要持续学习新的动作，不断刺激自己健身的兴趣，达到更好的效果</li>
<li>我们的工作和学习也是这样，如果仅仅抱着已有的知识“吃老本”，早晚有一天会无法跟上时代的潮流，我们要不断地学习新的知识，并应用到工作和学习当中，才能够在时代的浪潮中紧跟脚步，披荆斩棘，乘风破浪</li>
</ul>
</li>
<li>健身不是一个人的事<ul>
<li>刚才说到身体健康是 1，并且这个 1 还不仅仅是自己的 1，还会影响到我们身边更多的 1，比如父母，配偶，子女等等，我们把身体变得更好，也会让他们更加的安心</li>
<li>我们把身体变得更好之后，还能够反过来影响身边的人，主动教授他们相关知识，让他们也更加具有健身意识，刻意的去锻炼自己的身体，这样一家人的身体都会变得越来越好</li>
</ul>
</li>
<li>健身要适量<ul>
<li>一定要量力而行，不要把自己练得影响了第二天的工作和学习，这样反而得不偿失</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>提升自己思考问题的 level</title>
    <url>/2020/11/02/2020-11-02-upward-thinking-level/</url>
    <content><![CDATA[<p>上次和育亮 one one 时，他提到要提升自己思考问题的层次，不要仅仅思考如何解决当前的问题，这样会不断的陷入细节当中，而应该提升关注问题的层次，抽象出来，理解业务的痛点，当理解并解决了业务的痛点之后，还应该举一反三，更深入的思考是否其他业务也可能存在类似的痛点，如何更好地去解决这类共同的问题。再往上一层，还应该能够考虑到如何协调资源以落地方案。再往上，还应该考虑到业界是如何解决此类问题的，能否辅助我们解决问题，我们今后应该如何继续推进系统的演进等等问题，提升自己的 insight。</p>
<p>总结下来就是，不要仅仅关注如何解决当前的问题，要理解业务痛点举一反三，并能够考虑如何推动方案落地，还需要考虑方案的后续发展演进并持续推动。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写一篇产品设计文档之我见</title>
    <url>/2020/11/08/2020-11-08-how-to-write-product-design-document/</url>
    <content><![CDATA[<p>最近编写产品设计文档时，发现了一些方法论，在这里分享出来。首先，要写一篇产品设计文档时，要明确产品设计的背景是什么，是由于什么问题无法解决才需要这个产品，这个产品针对的用户是哪些人，产品设计出来是要帮他们在什么场景下解决什么问题，为了解决这些问题我们需要提供哪些核心能力，这些核心能力有哪些使用场景，产品要如何呈现才能更好的让用户使用，最后才是详细的架构和技术设计，总结下来一般框架为：</p>
<ol>
<li>背景<ul>
<li>现有能力</li>
<li>局限性</li>
</ul>
</li>
<li>产品愿景</li>
<li>核心能力</li>
<li>使用场景</li>
<li>产品设计<ul>
<li>产品呈现</li>
<li>方案设计</li>
</ul>
</li>
<li>所需资源</li>
<li>效果评估</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更好地准备一场会议</title>
    <url>/2020/11/11/2020-11-11-prepare-conversation/</url>
    <content><![CDATA[<p>今天开了一场略显尴尬的会议，会议上我方存在的问题主要有两点，第一是会议之前和某一相关方没有达成一致，导致在会议上来回拉扯说不清楚，第二是会议之前准备不足，导致与会方提出的问题没有很好的进行回答，导致拖慢了整个会议的节奏，也给与会方留下不太好的印象。所以，在参加重要的会议之前，我们应当准备以下内容：</p>
<ol>
<li>与合作方先达成一致，就算有不一致的地方也先统一好在会上的表述，会后再私下讨论和解决不一致的地方，而不是在会上来回拉扯</li>
<li>在开会之前先定义好会议议程，整理好会议要讨论的内容和想要达成的目标，有导向性的开展会议会更加利于达成一致</li>
<li>开会之前需要事先准备一些与会方可能提出问题的解答，以免会上仓促回答导致内容缺失</li>
</ol>
<p>同样，在开会过程中也有一些需要关注的方面</p>
<ol>
<li>会议开始时，先跟与会方对齐会议议程，然后再展开会议</li>
<li>开会时，某一项议程达成一致后再进行下一项议程，当然，如果某项议程长时间无法达成一致，则需要先暂时搁置，先过完能够达成一致的议程</li>
<li>开会过程中需要记录双方讨论的内容和观点，以便之后复盘</li>
<li>会议结束前，再次确认达成的一致的观点和后续安排，保证双方理解没有偏差</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提升自己的批判性思维</title>
    <url>/2020/11/22/2020-11-22-criticism-thinking/</url>
    <content><![CDATA[<p>今天看 TED，里面提到了 5 个提升批判性思维的 tips，这里分享给大家</p>
<ol>
<li>确定目的<br>在我们进行某项行动之前，不能为了做而做，而是需要在行动之前确定此次行动需要达成的目标，以便更有针对性的进行下一个步骤</li>
<li>收集信息<br>明确目标之后，需要针对达成这个目标收集信息，包括且不限于咨询领域专家，参考成功经验等，尽可能多的收集信息，为下一个步骤提供基础</li>
<li>应用信息<br>收集到足够的信息之后，我们还需要对这些信息进行分析，找出使用何种信息，进行何种方式的行动可以达成目标，对于一些可能的干扰信息，需要多问一句为什么，是否符合逻辑，能否帮助达成目标？</li>
<li>考虑潜在信息<br>除了考虑已有信息直接给出的结论，还需要思考这些信息中是否还会隐藏一些潜在的信息，比如汽油降价，表面信息是可能会带来购车需求的增加，但我们还需要考虑到这可能会带来的污染等</li>
<li>发掘其他视角<br>这一点其实也是老生常谈了，需要多角度看问题，最简单的方式其实是站在对立的角度来看同一个问题，假想自己是辩论的双方，不断找对方思维的漏洞，从而找出不同的观点，比如我们一个技术方案的设计，设计完成后，多问自己一句，如果不这么实现，能否有其他的实现方式等</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>如何刻意练习</title>
    <url>/2020/09/25/2020-09-25-deliberate-practise/</url>
    <content><![CDATA[<p>看完了《刻意练习》，总结下来有以下四个主要步骤：</p>
<ol>
<li>找个好导师（如果没有导师就去学习杰出人物的练习方式）<ul>
<li>求助导师或者学习杰出人物的做事方式，可以帮助我们建立高效的心理表征和练习方式</li>
<li>我们可以通过 3F 法创建有效的心理表征：focus，feedback 和 fix it，聚焦在做的事情上，然后获得反馈，并根据反馈及时进行修正和提升</li>
</ul>
</li>
<li>专注的投入<ul>
<li>练习时需要投入百分之百的精力，如果练习时变得懈怠，可以缩短练习时间，短时高效练习的效果要高于长时低效练习</li>
</ul>
</li>
<li>根据反馈跨越停滞阶段<ul>
<li>反馈是刻意练习中很重要的一个部分，通过反馈，我们可以了解练习的效果和练习中存在的不足，这样能够帮助我们调整练习方法，不断地改进自身，建立更加有效的心理表征</li>
</ul>
</li>
<li>保持动机<ul>
<li>动机是支持我们不断练习的推动因素，保持动机才能够保持不断地进步。</li>
<li>动机不足的原因只有一个：前进的理由败给了停下脚步的理由，所以要保持动机，要么加强前进的理由，要么弱化停下脚步的理由。</li>
</ul>
</li>
</ol>
<p>我们的技能是需要通过不断的练习才能够提升的，无论是编码能力或者是系统设计的能力，刻意练习的效果往往要高于被动练习，就如我们通过大量的开发实践才能够总结出更加高效的系统体系和业务架构，在每次开发过程中更多的投入精力，获得的结果会更加令自己惊喜。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>远离受害者模式</title>
    <url>/2020/11/25/2020-11-25-away-victim-mode/</url>
    <content><![CDATA[<p>今天看了一篇文章，提到一个受害者模式，是指在遭遇到困难或者失败时，把自己放在受害者的位置上，责怪他人或者环境，比如，责怪父母离异觉得自己很可怜，责怪配偶不关心自己觉得遇人不淑，工作不顺利责怪领导碾压自己等。受害者模式是一种弱者的模式，消极的模式，不积极反思自己的不足加以改正，而是怨天尤人，满怀委屈和不忿，觉得都是别人的错，与自己无关。</p>
<p>这种心态无法帮助我们意识到自己的能力和责任，产生正向的能量。要获得成长，必须要走出这种心态，主动为发生的事情承担责任，积极探索如何解决问题和避免类似问题的再次发生，并在一次一次的承担中锻炼自己的力量，佛说“莫向外求”，其实我们每个人的潜力非常大，只要我们更加积极主动，我们会发现其实我们是有能力进行选择，有能力承担更多的责任的，相信自己是十分强大的！</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>重要的 15.87%</title>
    <url>/2020/11/30/2020-11-30-important-15.87%25/</url>
    <content><![CDATA[<p>今天看到万维钢的一篇文章，讲到我们学习的三个区域：舒适区，学习区和恐慌区，在学习区我们可以达到心流状态，让我们的工作挑战和技能形成平衡，这也就需要我们要在已有的知识技能的基础上增加“意外”，也就是学习新的内容，这个新内容比例经过研究表明是 15.87%，当学习的新知识是这个比例时可以让人获得最快的成长，这个理论同样适用于人工智能学习。</p>
<p>所以想要让我们的学习效率获得提升，最好是基于我们熟悉的内容，再增加 15% 左右的新内容，这样可以让我们的大脑获得更多学习能力的提升，达到学习效率最大化</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>one on one 时需要注意的点（对同级或下级）</title>
    <url>/2020/12/06/2020-12-06-how-to-one-on-one/</url>
    <content><![CDATA[<p>最近学习了一个与人 one on one 的方法论模型，总结起来主要有两步：第一步是「建立信任打开心扉」，第二步是「解决问题」，切记在对方打开心扉之前，不要抛出问题，并且整个谈话应该是以被交谈者为中心，因为谈话主要是为了解决被交谈者的问题。两个部分又分为两个不同的模型</p>
<p>「建立信任」使用 <strong>PLASS</strong> 模型（praise listen ask share support），praise 表示以肯定和赞许开头，用「事实+评价」的方式肯定对方，打开对方心扉，listen 表示在整个谈话过程中要以倾听为主，给对方足够的时间和空间来表达，并在倾听过程中表示理解，ask 表示用询问和引导的方式获取对方的意见和想法，切记不要过分表达自己的想法，share 表示在谈话过程中还应当分享自己的意见和经验，表露自己的感受和想法，给对方提供「参考」而不是「指导」，support 表示在对方提出需要帮助时，尽自己的努力为对方提供尽量多的支持和帮助，切记不要越俎代庖。</p>
<p>通过上面的方式建立起信任，让对方能够真正的打开心扉，才能开始「解决问题」，这个阶段可以使用 <strong>GROW</strong> 模型（goal reality options way-forward），首先要对齐目标 goal，包括短期和长期目标，让谈话双方能够在一开始就谈论问题的重要性达成一致，然后需要分析现状 reality，抛出遇到问题的难点和原因，充分交换上下文信息，接着一起讨论方案 option，提出一些可供选择的策略或者行动方案，讨论需要哪些支持和资源，最后需要确认行动计划 way-forward，拆分达成目标的步骤，并且设立具体的实施方案。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>关于系统设计抽象一层的思考</title>
    <url>/2020/12/14/2020-12-14-abstract-thinking-of-system-design/</url>
    <content><![CDATA[<p>平常在设计系统时，会基于现有的条件进行系统架构的设计，满足当前用户的需求，以最小的代价完成系统设计和实现。这样的设计在无法完全确定当前业务能否“活下来”的情况下是比较适用的，因为成本较低，可以快速试错，但是带来的缺点是总以最小代价来进行设计，可能会导致设计能力的原地踏步。因此，我们应该在成本可控的基础上再多进行一层抽象的思考，当用户量级或者请求量级提升上来之后应该如何进行设计以保证系统的可靠性，或者如何提升设计的通用性，减少以后的修改成本。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>关于系统设计抽象一层的思考</title>
    <url>/2021/01/11/2021-01-11-about-persevere/</url>
    <content><![CDATA[<p>从我开始用「不背单词」APP 背单词和「多邻国」APP 学日语已经 50 天了，以前都说 21 天养成一个习惯，那我这个习惯也算是养成了，但是其实能够坚持下来也是有一些条件的，这也和《掌控习惯》里面提到的一些方法不谋而合–让习惯简单易行和让习惯令人愉悦，其中我背单词的时候没有每天背非常多的单词个数，因为那样复习的时候会让自己产生压力，让坚持变的困难，而「多邻国」每个单元的学习比较简短，并且在每次学习之后给出一个及时反馈，给一些奖励，并且有学习排名，让我更有动力继续学习下去。</p>
<p>反映到我们生活中的其他方面，其实我们也可以使用类似的方法让自己能够更长久的坚持下来</p>
<ul>
<li>看书不用看太多，每次看一章或者看一节，看完之后合上书，回顾一下刚刚看完的内容，总结一下自己的理解，最好能够找个人讲出来，化被动为主动。</li>
<li>适当的做总结，而不是等年终的时候才做总结，一次总结太多东西会令人懈怠，每周都回顾一下自己做的事情，学到的内容，最好也能总结下来找个人讲出来，不知不觉之中自己就会获得更快的成长。</li>
</ul>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么需要积极主动</title>
    <url>/2020/10/26/2020-10-26-be-positive-willing/</url>
    <content><![CDATA[<p>以前在穿山甲的时候，有一句话其实说的很对：「成长是个人的事情」，正对应了那句老话「师傅领进门，修行在个人」，我们的 mentor 或者 leader，是我们成长道路上的领路人，可以给我们指出错误，帮助我们调整方向，但是他们是没有义务也没有办法像父母一样拖着拽着让我们进步的，每个人都有自己需要处理的事情，不可能时时刻刻关注到其他人的状态。《刻意练习》里面提到过，练习最重要的步骤就是练习之后需要有即时反馈，让自己能够适时调整错误的姿态和动作，所以积极主动地向周围的人寻求反馈是很重要的，无论是平级还是 leader，都能够为我们提出相应的反馈，这些反馈对于我们的成长是至关重要的。此外，我们还需要更加积极主动的参与到每一份工作当中，从中汲取成长的养分，并主动进行思考，推陈出新。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更好的处理你的版本 tag</title>
    <url>/2021/01/27/2021-01-27-how-to-deal-with-tag/</url>
    <content><![CDATA[<p>今天在发布上线的时候，CI 突然报错没有通过编译，打开一看，惊了，之前依赖的公司内部的一个组件库的 tag 删除了😂，oncall 问了原因，告知是有两个连续的版本 1.0.2 和 1.0.3 有个比较严重的问题所以删掉了。由此，我不禁思考：如何发布版本才能更少的影响用户</p>
<ol>
<li>首先，一定是要尽量保证发布的版本不要有问题，要进行足够的单测和集成测试，力求保证发布的每个版本都是 bug free 的，作为基础组件的库更应该如此。</li>
<li>不要删除已有的 tag，然后重新发一个同名的 tag，之前也是一个组件库的同学进行了这个样的操作，导致已经下载的文件的 checksum 和线上不一致，导致编译错误。</li>
<li>不要在新版本 tag 还没有准备好的情况下，就把老版本的 tag 删除了，即便老版本的 tag 可能有 bug，但是不一定会影响使用，但是一旦删除了，导致无法通过编译而无法上线，所造成的影响可能会更大，比如有一个紧急发布需要上线，但是由于老 tag 删除了而无法打包，后果不堪设想。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>Wenknows的利器</title>
    <url>/2016/06/27/benefit_others/</url>
    <content><![CDATA[<blockquote>
<p>“工具和灵感，都是利器。当来自不同的领域，不同类型的创造者的工具和灵感互相碰撞的时候，才会迸发出更多的可能性。”</p>
</blockquote>
<p><strong>更新记录</strong></p>
<p>2016-06-27  研二期间创建本篇博文<br>2018-05-21  更新工作，更新使用的软件</p>
<h3 id="我和我所做的工作"><a href="#我和我所做的工作" class="headerlink" title="我和我所做的工作"></a>我和我所做的工作</h3><p>我是<code>Wenknows</code>，现在工作于小红书，职位为电商商户平台后台开发，平时喜欢运动和吃吃吃，业余弹弹尤克里里，喜欢听音乐和评书，喜爱编程，希望在程序猿的道路上能走得更远。</p>
<h3 id="我当前使用的硬件"><a href="#我当前使用的硬件" class="headerlink" title="我当前使用的硬件"></a>我当前使用的硬件</h3><p>电脑是 14 年的 15 寸 MacBook Pro with Retina，i7处理器，16 GB RAM＋256 GB SSD。<br><img src="/uploads/in-post/macbookpro.png" alt="macbookpro"></p>
<a id="more"></a>
<p>键盘是Cherry的红轴机械键盘MX-BOARD 3.0，键盘比较软，按起来很舒服。</p>
<p><img src="/uploads/in-post/cherry.jpg" alt="cherry"></p>
<p>鼠标是罗技的G502。</p>
<p><img src="/uploads/in-post/mouse.jpg" alt="Logitech"></p>
<p>手机是小米 Note 3，照相很清晰，但是使用时偶尔会有卡顿。<br><img src="/uploads/in-post/xiaomi-mi-note3.jpg" alt="Xiaomi Note 3"></p>
<p>喜欢听音乐，但算不上发烧友，有一个beats录音师的全包式耳机。<br><img src="/uploads/in-post/beats.png" alt="beats"></p>
<h3 id="我当前使用的软件"><a href="#我当前使用的软件" class="headerlink" title="我当前使用的软件"></a>我当前使用的软件</h3><h4 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h4><h5 id="工作相关"><a href="#工作相关" class="headerlink" title="工作相关"></a>工作相关</h5><ul>
<li>科学上网：<code>Tunnelblick</code>和<code>Lantern</code>，前者是免费的OpenVPN客户端，后者是直接科学上网的工具。</li>
<li>Java：<code>IDEA</code>，感觉是目前最好用的Java IDE，功能强大，界面也很好看。</li>
<li>Python：<code>Pycharm</code>，和IDEA是同一家公司的软件，同样有强大的功能，美观的界面。</li>
<li>Terminal：<code>iTerm2</code>，好用的终端软件，在各大论坛也得到了大家的推荐。</li>
<li>MySQL：<code>MySQL Workbench</code>，MySQL自带可视化管理软件，兼容性好，速度快。</li>
<li>API：<code>Dash</code>，使用MAC的程序员应该都知道这款软件吧。</li>
<li>论文：<code>EndNote</code>，各大论文网站都能生成EndNote格式的引用。</li>
<li>FTP：<code>Cyberduck</code>，被大家广泛推荐的FTP客户端。</li>
</ul>
<h5 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h5><ul>
<li>浏览器：<code>chrome</code> + 插件，插件安装了Adblock，vimium，Infinity，crxMouse Chrome Gestures，Tampermonkey + 百度网盘助手</li>
<li>邮件：<code>MAC自带邮件</code>，兼容性好，速度飞快。</li>
<li>虚拟机：<code>Parallels Desktop</code>，安装了win 8.1和Fedora 23.</li>
<li>词典：<code>有道词典</code>。</li>
<li>音乐播放器：<code>网易云音乐</code>，感觉它的推荐算法做得很好。</li>
<li>视频播放器：<code>MPlayer</code>，QuickTime和射手播放器。</li>
<li>视频下载：<code>硕鼠MAC</code>，可以下载搜狐等网站的视频。</li>
<li>pdf阅读器：<code>预览</code>和<code>Skim</code>，优点是速度快，都有缺点就是不能创建目录，创建目录的话要用Adobe Acrobat。</li>
<li>压缩软件：<code>keka</code>和<code>Unarchiver</code>，小巧而精致，也得到了大家的推荐。</li>
<li>聊天软件：<code>QQ</code>，<code>微信</code>，应该都是必装的吧。</li>
<li>下载软件：<code>迅雷</code>，<code>uTorrent</code>，迅雷虽然很流氓，但是速度确实快，uTorrent是用于下载bt资源的。</li>
</ul>
<h5 id="系统增强和提升效率"><a href="#系统增强和提升效率" class="headerlink" title="系统增强和提升效率"></a>系统增强和提升效率</h5><ul>
<li>全局搜索：<code>Alfred</code>，大家应该对这款软件也不陌生。</li>
<li>窗口调整：<code>Moom</code>，预设了几种窗口位置和大小。</li>
<li>个人笔记：<code>有道云笔记</code>和<code>Evernote</code>，用于组织不同形式的文档。</li>
<li>防止睡眠：<code>Caffeine</code>，应该也是耳熟能详的软件了。</li>
<li>文档编辑器：<code>Atom</code>，我是从Sublime转过来的，觉得Atom美观，易用，但是速度方面貌似不如Sublime快。</li>
<li>思维导图：<code>Xmind</code>，实验室导师推荐的思维导图软件，全平台都有。</li>
<li>快捷键：<code>Karabiner</code>，快捷键不够用了吗，使用这款软件吧！</li>
<li>切换：<code>Contexts</code>，一款增强了程序间切换功能的软件。</li>
</ul>
<h5 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h5><ul>
<li>音乐：<code>Guitar Pro 6</code></li>
<li>游戏：<code>Lost Castle</code></li>
<li>平台：<code>Steam</code></li>
</ul>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><h5 id="生活-1"><a href="#生活-1" class="headerlink" title="生活"></a>生活</h5><ul>
<li>聊天软件：<code>QQ</code>，<code>微信</code>，这个应该是现在每台中国智能机都会装的软件了吧。</li>
<li>阅读软件：<code>追书小说</code>，<code>Kindle</code>，<code>UC 浏览器</code>，都是用来看书的。</li>
<li>音乐：<code>网易云音乐</code>，比较喜欢的还是中国风和轻音乐。</li>
<li>日历：<code>中华万年历</code>，功能丰富，缺点是广告多了点。</li>
<li>购物：<code>淘宝</code>，<code>京东</code>。</li>
<li>运动：<code>Keep</code>，<code>Pocket Yoga</code>，锻炼身体，责无旁贷。</li>
<li>科学上网：<code>无码VPN</code>，4G也可以科学上网。</li>
<li>音乐学习：<code>Finger</code>，用来练习尤克里里的软件。</li>
<li>记账：<code>口袋记账</code>，功能完善，界面美观。</li>
</ul>
<h5 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h5><ul>
<li><code>小鸡模拟器</code>，可以玩各种主机的游戏</li>
<li><code>开罗系列游戏--暖暖温泉乡等</code>，小巧而精致的时间杀手游戏</li>
<li><code>崩溃大陆</code>，非常棒的Rogue like游戏</li>
<li><code>王者荣耀</code>，最高段位星耀3</li>
</ul>
<h3 id="最理想的工作环境"><a href="#最理想的工作环境" class="headerlink" title="最理想的工作环境"></a>最理想的工作环境</h3><p>喜欢扁平化的管理氛围，每个人都积极向上，朝着同一个目标努力。同时也喜欢轻松愉快的企业文化氛围，愿意和能够让自己得到提升的人一起工作。</p>
<h3 id="平时或者工作灵感的方式"><a href="#平时或者工作灵感的方式" class="headerlink" title="平时或者工作灵感的方式"></a>平时或者工作灵感的方式</h3><p>灵感的迸发不是突然的事情，而必定是靠长期的积累从量变达到质变的过程。</p>
<p>最好的积累方式便是阅读，无论是读书，还是读他人博客的文章，都能得到很好的积累。</p>
<p>还有一个很好的积累方式就是和比自己强的人聊天，了解他们的思维方式，平时的学习习惯，进而对自己进行改变。</p>
<p>工作不要太长时间，要注意劳逸结合，放松的头脑更容易迸发出不一样的能力。</p>
<h3 id="推荐一件生活中的利器给大家"><a href="#推荐一件生活中的利器给大家" class="headerlink" title="推荐一件生活中的利器给大家"></a>推荐一件生活中的利器给大家</h3><p>一个是我正在使用的科学上网利器：<code>lantern</code>，中文名是蓝灯，免费，速度快。</p>
<p>另一个是高端的桌游：<code>一夜终极狼人</code>，喜欢和小伙伴们撕撕撕的你一定不要错过！</p>
<h3 id="利他社群计划"><a href="#利他社群计划" class="headerlink" title="利他社群计划"></a>利他社群计划</h3><p>本文参与了「利器社群计划」，发现更多创造者和他们的工具：<a href="http://liqi.io/community/" target="_blank" rel="noopener">利他社群计划</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Software</tag>
      </tags>
  </entry>
</search>
